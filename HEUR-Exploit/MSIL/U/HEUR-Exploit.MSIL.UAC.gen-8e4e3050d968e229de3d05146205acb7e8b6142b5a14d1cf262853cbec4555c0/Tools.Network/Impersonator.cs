using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Security.Principal;

namespace Tools.Network;

public class Impersonator : IDisposable
{
	private WindowsImpersonationContext _wic;

	public Impersonator(string userName, string domainName, string password, GEnum0 logonType, GEnum1 logonProvider)
	{
		Impersonate(userName, domainName, password, logonType, logonProvider);
	}

	public Impersonator(string userName, string domainName, string password)
	{
		Impersonate(userName, domainName, password, GEnum0.const_0, GEnum1.const_0);
	}

	public Impersonator()
	{
	}

	public void Dispose()
	{
		UndoImpersonation();
	}

	public void Impersonate(string userName, string domainName, string password)
	{
		Impersonate(userName, domainName, password, GEnum0.const_0, GEnum1.const_0);
	}

	public void Impersonate(string userName, string domainName, string password, GEnum0 logonType, GEnum1 logonProvider)
	{
		UndoImpersonation();
		IntPtr phToken = IntPtr.Zero;
		IntPtr hNewToken = IntPtr.Zero;
		try
		{
			_wic = WindowsIdentity.Impersonate(IntPtr.Zero);
			if (Class11.LogonUser(userName, domainName, password, (int)logonType, (int)logonProvider, ref phToken) != 0)
			{
				if (Class11.DuplicateToken(phToken, 2, ref hNewToken) == 0)
				{
					throw new Win32Exception(Marshal.GetLastWin32Error());
				}
				new WindowsIdentity(hNewToken).Impersonate();
				return;
			}
			throw new Win32Exception(Marshal.GetLastWin32Error());
		}
		finally
		{
			if (phToken != IntPtr.Zero)
			{
				Class11.CloseHandle(phToken);
			}
			if (hNewToken != IntPtr.Zero)
			{
				Class11.CloseHandle(hNewToken);
			}
		}
	}

	private void UndoImpersonation()
	{
		if (_wic != null)
		{
			_wic.Undo();
		}
		_wic = null;
	}
}
