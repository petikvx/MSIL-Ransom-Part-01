using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;

internal struct Struct21
{
	public enum Enum11
	{
		const_0,
		const_1,
		const_2,
		const_3
	}

	[Serializable]
	[CompilerGenerated]
	private sealed class Class51
	{
		public static readonly Class51 class51_0 = new Class51();

		public static Func<Process, string> func_0;

		internal string method_0(Process x)
		{
			return x.ProcessName;
		}
	}

	private IntPtr intptr_0;

	private IntPtr intptr_1;

	private IntPtr intptr_2;

	private IntPtr intptr_3;

	private IntPtr intptr_4;

	private IntPtr intptr_5;

	private IntPtr intptr_6;

	private IntPtr intptr_7;

	private List<int> list_0;

	private int int_0;

	private List<Process> list_1;

	public IntPtr lhWndParent
	{
		get
		{
			return intptr_0;
		}
		set
		{
			intptr_0 = value;
		}
	}

	public IntPtr lhTaskManagerMain
	{
		get
		{
			return intptr_1;
		}
		set
		{
			intptr_1 = value;
		}
	}

	public IntPtr lhDirectUIHWND
	{
		get
		{
			return intptr_2;
		}
		set
		{
			intptr_2 = value;
		}
	}

	public IntPtr lhSysListView32
	{
		get
		{
			return intptr_3;
		}
		set
		{
			intptr_3 = value;
		}
	}

	public IntPtr lhSysHeader32
	{
		get
		{
			return intptr_4;
		}
		set
		{
			intptr_4 = value;
		}
	}

	public Struct21(IntPtr TaskManagerParentAddress)
	{
		intptr_0 = TaskManagerParentAddress;
		intptr_1 = default(IntPtr);
		intptr_2 = default(IntPtr);
		intptr_3 = default(IntPtr);
		intptr_4 = default(IntPtr);
		intptr_5 = default(IntPtr);
		intptr_6 = default(IntPtr);
		intptr_7 = default(IntPtr);
		int_0 = 0;
		list_0 = new List<int>();
		list_1 = (from x in Process.GetProcesses()
			orderby x.ProcessName
			select x).ToList();
		method_8();
		method_9();
	}

	public void method_0(bool disable)
	{
		Class52.EnableWindow(intptr_4, !disable);
	}

	public void method_1()
	{
		Class52.PostMessage(intptr_3, 4144u, 0, 0);
	}

	public void method_2(int index)
	{
		if (index == -1)
		{
			Console.WriteLine("Can't find process.");
			return;
		}
		Class52.PostMessage(intptr_3, 4104u, index, 0);
		list_1.RemoveAt(index);
	}

	public void method_3(bool disable)
	{
		Class52.EnableMenuItem(intptr_5, (uint)int_0, disable ? 1u : 0u);
	}

	public void method_4(bool disable)
	{
		if (disable)
		{
			Class52.LockWindowUpdate(intptr_3);
		}
		else
		{
			Class52.LockWindowUpdate(IntPtr.Zero);
		}
	}

	public void method_5(Enum11 speed)
	{
		Class52.PostMessage(intptr_0, 273u, list_0[(int)speed], 0);
	}

	public void method_6(bool disable)
	{
		foreach (int item in list_0)
		{
			Class52.EnableMenuItem(intptr_5, (uint)item, disable ? 1u : 0u);
		}
	}

	public int method_7(string procName)
	{
		foreach (Process item in list_1)
		{
			if (item.ProcessName.ToLower().Contains(procName))
			{
				return list_1.IndexOf(item);
			}
		}
		return -1;
	}

	private void method_8()
	{
		do
		{
			intptr_1 = Class52.FindWindowEx(intptr_0, intptr_1, null, null);
			intptr_2 = Class52.FindWindowEx(intptr_1, intptr_2, null, null);
			for (int i = 0; i < 7; i++)
			{
				intptr_3 = Class52.FindWindowEx(intptr_2, intptr_3, null, null);
				if (Class52.FindWindowEx(intptr_3, IntPtr.Zero, "SysListView32", null) != IntPtr.Zero)
				{
					Console.WriteLine(" Found tasklist window at 0x" + intptr_3.ToString("X"));
					lhSysListView32 = Class52.FindWindowEx(intptr_3, IntPtr.Zero, "SysListView32", null);
					lhSysHeader32 = Class52.FindWindowEx(intptr_3, IntPtr.Zero, "SysHeader32", null);
					break;
				}
			}
			Thread.Sleep(100);
		}
		while (intptr_4 == IntPtr.Zero);
		intptr_5 = Class52.GetMenu(intptr_0);
		intptr_6 = Class52.GetSubMenu(intptr_5, 2);
		intptr_7 = Class52.GetSubMenu(intptr_6, 1);
		int_0 = Class52.GetMenuItemID(intptr_6, 0);
		list_0 = new List<int>
		{
			Class52.GetMenuItemID(intptr_7, 0),
			Class52.GetMenuItemID(intptr_7, 1),
			Class52.GetMenuItemID(intptr_7, 2),
			Class52.GetMenuItemID(intptr_7, 3)
		};
	}

	private void method_9()
	{
		Console.WriteLine("\n\t[Task Manager Instance Offsets]");
		Console.WriteLine("\t lhWndParent:\t\t0x" + lhWndParent.ToString("X"));
		Console.WriteLine("\t lhTaskManagerMain:\t0x" + lhTaskManagerMain.ToString("X"));
		Console.WriteLine("\t lhDirectUIHWND:\t0x" + lhDirectUIHWND.ToString("X"));
		Console.WriteLine("\t lhSysListView32:\t0x" + lhSysListView32.ToString("X"));
		Console.WriteLine("\t lhSysHeader32:\t\t0x" + lhSysHeader32.ToString("X"));
		Console.WriteLine("\n");
	}
}
