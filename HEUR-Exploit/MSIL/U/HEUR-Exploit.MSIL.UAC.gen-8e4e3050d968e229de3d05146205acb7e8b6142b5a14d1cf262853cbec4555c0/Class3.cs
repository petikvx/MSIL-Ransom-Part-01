using System;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

internal static class Class3
{
	[CompilerGenerated]
	private sealed class Class4
	{
		public TcpClient tcpClient_0;

		internal void method_0()
		{
			smethod_1(tcpClient_0);
		}
	}

	private static Class2.Delegate1 delegate1_0;

	public static void smethod_0(TcpClient client, Class2.Delegate1 notify)
	{
		delegate1_0 = notify;
		new Thread((ThreadStart)delegate
		{
			smethod_1(client);
		}).Start(client);
	}

	private static void smethod_1(TcpClient client)
	{
		NetworkStream stream;
		try
		{
			stream = client.GetStream();
		}
		catch (Exception)
		{
			delegate1_0();
			return;
		}
		string text = smethod_2(stream);
		if (text == "")
		{
			delegate1_0();
			return;
		}
		if (text.Contains("EXIT"))
		{
			Class2.bool_0 = false;
			Class2.smethod_2();
			Application.Exit();
			return;
		}
		try
		{
			TcpClient server = new TcpClient("localhost", 3389);
			new Class8().method_0(client, stream, server, delegate1_0);
			delegate1_0();
		}
		catch (Exception)
		{
			delegate1_0();
			client.Close();
		}
	}

	private static string smethod_2(NetworkStream strem)
	{
		try
		{
			byte[] array = new byte[1];
			StringBuilder stringBuilder = new StringBuilder();
			while (Class2.bool_0)
			{
				int num = strem.Read(array, 0, array.Length);
				if (num == 0)
				{
					break;
				}
				stringBuilder.Append(Encoding.ASCII.GetString(array, 0, num));
				if (stringBuilder.ToString().EndsWith("\r\n\r\n"))
				{
					break;
				}
			}
			return stringBuilder.ToString();
		}
		catch (Exception)
		{
			return "";
		}
	}
}
