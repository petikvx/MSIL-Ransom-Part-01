using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

public class GClass27
{
	private Class20.Struct8 struct8_0;

	private IntPtr intptr_0;

	private GEnum16 genum16_0;

	public string Name => struct8_0.string_1;

	public string ShortName => struct8_0.string_0;

	public int LineId => struct8_0.int_3;

	public GEnum17 ComponentType => struct8_0.genum17_0;

	public string TypeDescription => struct8_0.genum17_0 switch
	{
		GEnum17.const_9 => "Undefined Source", 
		GEnum17.const_10 => "Digital Source", 
		GEnum17.const_11 => "Line Level Source", 
		GEnum17.const_12 => "Microphone Source", 
		GEnum17.const_13 => "Synthesizer Source", 
		GEnum17.const_14 => "Compact Disk Source", 
		GEnum17.const_15 => "Telephone Source", 
		GEnum17.const_16 => "PC Speaker Source", 
		GEnum17.const_17 => "Wave Out Source", 
		GEnum17.const_18 => "Auxiliary Source", 
		GEnum17.const_19 => "Analog Source", 
		GEnum17.const_0 => "Undefined Destination", 
		GEnum17.const_1 => "Digital Destination", 
		GEnum17.const_2 => "Line Level Destination", 
		GEnum17.const_3 => "Monitor Destination", 
		GEnum17.const_4 => "Speakers Destination", 
		GEnum17.const_5 => "Headphones Destination", 
		GEnum17.const_6 => "Telephone Destination", 
		GEnum17.const_7 => "Wave Input Destination", 
		GEnum17.const_8 => "Voice Recognition Destination", 
		_ => "Invalid Component Type", 
	};

	public int Channels => struct8_0.int_4;

	public int SourceCount => struct8_0.int_5;

	public int ControlsCount => struct8_0.int_6;

	public bool IsActive => (struct8_0.enum9_0 & Class20.Enum9.flag_0) != 0;

	public bool IsDisconnected => (struct8_0.enum9_0 & Class20.Enum9.flag_1) != 0;

	public bool IsSource => (struct8_0.enum9_0 & Class20.Enum9.flag_2) != 0;

	public IEnumerable<GClass21> Controls => GClass21.smethod_0(intptr_0, this, genum16_0);

	public IEnumerable<GClass27> Sources
	{
		get
		{
			for (int source = 0; source < SourceCount; source++)
			{
				yield return method_0(source);
			}
		}
	}

	public string TargetName => struct8_0.string_2;

	public GClass27(IntPtr mixerHandle, int destinationIndex, GEnum16 mixerHandleType)
	{
		intptr_0 = mixerHandle;
		genum16_0 = mixerHandleType;
		struct8_0 = default(Class20.Struct8);
		struct8_0.int_0 = Marshal.SizeOf(struct8_0);
		struct8_0.int_1 = destinationIndex;
		GException0.smethod_1(Class20.mixerGetLineInfo(mixerHandle, ref struct8_0, mixerHandleType | GEnum16.flag_1), "mixerGetLineInfo");
	}

	public GClass27(IntPtr mixerHandle, int destinationIndex, int sourceIndex, GEnum16 mixerHandleType)
	{
		intptr_0 = mixerHandle;
		genum16_0 = mixerHandleType;
		struct8_0 = default(Class20.Struct8);
		struct8_0.int_0 = Marshal.SizeOf(struct8_0);
		struct8_0.int_1 = destinationIndex;
		struct8_0.int_2 = sourceIndex;
		GException0.smethod_1(Class20.mixerGetLineInfo(mixerHandle, ref struct8_0, mixerHandleType | GEnum16.flag_13), "mixerGetLineInfo");
	}

	public static int smethod_0(int waveInDevice)
	{
		int mixerID = -1;
		GException0.smethod_1(Class20.mixerGetID((IntPtr)waveInDevice, out mixerID, GEnum16.flag_5), "mixerGetID");
		return mixerID;
	}

	public GClass27 method_0(int sourceIndex)
	{
		if (sourceIndex < 0 || sourceIndex >= SourceCount)
		{
			throw new ArgumentOutOfRangeException("sourceIndex");
		}
		return new GClass27(intptr_0, struct8_0.int_1, sourceIndex, genum16_0);
	}

	public override string ToString()
	{
		return $"{Name} {TypeDescription} ({ControlsCount} controls, ID={struct8_0.int_3})";
	}
}
