using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

public abstract class GClass21
{
	internal Class20.Struct11 struct11_0;

	internal Class20.Struct5 struct5_0;

	protected IntPtr intptr_0;

	protected int int_0;

	protected GEnum16 genum16_0;

	public string Name => struct11_0.string_1;

	public GEnum15 ControlType => struct11_0.genum15_0;

	public bool IsBoolean => smethod_2(struct11_0.genum15_0);

	public bool IsListText => smethod_3(struct11_0.genum15_0);

	public bool IsSigned => smethod_4(struct11_0.genum15_0);

	public bool IsUnsigned => smethod_5(struct11_0.genum15_0);

	public bool IsCustom => smethod_6(struct11_0.genum15_0);

	public static IList<GClass21> smethod_0(IntPtr mixerHandle, GClass27 mixerLine, GEnum16 mixerHandleType)
	{
		List<GClass21> list = new List<GClass21>();
		if (mixerLine.ControlsCount > 0)
		{
			int num = Marshal.SizeOf(typeof(Class20.Struct11));
			Class20.Struct7 mixerLineControls = default(Class20.Struct7);
			IntPtr hglobal = Marshal.AllocHGlobal(num * mixerLine.ControlsCount);
			mixerLineControls.int_0 = Marshal.SizeOf(mixerLineControls);
			mixerLineControls.int_1 = mixerLine.LineId;
			mixerLineControls.int_3 = mixerLine.ControlsCount;
			mixerLineControls.intptr_0 = hglobal;
			mixerLineControls.int_4 = Marshal.SizeOf(typeof(Class20.Struct11));
			try
			{
				GEnum11 gEnum = Class20.mixerGetLineControls(mixerHandle, ref mixerLineControls, GEnum16.flag_1 | mixerHandleType);
				if (gEnum != 0)
				{
					throw new GException0(gEnum, "mixerGetLineControls");
				}
				for (int i = 0; i < mixerLineControls.int_3; i++)
				{
					GClass21 item = smethod_1(controlId: ((Class20.Struct11)Marshal.PtrToStructure((IntPtr)(hglobal.ToInt64() + num * i), typeof(Class20.Struct11))).int_0, mixerHandle: mixerHandle, nLineID: mixerLine.LineId, nChannels: mixerLine.Channels, mixerFlags: mixerHandleType);
					list.Add(item);
				}
				return list;
			}
			finally
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
		return list;
	}

	public static GClass21 smethod_1(IntPtr mixerHandle, int nLineID, int controlId, int nChannels, GEnum16 mixerFlags)
	{
		Class20.Struct7 mixerLineControls = default(Class20.Struct7);
		Class20.Struct11 structure = default(Class20.Struct11);
		IntPtr ptr = Marshal.AllocCoTaskMem(Marshal.SizeOf(structure));
		mixerLineControls.int_0 = Marshal.SizeOf(mixerLineControls);
		mixerLineControls.int_3 = 1;
		mixerLineControls.int_2 = controlId;
		mixerLineControls.int_4 = Marshal.SizeOf(structure);
		mixerLineControls.intptr_0 = ptr;
		mixerLineControls.int_1 = nLineID;
		GEnum11 gEnum = Class20.mixerGetLineControls(mixerHandle, ref mixerLineControls, GEnum16.flag_13 | mixerFlags);
		if (gEnum != 0)
		{
			Marshal.FreeCoTaskMem(ptr);
			throw new GException0(gEnum, "mixerGetLineControls");
		}
		structure = (Class20.Struct11)Marshal.PtrToStructure(mixerLineControls.intptr_0, typeof(Class20.Struct11));
		Marshal.FreeCoTaskMem(ptr);
		if (smethod_2(structure.genum15_0))
		{
			return new GClass22(structure, mixerHandle, mixerFlags, nChannels);
		}
		if (smethod_4(structure.genum15_0))
		{
			return new GClass25(structure, mixerHandle, mixerFlags, nChannels);
		}
		if (smethod_5(structure.genum15_0))
		{
			return new GClass26(structure, mixerHandle, mixerFlags, nChannels);
		}
		if (smethod_3(structure.genum15_0))
		{
			return new GClass24(structure, mixerHandle, mixerFlags, nChannels);
		}
		if (!smethod_6(structure.genum15_0))
		{
			throw new InvalidOperationException($"Unknown mixer control type {structure.genum15_0}");
		}
		return new GClass23(structure, mixerHandle, mixerFlags, nChannels);
	}

	protected void method_0()
	{
		struct5_0.int_0 = Marshal.SizeOf(struct5_0);
		struct5_0.int_1 = struct11_0.int_0;
		if (IsCustom)
		{
			struct5_0.int_2 = 0;
		}
		else if ((struct11_0.uint_1 & (true ? 1u : 0u)) != 0)
		{
			struct5_0.int_2 = 1;
		}
		else
		{
			struct5_0.int_2 = int_0;
		}
		if ((struct11_0.uint_1 & 2u) != 0)
		{
			struct5_0.intptr_0 = (IntPtr)struct11_0.uint_2;
		}
		else if (IsCustom)
		{
			struct5_0.intptr_0 = IntPtr.Zero;
		}
		else
		{
			struct5_0.intptr_0 = IntPtr.Zero;
		}
		if (IsBoolean)
		{
			struct5_0.int_3 = Marshal.SizeOf(default(Class20.Struct12));
		}
		else if (IsListText)
		{
			struct5_0.int_3 = Marshal.SizeOf(default(Class20.Struct14));
		}
		else if (IsSigned)
		{
			struct5_0.int_3 = Marshal.SizeOf(default(Class20.Struct13));
		}
		else if (IsUnsigned)
		{
			struct5_0.int_3 = Marshal.SizeOf(default(Class20.Struct15));
		}
		else
		{
			struct5_0.int_3 = struct11_0.struct10_0.int_1;
		}
		int num = struct5_0.int_3 * struct5_0.int_2;
		if ((struct11_0.uint_1 & 2u) != 0)
		{
			num *= (int)struct11_0.uint_2;
		}
		IntPtr intPtr = Marshal.AllocCoTaskMem(num);
		struct5_0.intptr_1 = intPtr;
		GEnum11 gEnum = Class20.mixerGetControlDetails(intptr_0, ref struct5_0, GEnum16.flag_1 | genum16_0);
		if (gEnum == GEnum11.const_0)
		{
			GetDetails(struct5_0.intptr_1);
		}
		Marshal.FreeCoTaskMem(intPtr);
		if (gEnum != 0)
		{
			throw new GException0(gEnum, "mixerGetControlDetails");
		}
	}

	protected abstract void GetDetails(IntPtr pDetails);

	private static bool smethod_2(GEnum15 controlType)
	{
		switch (controlType)
		{
		default:
			return false;
		case GEnum15.const_1:
		case GEnum15.const_5:
		case GEnum15.const_6:
		case GEnum15.const_7:
		case GEnum15.const_8:
		case GEnum15.const_9:
		case GEnum15.const_10:
		case GEnum15.const_11:
		case GEnum15.const_24:
		case GEnum15.const_25:
		case GEnum15.const_26:
		case GEnum15.const_27:
			return true;
		}
	}

	private static bool smethod_3(GEnum15 controlType)
	{
		if (controlType != GEnum15.const_23 && (uint)(controlType - 1879113728) > 1u && (uint)(controlType - 1895890944) > 1u)
		{
			return false;
		}
		return true;
	}

	private static bool smethod_4(GEnum15 controlType)
	{
		switch (controlType)
		{
		default:
			return false;
		case GEnum15.const_2:
		case GEnum15.const_3:
		case GEnum15.const_13:
		case GEnum15.const_12:
		case GEnum15.const_16:
		case GEnum15.const_17:
		case GEnum15.const_18:
			return true;
		}
	}

	private static bool smethod_5(GEnum15 controlType)
	{
		switch (controlType)
		{
		default:
			return false;
		case GEnum15.const_4:
		case GEnum15.const_14:
		case GEnum15.const_15:
		case GEnum15.const_19:
		case GEnum15.const_20:
		case GEnum15.const_21:
		case GEnum15.const_22:
		case GEnum15.const_23:
		case GEnum15.const_28:
		case GEnum15.const_29:
			return true;
		}
	}

	private static bool smethod_6(GEnum15 controlType)
	{
		return controlType == GEnum15.const_0;
	}

	public override string ToString()
	{
		return $"{Name} {ControlType}";
	}
}
