using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

public class GClass20
{
	private Class20.Struct6 struct6_0;

	private IntPtr intptr_0;

	private GEnum16 genum16_0;

	public static int NumberOfDevices => Class20.mixerGetNumDevs();

	public int DestinationCount => (int)struct6_0.uint_2;

	public string Name => struct6_0.string_0;

	public GEnum10 Manufacturer => (GEnum10)struct6_0.ushort_0;

	public int ProductID => struct6_0.ushort_1;

	public IEnumerable<GClass27> Destinations
	{
		get
		{
			for (int destination = 0; destination < DestinationCount; destination++)
			{
				yield return method_0(destination);
			}
		}
	}

	public static IEnumerable<GClass20> Mixers
	{
		get
		{
			for (int device = 0; device < NumberOfDevices; device++)
			{
				yield return new GClass20(device);
			}
		}
	}

	public GClass20(int mixerIndex)
	{
		if (mixerIndex < 0 || mixerIndex >= NumberOfDevices)
		{
			throw new ArgumentOutOfRangeException("mixerID");
		}
		struct6_0 = default(Class20.Struct6);
		GException0.smethod_1(Class20.mixerGetDevCaps((IntPtr)mixerIndex, ref struct6_0, Marshal.SizeOf(struct6_0)), "mixerGetDevCaps");
		intptr_0 = (IntPtr)mixerIndex;
		genum16_0 = GEnum16.flag_1;
	}

	public GClass27 method_0(int destinationIndex)
	{
		if (destinationIndex < 0 || destinationIndex >= DestinationCount)
		{
			throw new ArgumentOutOfRangeException("destinationIndex");
		}
		return new GClass27(intptr_0, destinationIndex, genum16_0);
	}
}
