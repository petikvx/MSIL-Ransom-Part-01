using System;
using System.IO;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential, Pack = 2)]
public class GClass15
{
	protected GEnum9 genum9_0;

	protected short short_0;

	protected int int_0;

	protected int int_1;

	protected short short_1;

	protected short short_2;

	protected short short_3;

	public GEnum9 Encoding => genum9_0;

	public int Channels => short_0;

	public int SampleRate => int_0;

	public int AverageBytesPerSecond => int_1;

	public virtual int BlockAlign => short_1;

	public int BitsPerSample => short_2;

	public int ExtraSize => short_3;

	public GClass15()
		: this(44100, 16, 2)
	{
	}

	public GClass15(int sampleRate, int channels)
		: this(sampleRate, 16, channels)
	{
	}

	public int method_0(int milliseconds)
	{
		int num = (int)((double)AverageBytesPerSecond / 1000.0 * (double)milliseconds);
		if (num % BlockAlign != 0)
		{
			num = num + BlockAlign - num % BlockAlign;
		}
		return num;
	}

	public static GClass15 smethod_0(GEnum9 tag, int sampleRate, int channels, int averageBytesPerSecond, int blockAlign, int bitsPerSample)
	{
		return new GClass15
		{
			genum9_0 = tag,
			short_0 = (short)channels,
			int_0 = sampleRate,
			int_1 = averageBytesPerSecond,
			short_1 = (short)blockAlign,
			short_2 = (short)bitsPerSample,
			short_3 = 0
		};
	}

	public static GClass15 smethod_1(int sampleRate, int channels)
	{
		return smethod_0(GEnum9.const_6, sampleRate, channels, sampleRate * channels, channels, 8);
	}

	public static GClass15 smethod_2(int sampleRate, int channels)
	{
		return smethod_0(GEnum9.const_7, sampleRate, channels, sampleRate * channels, channels, 8);
	}

	public GClass15(int rate, int bits, int channels)
	{
		if (channels < 1)
		{
			throw new ArgumentOutOfRangeException("channels", "Channels must be 1 or greater");
		}
		genum9_0 = GEnum9.const_1;
		short_0 = (short)channels;
		int_0 = rate;
		short_2 = (short)bits;
		short_3 = 0;
		short_1 = (short)(channels * (bits / 8));
		int_1 = int_0 * short_1;
	}

	public static GClass15 smethod_3(int sampleRate, int channels)
	{
		GClass15 gClass = new GClass15();
		gClass.genum9_0 = GEnum9.const_3;
		gClass.short_0 = (short)channels;
		gClass.short_2 = 32;
		gClass.int_0 = sampleRate;
		gClass.short_1 = (short)(4 * channels);
		gClass.int_1 = sampleRate * gClass.short_1;
		gClass.short_3 = 0;
		return gClass;
	}

	public static IntPtr smethod_4(GClass15 format)
	{
		IntPtr intPtr = Marshal.AllocHGlobal(Marshal.SizeOf(format));
		Marshal.StructureToPtr(format, intPtr, fDeleteOld: false);
		return intPtr;
	}

	public static GClass15 smethod_5(BinaryReader br, int formatChunkLength)
	{
		GClass16 gClass = new GClass16();
		gClass.method_1(br, formatChunkLength);
		gClass.method_2(br);
		return gClass;
	}

	private void method_1(BinaryReader br, int formatChunkLength)
	{
		if (formatChunkLength < 16)
		{
			throw new InvalidDataException("Invalid WaveFormat Structure");
		}
		genum9_0 = (GEnum9)br.ReadUInt16();
		short_0 = br.ReadInt16();
		int_0 = br.ReadInt32();
		int_1 = br.ReadInt32();
		short_1 = br.ReadInt16();
		short_2 = br.ReadInt16();
		if (formatChunkLength > 16)
		{
			short_3 = br.ReadInt16();
			if (short_3 != formatChunkLength - 18)
			{
				short_3 = (short)(formatChunkLength - 18);
			}
		}
	}

	public GClass15(BinaryReader br)
	{
		int formatChunkLength = br.ReadInt32();
		method_1(br, formatChunkLength);
	}

	public override string ToString()
	{
		GEnum9 gEnum = genum9_0;
		if (gEnum != GEnum9.const_1 && gEnum != GEnum9.const_158)
		{
			return genum9_0.ToString();
		}
		return $"{short_2} bit PCM: {int_0 / 1000}kHz {short_0} channels";
	}

	public override bool Equals(object obj)
	{
		if (obj is GClass15 gClass)
		{
			if (genum9_0 == gClass.genum9_0 && short_0 == gClass.short_0 && int_0 == gClass.int_0 && int_1 == gClass.int_1 && short_1 == gClass.short_1)
			{
				return short_2 == gClass.short_2;
			}
			return false;
		}
		return false;
	}

	public override int GetHashCode()
	{
		return (int)genum9_0 ^ (int)short_0 ^ int_0 ^ int_1 ^ short_1 ^ short_2;
	}

	public virtual void Serialize(BinaryWriter writer)
	{
		writer.Write(18 + short_3);
		writer.Write((short)Encoding);
		writer.Write((short)Channels);
		writer.Write(SampleRate);
		writer.Write(AverageBytesPerSecond);
		writer.Write((short)BlockAlign);
		writer.Write((short)BitsPerSample);
		writer.Write(short_3);
	}
}
