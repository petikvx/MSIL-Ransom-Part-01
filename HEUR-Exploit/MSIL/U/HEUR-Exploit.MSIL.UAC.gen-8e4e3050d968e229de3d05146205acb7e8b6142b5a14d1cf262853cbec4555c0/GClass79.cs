using System;
using System.Diagnostics;
using System.Linq;
using System.Threading;

public class GClass79
{
	public static void smethod_0(string process, string[] arguments)
	{
		smethod_1(process);
		Console.WriteLine(GClass41.GClass43.string_1, process, string.Join(" ", arguments.Skip(1).ToArray()));
		Thread.Sleep(3000);
		try
		{
			if (new Process
			{
				StartInfo = 
				{
					FileName = process,
					Arguments = string.Join(" ", arguments.Skip(1).ToArray())
				}
			}.Start())
			{
				GClass78.smethod_0();
			}
		}
		catch (Exception ex)
		{
			Console.Clear();
			Console.WriteLine(ex.Message);
			Process.GetCurrentProcess().WaitForExit();
		}
	}

	private static void smethod_1(string runningprocess)
	{
		string text = runningprocess.Split(new char[1] { "\\"[0] }).Last();
		if (Process.GetProcessesByName(text.Replace(".exe", string.Empty)).Length >= 1)
		{
			for (int num = 11; num >= 0; num--)
			{
				Console.SetCursorPosition(0, 0);
				Console.Write(GClass41.GClass43.string_0, num);
				Thread.Sleep(1000);
			}
			smethod_2(text);
			Console.Clear();
		}
	}

	public static void smethod_2(string processName)
	{
		try
		{
			Process process = new Process();
			process.StartInfo.FileName = "taskkill";
			process.StartInfo.Arguments = $"/im {processName} /f /t";
			process.StartInfo.CreateNoWindow = true;
			process.StartInfo.UseShellExecute = false;
			process.Start();
		}
		catch (Exception ex)
		{
			Console.Clear();
			Console.WriteLine(ex.Message);
			Process.GetCurrentProcess().WaitForExit();
		}
	}

	public static void smethod_3()
	{
		Process[] processes = Process.GetProcesses();
		foreach (Process process in processes)
		{
			if (process.ProcessName == Process.GetCurrentProcess().ProcessName && process.Id != Process.GetCurrentProcess().Id)
			{
				try
				{
					process.Kill();
					process.WaitForExit();
				}
				catch (Exception ex)
				{
					Console.Clear();
					Console.WriteLine(ex.Message);
					Process.GetCurrentProcess().WaitForExit();
				}
			}
		}
	}
}
