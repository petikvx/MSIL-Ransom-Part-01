using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.AccessControl;
using System.Security.Principal;

public class GClass36
{
	[Flags]
	public enum GEnum18
	{
		flag_0 = 0x80,
		flag_1 = 2,
		flag_2 = 0x40,
		flag_3 = 0x400,
		flag_4 = 0x1000,
		flag_5 = 0x200,
		flag_6 = 0x100,
		flag_7 = 0x800,
		flag_8 = 1,
		flag_9 = 8,
		flag_10 = 0x10,
		flag_11 = 0x20,
		flag_12 = 0x10000,
		flag_13 = 0x20000,
		flag_14 = 0x100000,
		flag_15 = 0x40000,
		flag_16 = 0x80000,
		flag_17 = 0xF0000,
		flag_18 = 0x1F0FFF
	}

	[DllImport("advapi32.dll", SetLastError = true)]
	private static extern bool GetKernelObjectSecurity(IntPtr Handle, int securityInformation, [Out] byte[] pSecurityDescriptor, uint nLength, out uint lpnLengthNeeded);

	public static RawSecurityDescriptor smethod_0(IntPtr processHandle)
	{
		byte[] pSecurityDescriptor = new byte[0];
		GetKernelObjectSecurity(processHandle, 4, pSecurityDescriptor, 0u, out var lpnLengthNeeded);
		if ((long)lpnLengthNeeded > 32767L)
		{
			throw new Win32Exception();
		}
		if (!GetKernelObjectSecurity(processHandle, 4, pSecurityDescriptor = new byte[lpnLengthNeeded], lpnLengthNeeded, out lpnLengthNeeded))
		{
			throw new Win32Exception();
		}
		return new RawSecurityDescriptor(pSecurityDescriptor, 0);
	}

	[DllImport("advapi32.dll", SetLastError = true)]
	private static extern bool SetKernelObjectSecurity(IntPtr Handle, int securityInformation, [In] byte[] pSecurityDescriptor);

	public static void smethod_1(IntPtr processHandle, RawSecurityDescriptor dacl)
	{
		byte[] array = new byte[dacl.BinaryLength];
		dacl.GetBinaryForm(array, 0);
		if (!SetKernelObjectSecurity(processHandle, 4, array))
		{
			throw new Win32Exception();
		}
	}

	[DllImport("kernel32.dll")]
	public static extern IntPtr GetCurrentProcess();

	public static void smethod_2()
	{
		IntPtr currentProcess = GetCurrentProcess();
		RawSecurityDescriptor rawSecurityDescriptor = smethod_0(currentProcess);
		rawSecurityDescriptor.DiscretionaryAcl!.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 2035711, new SecurityIdentifier(WellKnownSidType.WorldSid, null), isCallback: false, null));
		smethod_1(currentProcess, rawSecurityDescriptor);
	}

	public static void smethod_3(IntPtr hProcess, WellKnownSidType sid = WellKnownSidType.WorldSid)
	{
		RawSecurityDescriptor rawSecurityDescriptor = smethod_0(hProcess);
		rawSecurityDescriptor.DiscretionaryAcl!.InsertAce(0, new CommonAce(AceFlags.None, AceQualifier.AccessDenied, 2035711, new SecurityIdentifier(sid, null), isCallback: false, null));
		smethod_1(hProcess, rawSecurityDescriptor);
	}

	public static void smethod_4(WellKnownSidType sid = WellKnownSidType.WorldSid)
	{
		smethod_3(GetCurrentProcess(), sid);
	}

	public static void smethod_5(int processID, WellKnownSidType sid = WellKnownSidType.WorldSid)
	{
		try
		{
			Process processById = Process.GetProcessById(processID);
			if (processById != null)
			{
				smethod_3(processById.Handle, sid);
			}
		}
		catch (Exception value)
		{
			Console.Error.WriteLine(value);
		}
	}

	public static void smethod_6()
	{
		smethod_3(GetCurrentProcess(), WellKnownSidType.BuiltinUsersSid);
	}

	public static void smethod_7(int processID)
	{
		smethod_5(processID, WellKnownSidType.BuiltinUsersSid);
	}
}
