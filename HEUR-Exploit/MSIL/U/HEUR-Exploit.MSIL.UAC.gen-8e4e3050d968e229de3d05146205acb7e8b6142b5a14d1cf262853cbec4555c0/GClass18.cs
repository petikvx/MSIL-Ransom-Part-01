using System;

public class GClass18
{
	private readonly byte[] byte_0;

	private readonly object object_0;

	private int int_0;

	private int int_1;

	private int int_2;

	public int MaxLength => byte_0.Length;

	public int Count
	{
		get
		{
			lock (object_0)
			{
				return int_2;
			}
		}
	}

	public GClass18(int size)
	{
		byte_0 = new byte[size];
		object_0 = new object();
	}

	public int method_0(byte[] data, int offset, int count)
	{
		lock (object_0)
		{
			int num = 0;
			if (count > byte_0.Length - int_2)
			{
				count = byte_0.Length - int_2;
			}
			int num2 = Math.Min(byte_0.Length - int_0, count);
			Array.Copy(data, offset, byte_0, int_0, num2);
			int_0 += num2;
			int_0 %= byte_0.Length;
			num += num2;
			if (num < count)
			{
				Array.Copy(data, offset + num, byte_0, int_0, count - num);
				int_0 += count - num;
				num = count;
			}
			int_2 += num;
			return num;
		}
	}

	public int method_1(byte[] data, int offset, int count)
	{
		lock (object_0)
		{
			if (count > int_2)
			{
				count = int_2;
			}
			int num = 0;
			int num2 = Math.Min(byte_0.Length - int_1, count);
			Array.Copy(byte_0, int_1, data, offset, num2);
			num = 0 + num2;
			int_1 += num2;
			int_1 %= byte_0.Length;
			if (num < count)
			{
				Array.Copy(byte_0, int_1, data, offset + num, count - num);
				int_1 += count - num;
				num = count;
			}
			int_2 -= num;
			return num;
		}
	}

	public void method_2()
	{
		lock (object_0)
		{
			method_3();
		}
	}

	private void method_3()
	{
		int_2 = 0;
		int_1 = 0;
		int_0 = 0;
	}

	public void method_4(int count)
	{
		lock (object_0)
		{
			if (count >= int_2)
			{
				method_3();
				return;
			}
			int_2 -= count;
			int_1 += count;
			int_1 %= MaxLength;
		}
	}
}
