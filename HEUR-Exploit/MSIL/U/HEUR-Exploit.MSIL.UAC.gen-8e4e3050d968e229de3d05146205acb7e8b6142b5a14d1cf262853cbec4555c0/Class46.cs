using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal class Class46
{
	private const int int_0 = 1024;

	[DllImport("user32.dll", SetLastError = true)]
	private static extern bool PostMessage(IntPtr hWnd, [MarshalAs(UnmanagedType.U4)] uint Msg, IntPtr wParam, IntPtr lParam);

	[DllImport("user32.dll", SetLastError = true)]
	private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

	public static void smethod_0()
	{
		try
		{
			IntPtr hWnd = FindWindow("Shell_TrayWnd", null);
			Console.WriteLine("INIT PTR: {0}", hWnd.ToInt32());
			PostMessage(hWnd, 1460u, (IntPtr)0, (IntPtr)0);
			while (true)
			{
				hWnd = FindWindow("Shell_TrayWnd", null);
				Console.WriteLine("PTR: {0}", hWnd.ToInt32());
				if (hWnd.ToInt32() == 0)
				{
					break;
				}
				Thread.Sleep(1000);
			}
			Console.WriteLine("Success. Breaking out of loop.");
		}
		catch (Exception ex)
		{
			Console.WriteLine("{0} {1}", ex.Message, ex.StackTrace);
		}
		Console.WriteLine("Restarting the shell.");
		string fileName = string.Format("{0}\\{1}", Environment.GetEnvironmentVariable("WINDIR"), "explorer.exe");
		Process process = new Process();
		process.StartInfo.FileName = fileName;
		process.StartInfo.UseShellExecute = true;
		process.Start();
		Console.ReadLine();
	}
}
