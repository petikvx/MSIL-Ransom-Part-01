using System;
using System.Net.Sockets;
using System.Threading;

internal class Class8
{
	private TcpClient tcpClient_0;

	private TcpClient tcpClient_1;

	private NetworkStream networkStream_0;

	private NetworkStream networkStream_1;

	private Class2.Delegate1 delegate1_0;

	public void method_0(TcpClient client, NetworkStream client_str, TcpClient server, Class2.Delegate1 notify)
	{
		tcpClient_0 = client;
		tcpClient_1 = server;
		networkStream_0 = client_str;
		networkStream_1 = server.GetStream();
		delegate1_0 = notify;
		new Thread(method_1).Start();
		new Thread(method_2).Start();
	}

	private void method_1()
	{
		try
		{
			byte[] array = new byte[24577];
			while (true)
			{
				if (Class2.bool_0)
				{
					int num = networkStream_0.Read(array, 0, array.Length);
					if (num == 0)
					{
						break;
					}
					networkStream_1.Write(array, 0, num);
					networkStream_1.Flush();
					continue;
				}
				return;
			}
			networkStream_0.Close();
			tcpClient_0.Close();
			tcpClient_1.Close();
			networkStream_1.Close();
		}
		catch (Exception)
		{
			tcpClient_0.Close();
			tcpClient_1.Close();
		}
	}

	private void method_2()
	{
		try
		{
			byte[] array = new byte[24577];
			while (true)
			{
				if (Class2.bool_0)
				{
					int num = networkStream_1.Read(array, 0, array.Length);
					if (num == 0)
					{
						break;
					}
					networkStream_0.Write(array, 0, num);
					networkStream_0.Flush();
					continue;
				}
				return;
			}
			networkStream_0.Close();
			tcpClient_0.Close();
			tcpClient_1.Close();
			networkStream_1.Close();
		}
		catch (Exception)
		{
			tcpClient_0.Close();
			tcpClient_1.Close();
		}
	}
}
