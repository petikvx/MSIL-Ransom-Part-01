using System;
using System.Drawing;
using System.Globalization;
using System.Management;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;

[StandardModule]
internal sealed class Class6
{
	[StructLayout(LayoutKind.Sequential)]
	public class Class7
	{
		public int int_0;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 39)]
		public string string_0;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
		public string string_1;
	}

	public static Size smethod_0()
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Expected O, but got Unknown
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Expected O, but got Unknown
		Size result = default(Size);
		try
		{
			ManagementObjectSearcher val = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController");
			try
			{
				ManagementObjectEnumerator enumerator = val.Get().GetEnumerator();
				if (enumerator.MoveNext())
				{
					ManagementObject val2 = (ManagementObject)enumerator.get_Current();
					result = new Size(Conversions.ToInteger(((ManagementBaseObject)val2).get_Item("CurrentHorizontalResolution")), Conversions.ToInteger(((ManagementBaseObject)val2).get_Item("CurrentVerticalResolution")));
				}
			}
			finally
			{
				((IDisposable)val.Get().GetEnumerator())?.Dispose();
			}
			if ((result.Width < 10) | (result.Height < 10))
			{
				throw new Exception();
			}
			return result;
		}
		catch (Exception)
		{
			try
			{
				result = new Size(Screen.get_PrimaryScreen().get_Bounds().Width, Screen.get_PrimaryScreen().get_Bounds().Height);
				return result;
			}
			catch (Exception)
			{
				return result;
			}
		}
	}

	public static object smethod_1()
	{
		object result = "";
		try
		{
			result = Environment.UserName;
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static string smethod_2()
	{
		string result = "";
		try
		{
			result = CultureInfo.CurrentCulture.ToString().Substring(CultureInfo.CurrentCulture.ToString().LastIndexOf("-") + 1, CultureInfo.CurrentCulture.ToString().Length - 1 - CultureInfo.CurrentCulture.ToString().LastIndexOf("-"));
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static string smethod_3()
	{
		string result = null;
		try
		{
			result = CultureInfo.CurrentCulture.ToString().Substring(0, CultureInfo.CurrentCulture.ToString().LastIndexOf("-"));
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static string smethod_4()
	{
		string result = "";
		try
		{
			WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
			string empty = string.Empty;
			empty = (windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator) ? "Admin" : "User");
			result = empty;
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static object smethod_5()
	{
		object result = "";
		try
		{
			IntPtr intPtr = Marshal.AllocHGlobal(123);
			Class7 @class = new Class7();
			Marshal.StructureToPtr(@class, intPtr, fDeleteOld: false);
			string text = string.Empty;
			if (Class9.GetCurrentHwProfile(intPtr))
			{
				Marshal.PtrToStructure(intPtr, @class);
				text = @class.string_0.ToString();
			}
			result = text;
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static object smethod_6()
	{
		object result = null;
		try
		{
			result = NetworkInterface.GetAllNetworkInterfaces()[0].GetPhysicalAddress().ToString();
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static string smethod_7()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		string result = "";
		try
		{
			result = new ComputerInfo().get_OSFullName().Replace("Microsoft", null);
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}
}
